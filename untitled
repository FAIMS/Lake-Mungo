/*** HEARTH ASSOCIATED MATERIALS ***/
hearthAssociatedMaterials() {
  String tabgroup = "hearthAssociatedMaterials";
  String archentType = "Hearth Associated Materials";
  String relTypeName = hearth.relTypeName;
  String id = null;
  Boolean loading = false;
  List assocMaterialVocabulary = new ArrayList();
  List stoneArtefactsVocabulary = new ArrayList();
  List chippedStoneVocabulary = new ArrayList();  
  Boolean removeLacust = true;
  Boolean removeTerrestrial = true;
  Boolean removeEggshell = true;
  Boolean removeStone = true;
  Boolean removeOther = true;
  Boolean removeChippedStone = true;
  Boolean removeRetouchedStone = true;
  Boolean removeUnmodifiedStone = true;
  Boolean removeGroundStone = true;

  onEvent(tabgroup, "show", "hearthAssoc.renderTabgroup(); keepTabGroupChanges(\""+tabgroup+"\"); hearthAssoc.save();");
  onEvent(tabgroup+"/nearbyMaterial/assocMaterial", "click", "hearthAssoc.renderTabgroup();");

  /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("CheckBoxGroup", tabgroup+"/nearbyMaterial/assocMaterial", "HearthAssoc_-_Associated_material");
    fetchVocabulary("HearthAssoc_-_Associated_material", assocMaterialVocabulary);
    fetchVocabulary("HearthAssoc_-_Associated_stone_artefacts", stoneArtefactsVocabulary);
    fetchVocabulary("HearthAssoc_-_Associated_chipped_stone_artefacts", chippedStoneVocabulary);
  }

  /** Saves the associated materials record. **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(tabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("hearthAssociatedMaterials.save()", "Saving the relation between hearth " + hearth.id + " and " + tabgroup + " " + id);
        String callback = "hearth.listAssociatedMaterials();" + "showTab(\"hearth/associatedMaterials\");";
        saveEntitiesToRel(relTypeName, hearth.id, id, callback);
      }
    }, enable_autosave);
  }

  /** Loads the associated materials record. **/
  load() {
    String selectedID = getListItemValue();
    if (!isNull(selectedID) && !selectedID.equals("placeholder")) {
      Log.d("load()", "Preparing to load associated material with ID: " + selectedID);
      dialog = showBusy("creating a new record", "please wait");
      id = selectedID;
      loading = true;
      // show all tabs and render all the dynamic views before fetching the saved entity
      removeLacust = false;
      removeTerrestrial = false;
      removeEggshell = false;
      removeStone = false;
      removeOther = false;
      removeChippedStone = false;
      removeRetouchedStone = false;
      removeUnmodifiedStone = false;
      removeGroundStone = false;
      toggleTabs();
      removeAllViewsAndContainers(tabgroup);
      displayDynamicViews();
      // fetch the saved entity, populating the rendered dynamic views and then re-render the tabgroup to remove the appropriate views
      showTabGroup(tabgroup, id, new FetchCallback() {
        onFetch(result) {
          // log.d("loaded assoc: " + result.toString() + " with attributes: " + result.getAttributes().toString());
          loading = false;
          renderTabgroup();
          dialog.dismiss();
        }
      });
    }
  }

  /** Creates an associated materials record. **/
  create() {
    if (!isNull(hearth.id)) {
      fetchOne("select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = '"+archentType+"' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+hearth.id+" " +
        "and relntypeName = '"+relTypeName+"') " +
        "and uuid != "+hearth.id+");",  new FetchCallback() {
        onFetch(result) {
          if(isNull(result)) {
            dialog = showBusy("creating a new record", "please wait");
            id = null;
            removeLacust = true;
            removeTerrestrial = true;
            removeEggshell = true;
            removeStone = true;
            removeOther = true;
            removeChippedStone = true;
            removeRetouchedStone = true;
            removeUnmodifiedStone = true;
            removeGroundStone = true;
            newTabGroup(tabgroup);
            removeAllViewsAndContainers(tabgroup);
            // renderTabgroup();
            dialog.dismiss();
          } else {
            showToast("Only one associated material can be recorded");
          }
        }
      });
    }
  }

  /** Renders all appropriate dynamic views for the tabgroup. **/
  renderTabgroup() {
    if (!loading) {
      Log.d("hearthAssoc.renderTabgroup()", "Rendering tabgroup");
      checkSelections();
      toggleTabs();
      removeDynamicViews();
      displayDynamicViews();
    } else {
      Log.d("hearthAssoc.renderTabgroup()", "Loading record, not rendering tabgroup");
    }
  }

  /** Checks the selections that dynamic views are dependant upon and changes the flags as appropriate. **/
  checkSelections() {
    // default all removals to true
    removeLacust = true;
    removeTerrestrial = true;
    removeEggshell = true;
    removeStone = true;
    removeOther = true;
    removeChippedStone = true;
    removeRetouchedStone = true;
    removeUnmodifiedStone = true;
    removeGroundStone = true;
    // check the selected associated materials
    selectedAssocMaterial = getFieldValue(tabgroup+"/nearbyMaterial/assocMaterial");
    List vocabulary = assocMaterialVocabulary;
    for (selectedItem : selectedAssocMaterial) {
      for (type : vocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          Log.d("hearthAssoc.checkSelections()", "Selected "+tabgroup+" "+type.get(1));
          if (type.get(1).equals("{lacust}")) {
            removeLacust = false;
          } else if (type.get(1).equals("{terrbone}")) {
            removeTerrestrial = false;
          } else if (type.get(1).equals("{eggshell}")) {
            removeEggshell = false;
          } else if (type.get(1).equals("{artefacts}")) {
            removeStone = false;
          } else if (type.get(1).equals("{otherwork}")) {
            removeOther = false;
          }
        }
      }
    }
    // check the selected associated stone
    if (hasView(tabgroup+"/associatedStoneArtefacts/assocStone")) {
      selectedAssocStone = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocStone");
      List vocabulary = stoneArtefactsVocabulary;
      for (selectedItem : selectedAssocStone) {
        for (type : vocabulary) {
          if (selectedItem.getName().equals(type.get(0))) { 
            Log.d("hearthAssoc.checkSelections()", "Selected "+tabgroup+" "+type.get(1));
            if (type.get(1).equals("{cs}")) {
              removeChippedStone = false;
            } else if (type.get(1).equals("{um}")) {
              removeUnmodifiedStone = false;
            } else if (type.get(1).equals("{ground}")) {
              removeGroundStone = false;
            }
          }
        }
      }
    }
    // check the selected assoicated chipped stone
    if (hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
      selectedChippedStone = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
      List vocabulary = chippedStoneVocabulary;
      for (selectedItem : selectedChippedStone) {
        for (type : vocabulary) {
          if (selectedItem.getName().equals(type.get(0))) { 
            Log.d("hearthAssoc.checkSelections()", "Selected "+tabgroup+" "+type.get(1));
            if (type.get(1).equals("{ru}")) {
              removeRetouchedStone = false;
            }
          }
        }
      }
    }
  }

  /** Shows or cancels the associated material tabs. **/
  toggleTabs() {
    // remove unselected tabs
    if (removeLacust) {
      cancelTab(tabgroup+"/associatedLacustrineMaterial", false);
    }
    if (removeTerrestrial) {
      cancelTab(tabgroup+"/associatedTerrestrialBone", false);
    } 
    if (removeEggshell) {
      cancelTab(tabgroup+"/associatedEggshell", false);
    }
    if (removeStone) {
      cancelTab(tabgroup+"/associatedStoneArtefacts", false);
    }
    if (removeOther) {
      cancelTab(tabgroup+"/associatedOtherWorkedMaterial", false);
    }
    // show the selected tabs
    if (!removeLacust) {
      showTab(tabgroup+"/associatedLacustrineMaterial");
      // removeLacust = true;
    }   
    if (!removeTerrestrial) {
      showTab(tabgroup+"/associatedTerrestrialBone");
      // removeTerrestrial = true;
    }
    if (!removeEggshell) {
      showTab(tabgroup+"/associatedEggshell");
      // removeEggshell = true;
    } 
    if (!removeStone) {
      showTab(tabgroup+"/associatedStoneArtefacts");
      // removeStone = true;
    } 
    if (!removeOther) {
      showTab(tabgroup+"/associatedOtherWorkedMaterial");
      // removeOther = true;
    }
    // switch to the control tab and save the tabgroup
    showTab(tabgroup+"/nearbyMaterial");
    save();
  }

  /** Removes the flagged dynamic views for the tabgroup **/
  removeDynamicViews() {
    if (removeLacust) {
      if (hasView(tabgroup+"/associatedLacustrineMaterial/assocLacust")) {
        removeView(tabgroup+"/associatedLacustrineMaterial/assocLacust");
      }
      if (hasView(tabgroup+"/associatedLacustrineMaterial/assocBurntLacust")) {
        removeView(tabgroup+"/associatedLacustrineMaterial/assocBurntLacust");
      }
    }
    if (removeTerrestrial) {
      if (hasView(tabgroup+"/associatedTerrestrialBone/assocTerrestrial")) {
        removeView(tabgroup+"/associatedTerrestrialBone/assocTerrestrial");
      }
      if (hasView(tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial")) {
        removeView(tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial");
      }
    }
    if (removeEggshell) {
      if (hasView(view = tabgroup+"/associatedEggshell/assocEggshell")) {
        removeView(view = tabgroup+"/associatedEggshell/assocEggshell");
      }
      if (hasView(tabgroup+"/associatedEggshell/assocBurntEggshell")) {
        removeView(tabgroup+"/associatedEggshell/assocBurntEggshell");
      }
    }
    if (removeStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocStone");
      }
    }
    if (removeChippedStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
      }
    }
    if (removeRetouchedStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone");
      }
    }
    if (removeUnmodifiedStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone");
      }
    }
    if (removeGroundStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType");
      }
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus");
      }
    }
    // if (hasView(view = tabgroup+"/associatedStoneArtefacts/assocRawMaterial")) {
    //   removeView(view = tabgroup+"/associatedStoneArtefacts/assocRawMaterial");
    // }   
    }
    if (removeOther) {
      if (hasView(tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork")) {
        removeView(tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork");
      }
    }
  }

  /** Displays the flagged dynamic views for the tabgroup **/
  displayDynamicViews() {
    Log.d("hearthAssoc.displayDynamicViews()", "Displaying dynamic views for the tabgroup");
    if (!removeLacust) {
      if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocLacust")) {
        makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedLacustrineMaterial/assocLacust", "HearthAssoc_-_Associated_lacustrine_material", "{hearthAssociatedMaterialsUI_assocLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocLacust", "HearthAssoc_-_Associated_lacustrine_material", "vocab");
      }
      if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocBurntLacust")) {
        makeDynamicVocab("RadioGroup", tabgroup+"/associatedLacustrineMaterial/assocBurntLacust", "HearthAssoc_-_Burnt_lacustrine_material", "{hearthAssociatedMaterialsUI_assocBurntLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocBurntLacust", "HearthAssoc_-_Burnt_lacustrine_material", "vocab");
      }
    }
    if (!removeTerrestrial) {
      if (!hasView(tabgroup+"/associatedTerrestrialBone/assocTerrestrial")) {
        makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "HearthAssoc_-_Associated_terrestrial_bone", "{hearthAssociatedMaterialsUI_assocTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "HearthAssoc_-_Associated_terrestrial_bone", "vocab");
      }
      if (!hasView(tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial")) {
        makeDynamicVocab("RadioGroup", tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial", "HearthAssoc_-_Burnt_terrestrial_bone", "{hearthAssociatedMaterialsUI_assocBurntTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial", "HearthAssoc_-_Burnt_terrestrial_bone", "vocab");
      }
    }
    if (!removeEggshell) {
      if (!hasView(tabgroup+"/associatedEggshell/assocEggshell")) {
        makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedEggshell/assocEggshell", "HearthAssoc_-_Associated_eggshell", "{hearthAssociatedMaterialsUI_assocEggshell}", null, tabgroup+"/associatedEggshell/assocEggshell", "HearthAssoc_-_Associated_eggshell", "vocab");
      }
      if (!hasView(tabgroup+"/associatedEggshell/assocBurntEggshell")) {
        makeDynamicVocab("RadioGroup", tabgroup+"/associatedEggshell/assocBurntEggshell", "HearthAssoc_-_Burnt_eggshell", "{hearthAssociatedMaterialsUI_assocBurntEggshell}", null, tabgroup+"/associatedEggshell/assocBurntEggshell", "HearthAssoc_-_Burnt_eggshell", "vocab");
      }
    }
    if (!removeStone) {
      if (!hasView(tabgroup+"/associatedStoneArtefacts/assocStone")) {
        String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocStone\", \"click\", \"hearthAssoc.renderTabgroup();\");";
        makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocStone", "HearthAssoc_-_Associated_stone_artefacts", "{hearthAssociatedMaterialsUI_assocStone}", callback, tabgroup+"/associatedStoneArtefacts/assocStone", "HearthAssoc_-_Associated_stone_artefacts", "vocab");
      }
      if (!removeChippedStone) {
        if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
          String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocChippedStone\", \"click\", \"hearthAssoc.renderTabgroup();\");";
          makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "{hearthAssociatedMaterialsUI_assocChippedStone}", callback, tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "vocab");
        }
        if (!removeRetouchedStone) {
          if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
            makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "{hearthAssociatedMaterialsUI_assocRetouchedStone}", null, tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "vocab");
          }
        }
      }
      if (!removeUnmodifiedStone) {
        if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
          makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "{hearthAssociatedMaterialsUI_assocUnmodifiedStone}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "vocab");
        }
      }
      if (!removeGroundStone) {
        if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
          makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "{hearthAssociatedMaterialsUI_assocGroundStoneType}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "vocab");
        }
        if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
          makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "{hearthAssociatedMaterialsUI_assocGroundStoneStatus}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "vocab");
        }
      }
      if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRawMaterial")) {
        makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRawMaterial", "HearthAssoc_-_Raw_material_types_present", "{hearthAssociatedMaterialsUI_assocRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocRawMaterial", "HearthAssoc_-_Raw_material_types_present", "vocab");
      }
    }
    if (!removeOther) {
      if (!hasView(tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork")) {
        makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "HearthAssoc_-_Associated_other_worked_(or_transported)_material", "{hearthAssociatedMaterialsUI_assocOtherwork}", null, tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "HearthAssoc_-_Associated_other_worked_(or_transported)_material", "vocab");
      }
    }
  }

  return this;
}
hearthAssoc = hearthAssociatedMaterials();
hearthAssoc.init();