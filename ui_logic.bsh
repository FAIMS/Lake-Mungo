/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;
import java.io.File;
import jsqlite;
import jsqlite.Callback;

Log.d("Lake Mungo Module", "Very first line of logic after imports.");

User user; // don't touch
String userid;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
}
makeLocalID();

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/
loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}

loadUsers();

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/
startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

/** Fetches the contents of a specifed vocabulary and stores it in the given list. **/
fetchVocabulary(String vocabName, List storageList) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      storageList.addAll(result);
      // Log.d("fetchVocabulary()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
    }
  }); 
}

/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/*** 'Editable' - you can edit the code below based on the needs ***/
/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;", new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    populateHierarchicalDropDown(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          populateDropDown(path, result);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

makeDynamicVocab(String type, String path, String attrib, String label) {
  makeDynamicVocab(type, path, attrib, label, null, null);
}

makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction) {
  makeDynamicVocab(type, path, attrib, label, callbackFunction, null);
}

/** Makes a dynamic vocab and populates it using a data_schema vocab. **/
makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction, String container) {
  makeDynamicVocab(type, path, attrib, label, callbackFunction, container, null, null);
}

/** Makes a dynamic vocab nested in the specified and populates it using a data_schema vocab, with a callbackFunction to execute after creating the dynamic view. **/
makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction, String container, String attributeName, String attributeType) {
  executeViewTask(new ViewTask(){
    doTask() {

      // Check if view exists before trying to create it
      if (hasView(path)) {
        Log.e("makeDynamicVocab()", "The view '"+path+"' already exists. Exiting function.");
        return;
      }

      viewDef = createViewDef();
      if (type.equals("DropDown")) {
        viewDef.createDropDown();
      } else if (type.equals("CheckBoxGroup")) {
        viewDef.createCheckboxGroup();
      } else if (type.equals("RadioGroup")) {
        viewDef.createRadioGroup();
      } else if (type.equals("PictureGallery")) {
        viewDef.createPictureGallery();
      } else {
        Log.e("makeDynamicVocab()", "Error: invalid vocab type provided.");
        return;
      }
      // set the label for the dynamic view
      if (!isNull(label)) {
        viewDef.setLabel(label);
      }
      // link the dynamic view to a property in the data schema
      if (!isNull(attributeName) && !isNull(attributeType)) {
        viewDef.setAttributeName(attributeName).setAttributeType(attributeType);
      }
      // Add the certainty, annotation and description
      viewDef.setAnnotationEnabled(true).setCertaintyEnabled(true).setInfoEnabled(true);
      // populate the dynamic view choices with the contents of some vocabulary
      String tabgroup = path.split("/")[0];
      String tab = path.split("/")[1];
      String view = path.split("/")[2];
      fetchAll("select vocabid, vocabname, pictureurl from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;", new FetchCallback() {
        onFetch(result) {
          if (!isNull(container)) {
            Log.d("makeDynamicVocab()", "Creating dynamic view '" + view + "' in container '" + container + "'");
            createView(path, viewDef, container);
          } else {
            Log.d("makeDynamicVocab()", "Creating dynamic view '" + view + "' in tab '" + tabgroup + "/" + tab + "'");
            createView(path, viewDef);
          }

          if (type.equals("DropDown")) {
            populateDropDown(path, result);
          } else if (type.equals("CheckBoxGroup")) {
            populateCheckBoxGroup(path, result);
          } else if (type.equals("RadioGroup")) {
            populateRadioGroup(path, result);
          } else if (type.equals("PictureGallery")) {
            populatePictureGallery(path, result);
          }    

          if (callbackFunction != null && !isNull(callbackFunction)) {
            execute(callbackFunction);
          }
        }
      });
      refreshTabgroupCSS(tabgroup);
    }
  });
}

/** Entity Relationship Saving **/
/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

/** Saves two entity id's as a relation with some callback executed. **/
saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            if(!isNull(callback)) {
               execute(callback);
            }
        }
    });
}

/** Saves two entity id's as a hierachical relation. **/
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
        }
    });
}

/** Action Bar **/
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Sync}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Enable_Sync}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Internal_GPS}";
    }
    actionOn() {
        stopGPS();
        showToast("{Internal_GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_Internal_GPS}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{Internal_GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_External_GPS}";
    }
    actionOn() {
        stopGPS();
        showToast("{External_GPS_Disabled}");

    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_External_GPS}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{External_GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
    }
});

/*** MODULE CONTROL ***/
// List of feature entities for recording.
entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{oldBone}", "Old Bone"));
entityTypes.add(new NameValuePair("{hearth}", "Hearth"));
entityTypes.add(new NameValuePair("{midden}", "Midden"));
entityTypes.add(new NameValuePair("{stone}", "Stone Artefact Clusters"));
entityTypes.add(new NameValuePair("{isolated}", "Isolated"));
populateDropDown("control/control/entityTypes", entityTypes);
// entityTypes.add(0, new NameValuePair("{all}", "Feature"));
populateDropDown("control/search/entityTypes", entityTypes);

/* Loads a list view of existing entities. */
loadSearch() {
  String type = getFieldValue("control/search/entityTypes");
  populateCursorList("control/search/entityList", "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename = '" + type + "' limit ? offset ?;", 25);
}

/** Creates a record for the selected feature type. **/
newFeature() {
  String type = getFieldValue("control/control/entityTypes");
  if (type.equals("Old Bone")) {
    oldbone_create();
  } else if (type.equals("Hearth")) {
    hearth_create();
  } else if (type.equals("Midden")) {
    midden_create();
  } else if (type.equals("Stone Artefact Clusters")) {
    stone_create();
  } else if (type.equals("Isolated")) {
    isolated_create();
  }
}

loadFeature() {
  String listID = getListItemValue();
  if (!isNull(listID)) {
    fetchAll("select aenttypename from latestnondeletedarchent join aenttype using (aenttypeid) where uuid = '" + listID + "';", new FetchCallback() {
      onFetch(result) {
        Log.d("loadFeature()", "Loading entity id: " + entityID);
        if (result.get(0).get(0).equals("Old Bone")) {
          oldbone_id = listID;
          oldbone_load();
        } else if (result.get(0).get(0).equals("Hearth")) {
          hearth_id = listID;
          hearth_load();
        } else if (result.get(0).get(0).equals("Midden")) {
          midden_id = listID;
          midden_load();
        } else if (result.get(0).get(0).equals("Stone Artefact Clusters")) {
          stone_id = listID;
          stone_load();
        } else if (result.get(0).get(0).equals("Isolated")) {
          isolated_id = listID;
          isolated_load();
        }
      }
    });
  } else {
    Log.e("loadFeature()", "Error: cannot load an entity with a null ID.");
  }
}

/** Populates the in-situ and surface associated materials list. **/
listAssociatedMaterials(String listPath, String id, String associatedAenttypename, String reltypename) {
  if(!isNull(id)) {
    String assocListQuery = "select uuid, response " +
      "from latestNonDeletedArchEntFormattedIdentifiers " +
      "where aenttypename = '"+ associatedAenttypename +"' " +
      "and uuid in  (select uuid " +
      "FROM latestNonDeletedAentReln " +
      "where relationshipid in (select relationshipid " +
      "FROM latestNonDeletedAentReln " +
      "JOIN relationship using (relationshipid) " +
      "JOIN relntype using (relntypeid) " +
      "where uuid = "+ id +" " +
      "and relntypeName = '"+ reltypename +"') " +
      "and uuid != "+ id +");";
    fetchAll(assocListQuery, new FetchCallback() {
      onFetch(result) {
        Log.d("listAssociatedMaterials()", "Associated materials ("+associatedAenttypename+") found in relation ("+reltypename+") with uuid ("+id+"): "+result.toString());
        if (result == null || result.isEmpty()) {
            result = new ArrayList();
            result.add(new NameValuePair("{noRecordsFound}", ""));
        }
        populateList(listPath, result);
      }
    });
  } else {
    result = new ArrayList();
    result.add(new NameValuePair("{noRecordsFound}", ""));
    populateList(listPath, result);
  } 
}

onEvent("control/control/newEntity"  , "delayclick" , "newFeature();");
onEvent("control/search"             , "show"       , "loadSearch();");
onEvent("control/search/entityList"  , "click"      , "loadFeature();");
onEvent("control/search/entityTypes" , "click"      , "loadSearch();");

/*******************/
/* Grid Square GPS */
/** Calculates the grid square that the feature is in. **/
calculateGridSquare(String id, String tabgroup, String gridSquareViewPath) {
  // check that GPS is on and a position can be found.
  if(!isExternalGPSOn() && !isInternalGPSOn()) {
    showToast("Please turn on GPS");
    Log.e("calculateGridSquare()", "Internal and external GPS are off.");
    return;
  }
  Object position = getGPSPosition();
  if (position == null) {
    showToast("A GPS position could not be found");
    Log.e("calculateGridSquare()", "A GPS position couldn't be found.");
    return;
  }
  if(isNull(id)) {
    showToast("The record needs to be saved before calculating the grid square");
    Log.e("calculateGridSquare()", "The entity_id is null as the record has not been saved yet.");
    return;
  }
  // record the gps geometry 
  dialog = showBusy("Calculating grid square", "please wait");
  Object projPosition = getGPSPositionProjected();
  Log.d("calculateGridSquare()", "Projected position: " + projPosition.toString());
  Double latitude = position.getLatitude();
  Double longitude = position.getLongitude();
  Double northing = projPosition.getLatitude();
  Double easting = projPosition.getLongitude();
  Log.d("calculateGridSquare()", "Using module srid " + getModuleSrid() + ", obtained as lat and long (" + latitude.toString() + " " + longitude.toString() + "), and northing and easting (" + northing.toString() + " " + easting.toString() + ")");
  samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);
  saveArchEnt(id, tabgroup, geolist, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      Log.d("calculateGridSquare()", "Saved geometry: " + geolist.toString());
      // queryGridDB(easting.toString(), northing.toString(), gridSquareViewPath);
      queryGridDB("693400", "6257300", gridSquareViewPath); // Used for testing
      showWarning("Alert", "The calculate grid square is currently using the following mock projections for testing: (693400, 6257300)");
      dialog.dismiss();
    }  
  });
}

/** Connects to and queries the grid db. **/
queryGridDB(String easting, String northing, String gridSquareViewPath) {
  String srid = getModuleSrid();
  File file = new File("/sdcard/faims/modules/"+getModuleId()+"/files/data/grid.sqlite3");
  type = jsqlite.Constants.SQLITE_OPEN_READONLY;
  jsqlite.Database db = new jsqlite.Database();
  // Query the grid square
  String gridSquareQuery = "select label from grid where coveredBy(pointfromtext('POINT ("+easting+" "+northing+")',"+srid+"), grid) order by x,y limit 1;";
  Log.d("queryGridDB()", "Running query to select grid label: " + gridSquareQuery);
  try {
    db.open(file.getPath(), type);
    db.exec(gridSquareQuery, new Callback() {
      public void columns(String[] coldata) {
        Log.d("grid square query", "coldata: " + Arrays.toString(coldata));
      }
      public void types(String[] types) {
        Log.d("grid square query", "types: " + Arrays.toString(types));
      }
      public boolean newrow(String[] rowdata) {
        Log.d("grid square query", "rowdata: " + Arrays.toString(rowdata));
        setFieldValue(gridSquareViewPath, rowdata[0].toString());
        showToast("You are in grid square " + rowdata[0].toString());
        return false;
      }
    });
  } catch (Exception e) {
    Log.e("error dumping database", e.toString());
  } finally {
    db.close();
  }
  // Query the grid warning
  String warningQuery = "select warning from gridbuffer where  coveredBy(pointfromtext('POINT ("+easting+" "+northing+")',"+srid+"), gridbuffer);";
  Log.d("queryGridDB()", "Running query to select grid warning: " + warningQuery);
  try {
    db.open(file.getPath(), type);
    db.exec(warningQuery, new Callback() {
      public void columns(String[] coldata) {
        Log.d("grid warning query", "coldata: " + Arrays.toString(coldata));
      }
      public void types(String[] types) {
        Log.d("grid warning query", "types: " + Arrays.toString(types));
      }
      public boolean newrow(String[] rowdata) {
        Log.d("grid warning query", "rowdata: " + Arrays.toString(rowdata));
        if (rowdata[0].toString().equals("warning")) {
          showWarning("Warning", "You are close to a grid square boundary");
        }
        return false;
      }
    });
  } catch (Exception e) {
    Log.e("error dumping database", e.toString());
  } finally {
    db.close();
  }
}

/******************************************************************************/
/*                                   PHOTOS                                   */
/******************************************************************************/

onEvent("hearth/topAndStratSetting/takePhoto"                 , "click", "attachPictureTo(\"hearth/topAndStratSetting/photos\");");
onEvent("stoneArtefactClusters/topAndStratSetting/takePhoto"  , "click", "attachPictureTo(\"stoneArtefactClusters/topAndStratSetting/photos\");");
onEvent("isolatedOccurrences/topAndStratSetting/takePhoto"    , "click", "attachPictureTo(\"isolatedOccurrences/topAndStratSetting/photos\");");
onEvent("midden/topAndStratSetting/takePhoto"                 , "click", "attachPictureTo(\"midden/topAndStratSetting/photos\");");
onEvent("oldBone/topAndStratSetting/takePhoto"                , "click", "attachPictureTo(\"oldBone/topAndStratSetting/photos\");");

/************************/
/*** ISOLATED FEATURE ***/
/************************/
String isolated_tabgroup = "isolatedOccurrences";
String isolated_archentType = "Isolated";
String isolated_desc = isolated_archentType + " record";
String isolated_id = null;
List isolated_occurrenceTypeVocabulary = new ArrayList();
Boolean isolated_removeOrganicMaterial = true;
Boolean isolated_removeStoneMaterial = true;

/** Saves the feature **/
isolated_save() {
  Boolean enable_autosave = true;
  saveTabGroup(isolated_tabgroup, isolated_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      isolated_id = uuid;
      Log.d("isolated_save()", isolated_desc + " saved with id: " + isolated_id);
      if (newRecord) {
        Log.d("isolated_save()", "New " + isolated_desc + " created");
      }
    }
    onError(message) {
        showToast(message);
    }  
  }, enable_autosave);
}

/** Creates a new feature record. **/
isolated_create() {
  dialog = showBusy("creating a new record", "please wait");
  isolated_removeOrganicMaterial = true;
  isolated_removeStoneMaterial = true;
  isolated_id = null;
  newTabGroup(isolated_tabgroup);
  setFieldValue(isolated_tabgroup + "/basicIdentification/idNumber", "0");
  setFieldValue(isolated_tabgroup + "/basicIdentification/gridSquare", "0");
  keepTabGroupChanges(isolated_tabgroup);
  isolated_save();
  dialog.dismiss();
}

/** Loads a feature record. **/
isolated_load() {
  if (isNull(isolated_id)) {
    showToast("No entity selected");
      return;
  }
  dialog = showBusy("loading record", "please wait");
  removeAllViewsAndContainers(isolated_tabgroup);
  // display all dynamic views
  isolated_removeOrganicMaterial = false;
  isolated_removeStoneMaterial = false;
  isolated_displayDynamicViews();
  // load the entity and populate any dynamic views with their saved value
  showTabGroup(isolated_tabgroup, isolated_id, new FetchCallback() {
    onFetch(result) {
      Log.d("isolated_load()", "Loaded an " + isolated_desc + ", ID: " + isolated_id);
      showToast("Loaded an " + isolated_desc);
      isolated_checkOccurrenceType(); // remove any dynamic views that shouldn't be present
      keepTabGroupChanges(isolated_tabgroup);
      dialog.dismiss();
    }
  });
}

/** Checks the occurrence type selection and displays/removes the appropriate dynamic views **/
isolated_checkOccurrenceType() {
  String selectedItem = getFieldValue(isolated_tabgroup+"/basicIdentification/occurrenceType");
  if (isNull(selectedItem)) {
    isolated_removeOrganicMaterial = true;
    isolated_removeStoneMaterial = true;
    isolated_removeDynamicViews();
    return;
  }
  for (occurrenceType : isolated_occurrenceTypeVocabulary) {
    if (selectedItem.equals(occurrenceType.get(0))) {
      String selectedName = occurrenceType.get(1);
      if (selectedName.equals("{bettong}")    || selectedName.equals("{bivalve}")   || selectedName.equals("{carnivore}") || selectedName.equals("{eggemu}") 
       || selectedName.equals("{egggenyo}")   || selectedName.equals("{eggindet}")  || selectedName.equals("{eggother}")  || selectedName.equals("{emu}")       
       || selectedName.equals("{exoskel}")    || selectedName.equals("{fishbone}")  || selectedName.equals("{glith}")     || selectedName.equals("{indetbone}")
       || selectedName.equals("{macropod}")   || selectedName.equals("{otherbird}") || selectedName.equals("{reptile}")   || selectedName.equals("{rodent}") 
       || selectedName.equals("{smallmars}")  || selectedName.equals("{wombat}")) {
        isolated_removeOrganicMaterial = false;
      } else {
        isolated_removeOrganicMaterial = true;
      }
      if (selectedName.equals("{backed}")   || selectedName.equals("{bifac}")   || selectedName.equals("{bonetool}")   || selectedName.equals("{core}") 
       || selectedName.equals("{debris}")   || selectedName.equals("{eggmod}")  || selectedName.equals("{facetochre}") || selectedName.equals("{groundst}") 
       || selectedName.equals("{hammer}")   || selectedName.equals("{hscarb}")  || selectedName.equals("{hsclay}")     || selectedName.equals("{hsother}")
       || selectedName.equals("{hsterm}")   || selectedName.equals("{indet}")   || selectedName.equals("{mport}")      || selectedName.equals("{notch}") 
       || selectedName.equals("{ochre}")    || selectedName.equals("{otehrru}") || selectedName.equals("{qtzxtal}")    || selectedName.equals("{scraper}") 
       || selectedName.equals("{shellmod}") || selectedName.equals("{unifpt}")) {
        isolated_removeStoneMaterial = false;
      } else {
        isolated_removeStoneMaterial = true;
      }
    }
  }
  // update dynamic views
  isolated_displayDynamicViews();
  isolated_removeDynamicViews();
}

/** Displays the flagged dynamic views for the tab **/
isolated_displayDynamicViews() {
  if (!isolated_removeOrganicMaterial) {
    if (!hasView(isolated_tabgroup+"/basicIdentification/modificationtoOrganicMaterial")) {
      makeDynamicVocab("CheckBoxGroup", isolated_tabgroup+"/basicIdentification/modificationtoOrganicMaterial", "Isolated_-_Modification_to_Organic_Material", "{isolatedOccurrencesUI_modificationtoOrganicMaterial}", null, isolated_tabgroup+"/basicIdentification/modificationtoOrganicMaterial", "Isolated_-_Modification_to_Organic_Material", "vocab");
    }
  }
  if (!isolated_removeStoneMaterial) {
    if (!hasView(isolated_tabgroup+"/basicIdentification/modificationtoStoneMaterial")) {
      makeDynamicVocab("CheckBoxGroup", isolated_tabgroup+"/basicIdentification/modificationtoStoneMaterial", "Isolated_-_Modification_to_Stone_Material", "{isolatedOccurrencesUI_modificationtoStoneMaterial}", null, isolated_tabgroup+"/basicIdentification/modificationtoStoneMaterial", "Isolated_-_Modification_to_Stone_Material", "vocab");
    }
  }
}

/** Removes the flagged dynamic views for the tab **/
isolated_removeDynamicViews() {
  if (isolated_removeOrganicMaterial) {
    if (hasView(isolated_tabgroup+"/basicIdentification/modificationtoOrganicMaterial")) {
      removeView(isolated_tabgroup+"/basicIdentification/modificationtoOrganicMaterial");
    }
  }
  if (isolated_removeStoneMaterial) {
    if (hasView(isolated_tabgroup+"/basicIdentification/modificationtoStoneMaterial")) {
      removeView(isolated_tabgroup+"/basicIdentification/modificationtoStoneMaterial");
    }
  }
}

/** Initialises the tabgroup vocabularies. **/
isolated_init() {
  makeVocab("DropDown"             , isolated_tabgroup + "/basicIdentification/inSituOrSurface"        , "Isolated_-_In_Situ_or_Surface");
  makeVocab("HierarchicalDropDown" , isolated_tabgroup + "/basicIdentification/occurrenceType"         , "Isolated_-_Occurrence_Type");
  makeVocab("DropDown"             , isolated_tabgroup + "/basicIdentification/stoneRawMaterialType"   , "Isolated_-_Stone_Raw_Material_Type");
  makeVocab("PictureGallery"       , isolated_tabgroup + "/topAndStratSetting/topographicSetting"      , "Isolated_-_Topographic_Setting");
  makeVocab("PictureGallery"       , isolated_tabgroup + "/topAndStratSetting/sedimentType"            , "Isolated_-_Sediment_Type");
  makeVocab("PictureGallery"       , isolated_tabgroup + "/topAndStratSetting/erosionVulnerability"    , "Isolated_-_Vulnerability_to_Erosion");
  makeVocab("PictureGallery"       , isolated_tabgroup + "/topAndStratSetting/paleotopographicSetting" , "Isolated_-_Palaeotopographic_Setting");
  fetchVocabulary("Isolated_-_Occurrence_Type", isolated_occurrenceTypeVocabulary);
}

onEvent(isolated_tabgroup, "show", "isolated_save();");
onEvent(isolated_tabgroup + "/basicIdentification/occurrenceType", "click", "isolated_checkOccurrenceType();");
onEvent(isolated_tabgroup + "/basicIdentification/calculateGridSquare", "click", "calculateGridSquare(isolated_id, isolated_tabgroup, \""+isolated_tabgroup+"/basicIdentification/gridSquare\");");
isolated_init();

/**************************************/
/** End Isolated Occurrence Tabgroup **/
/**************************************/

/**********************/
/*** HEARTH FEATURE ***/
/**********************/
String hearth_tabgroup = "hearth";
String hearth_type = "Hearth";
String hearth_desc = hearth_type + " record";
String hearth_id = null;
String hearth_relTypeName = "Hearth And Associated Materials";
List hearth_typeVocabulary = new ArrayList();
Boolean hearth_removeBriefDescription = true;  
Boolean hearth_removeHeatRetainer = true;
Boolean hearth_removeNonHeatRetainer = true;  

/** Saves the feature **/
hearth_save() {
  Boolean enable_autosave = true;
  saveTabGroup(hearth_tabgroup, hearth_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      hearth_id = uuid;
      Log.d("hearth_save()", hearth_desc + " saved with id: " + hearth_id);
      if (newRecord) {
        Log.d("hearth_save()", "New " + hearth_desc + " created");
      }
    }
    onError(message) {
        showToast(message);
    }  
  }, enable_autosave);
}

/** Creates a new feature record. **/
hearth_create() {
  dialog = showBusy("creating a new record", "please wait");
  hearth_removeBriefDescription = true;
  hearth_removeHeatRetainer = true;
  hearth_removeNonHeatRetainer = true;
  hearth_id = null;
  newTabGroup(hearth_tabgroup);
  setFieldValue(hearth_tabgroup + "/basicIdentification/idNumber", "0");
  setFieldValue(hearth_tabgroup + "/basicIdentification/gridSquare", "0");
  keepTabGroupChanges(hearth_tabgroup);
  hearth_save();
  dialog.dismiss();
}

/** Loads a feature record. **/
hearth_load() {
  if (isNull(hearth_id)) {
    showToast("No entity selected");
      return;
  }
  dialog = showBusy("loading record", "please wait");
  removeAllViewsAndContainers(hearth_tabgroup);
  // display all dynamic views
  hearth_removeBriefDescription = false;
  hearth_removeHeatRetainer = false;
  hearth_removeNonHeatRetainer = false;
  hearth_displayDynamicViews();
  // load the entity and populate any dynamic views with their saved value
  showTabGroup(hearth_tabgroup, hearth_id, new FetchCallback() {
    onFetch(result) {
      Log.d("hearth_load()", "Loaded a " + hearth_desc + ", ID: " + hearth_id);
      showToast("Loaded a " + hearth_desc);
      hearth_checkType(); // remove any dynamic views that shouldn't be present
      keepTabGroupChanges(hearth_tabgroup);
      dialog.dismiss();
    }
  });
}

/** Flags the selected hearth type corresponding to dynamic views **/
hearth_checkType() {
  String selectedItem = getFieldValue(hearth_tabgroup+"/basicIdentification/hearthType");
  if (isNull(selectedItem)) {
    hearth_removeBriefDescription = true;
    hearth_removeHeatRetainer = true;
    hearth_removeNonHeatRetainer = true;
    hearth_removeDynamicViews();
    return;
  }
  for (vocabType : hearth_typeVocabulary) {
    if (selectedItem.equals(vocabType.get(0))) {
      if (vocabType.get(1).equals("{hsother}") || vocabType.get(1).equals("{other}")) {
        hearth_removeBriefDescription = false;
      } else {
        hearth_removeBriefDescription = true;
      }
      if (vocabType.get(1).equals("{hsterm}") || vocabType.get(1).equals("{hscarb}") || vocabType.get(1).equals("{hsclay}") || vocabType.get(1).equals("{hsother}") || vocabType.get(1).equals("{hsindet}")) {
        hearth_removeHeatRetainer = false;
      } else {
        hearth_removeHeatRetainer = true;
      }
      if (vocabType.get(1).equals("{emupat}") || vocabType.get(1).equals("{bakedclay}") || vocabType.get(1).equals("{bakedsed}") || vocabType.get(1).equals("{ashlens}") || vocabType.get(1).equals("{ashpatch}") || vocabType.get(1).equals("{charclens}") || vocabType.get(1).equals("{staining}") || vocabType.get(1).equals("{other}")) {
        hearth_removeNonHeatRetainer = false;
      } else {
        hearth_removeNonHeatRetainer = true;
      }
    }
  }
  // update dynamic views
  hearth_displayDynamicViews();
  hearth_removeDynamicViews();
}

/** Displays the flagged dynamic vieiws **/
hearth_displayDynamicViews() {
  if (!hearth_removeBriefDescription) {
    if (!hasView(hearth_tabgroup+"/basicIdentification/briefDescription")) {
      executeViewTask(new ViewTask(){
        doTask() {
          viewDef = createViewDef();
          viewDef.createTextField().setLabel("{hearthUI_briefDescription}").setAttributeName("Hearth_-_Brief_description").setAttributeType("measure").setAnnotationEnabled(true).setCertaintyEnabled(true).setInfoEnabled(true);
          createView(hearth_tabgroup+"/basicIdentification/briefDescription", viewDef);
        }
      });
    }
  }
  if (!hearth_removeHeatRetainer) {
    if (!hasView(hearth_tabgroup+"/hearthStructure/heatRetainer")) {
      makeDynamicVocab("CheckBoxGroup", hearth_tabgroup+"/hearthStructure/heatRetainer", "Hearth_-_Modification_of_heat-retainer_hearths", "{hearthUI_heatRetainer}", null, hearth_tabgroup+"/hearthStructure/heatRetainer", "Hearth_-_Modification_of_heat-retainer_hearths", "vocab");
    }
  }
  if (!hearth_removeNonHeatRetainer) {
    if (!hasView(hearth_tabgroup+"/hearthStructure/nonHeatRetainer")) {
      makeDynamicVocab("DropDown", hearth_tabgroup+"/hearthStructure/nonHeatRetainer", "Hearth_-_Modification_of_non-heat_retainer_hearths", "{hearthUI_nonHeatRetainer}", null, hearth_tabgroup+"/hearthStructure/nonHeatRetainer", "Hearth_-_Modification_of_non-heat_retainer_hearths", "vocab");
    }
  }
}

/** Removes the flagged dynamic views **/
hearth_removeDynamicViews() {
  if (hearth_removeBriefDescription) {
    if (hasView(hearth_tabgroup+"/basicIdentification/briefDescription")) {
      removeView(hearth_tabgroup+"/basicIdentification/briefDescription");
    }
  }
  if (hearth_removeHeatRetainer) {
    if (hasView(hearth_tabgroup+"/hearthStructure/heatRetainer")) {
      removeView(hearth_tabgroup+"/hearthStructure/heatRetainer");
    }
  }
  if (hearth_removeNonHeatRetainer) {
    if (hasView(hearth_tabgroup+"/hearthStructure/nonHeatRetainer")) {
      removeView(hearth_tabgroup+"/hearthStructure/nonHeatRetainer");
    }
  }
}

/** Initialises the tabgroup vocabularies. **/
hearth_init() {
  makeVocab("HierarchicalDropDown" , hearth_tabgroup + "/basicIdentification/hearthType"             , "Hearth_-_Hearth_Type");
  makeVocab("DropDown"             , hearth_tabgroup + "/basicIdentification/charcoal"               , "Hearth_-_Charcoal");
  makeVocab("PictureGallery"       , hearth_tabgroup + "/hearthStructure/insituProportion"           , "Hearth_-_Proportion_of_material_that_remains_in_situ");
  makeVocab("PictureGallery"       , hearth_tabgroup + "/topAndStratSetting/topographicSetting"      , "Hearth_-_Topographic_Setting");
  makeVocab("PictureGallery"       , hearth_tabgroup + "/topAndStratSetting/sedimentType"            , "Hearth_-_Sediment_Type");
  makeVocab("PictureGallery"       , hearth_tabgroup + "/topAndStratSetting/stratigraphicUnit"       , "Hearth_-_Stratigraphic_Unit");
  makeVocab("PictureGallery"       , hearth_tabgroup + "/topAndStratSetting/erosionVulnerability"    , "Hearth_-_Vulnerability_To_Erosion");
  makeVocab("PictureGallery"       , hearth_tabgroup + "/topAndStratSetting/paleotopographicSetting" , "Hearth_-_Palaeotopographic_Setting");
  fetchVocabulary("Hearth_-_Hearth_Type", hearth_typeVocabulary);
}

/** Populates the in-situ and surface associated materials list. **/
hearth_listAssociatedMaterials() {
  listAssociatedMaterials(hearth_tabgroup+"/associatedMaterials/associatedMaterialList", hearth_id, hearthAssoc_archentType, hearth_relTypeName);
}

onEvent(hearth_tabgroup                                                 , "show"       , "hearth_save();");
onEvent(hearth_tabgroup + "/associatedMaterials"                        , "show"       , "hearth_listAssociatedMaterials();");
onEvent(hearth_tabgroup + "/associatedMaterials/associatedMaterialList" , "click"      , "hearthAssoc_load()");
onEvent(hearth_tabgroup + "/associatedMaterials/recordMaterial"         , "delayclick" , "hearthAssoc_create();");
onEvent(hearth_tabgroup + "/basicIdentification/calculateGridSquare"    , "click"      , "calculateGridSquare(hearth_id, hearth_tabgroup , \""+hearth_tabgroup+"/basicIdentification/gridSquare\");");
onEvent(hearth_tabgroup + "/basicIdentification/hearthType"             , "click"      , "hearth_checkType();");
hearth_init();
/************************/
/** End Hearth Feature **/
/************************/

/***********************************/
/*** HEARTH ASSOCIATED MATERIALS ***/
/***********************************/
String hearthAssoc_tabgroup = "hearthAssociatedMaterials";
String hearthAssoc_archentType = "Hearth Associated Materials";
String hearthAssoc_relTypeName = "Hearth And Associated Materials";
String hearthAssoc_id = null;
Boolean hearthAssoc_loading = false;
Boolean hearthAssoc_removeLacust = true;
Boolean hearthAssoc_removeTerrestrial = true;
Boolean hearthAssoc_removeEggshell = true;
Boolean hearthAssoc_removeStone = true;
Boolean hearthAssoc_removeOther = true;
Boolean hearthAssoc_removeChippedStone = true;
Boolean hearthAssoc_removeRetouchedStone = true;
Boolean hearthAssoc_removeUnmodifiedStone = true;
Boolean hearthAssoc_removeGroundStone = true;
List hearthAssoc_assocMaterialVocabulary = new ArrayList();
List hearthAssoc_stoneArtefactsVocabulary = new ArrayList();
List hearthAssoc_chippedStoneVocabulary = new ArrayList(); 

/** Initialises the tabgroup vocabularies. **/
hearthAssoc_init() {
  makeVocab("CheckBoxGroup",  hearthAssoc_tabgroup+"/nearbyMaterial/assocMaterial",                     "HearthAssoc_-_Associated_material");
  makeVocab("CheckBoxGroup",  hearthAssoc_tabgroup+"/associatedLacustrineMaterial/assocLacust",         "HearthAssoc_-_Associated_lacustrine_material");
  makeVocab("RadioGroup",     hearthAssoc_tabgroup+"/associatedLacustrineMaterial/assocBurntLacust",    "HearthAssoc_-_Burnt_lacustrine_material");
  makeVocab("CheckBoxGroup",  hearthAssoc_tabgroup+"/associatedTerrestrialBone/assocTerrestrial",       "HearthAssoc_-_Associated_terrestrial_bone");
  makeVocab("RadioGroup",     hearthAssoc_tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial",  "HearthAssoc_-_Burnt_terrestrial_bone");
  makeVocab("CheckBoxGroup",  hearthAssoc_tabgroup+"/associatedEggshell/assocEggshell",                 "HearthAssoc_-_Associated_eggshell");
  makeVocab("RadioGroup",     hearthAssoc_tabgroup+"/associatedEggshell/assocBurntEggshell",            "HearthAssoc_-_Burnt_eggshell");
  makeVocab("CheckBoxGroup",  hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocStone",              "HearthAssoc_-_Associated_stone_artefacts");
  makeVocab("CheckBoxGroup",  hearthAssoc_tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork",     "HearthAssoc_-_Associated_other_worked_(or_transported)_material");
  fetchVocabulary("HearthAssoc_-_Associated_material", hearthAssoc_assocMaterialVocabulary);
  fetchVocabulary("HearthAssoc_-_Associated_stone_artefacts", hearthAssoc_stoneArtefactsVocabulary);
  fetchVocabulary("HearthAssoc_-_Associated_chipped_stone_artefacts", hearthAssoc_chippedStoneVocabulary);
}

/** Saves the associated materials record. **/
hearthAssoc_save() {
  Boolean enable_autosave = true;
  saveTabGroup(hearthAssoc_tabgroup, hearthAssoc_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      hearthAssoc_id = uuid;
      Log.d("hearthAssociatedMaterials.hearthAssoc_save()", "Saving the relation between hearth " + hearth_id + " and " + hearthAssoc_tabgroup + " " + hearthAssoc_id);
      String callback = "hearth_listAssociatedMaterials();" + "showTab(\"hearth/associatedMaterials\");";
      saveEntitiesToRel(hearthAssoc_relTypeName, hearth_id, hearthAssoc_id, callback);
    }
  }, enable_autosave);
}

/** Loads the hearth associated materials record. **/
hearthAssoc_load() {
  String selectedID = getListItemValue();
  if (!isNull(selectedID) && !selectedID.equals("placeholder")) {
    Log.d("hearthAssoc_load()", "Preparing to load associated material with ID: " + selectedID);
    dialog = showBusy("loading record", "please wait");
    hearthAssoc_id = selectedID;
    hearthAssoc_loading = true;
    removeAllViewsAndContainers(hearthAssoc_tabgroup);
    hearthAssoc_prepareLoading();
    showTabGroup(hearthAssoc_tabgroup, hearthAssoc_id, new FetchCallback() {
    onFetch(result) {
      hearthAssoc_checkSelections();
      hearthAssoc_removeDynamicViews();
      hearthAssoc_toggleTabs();
      hearthAssoc_loading = false;
      dialog.dismiss();
    }
  });
  }
}

/** Prepares the tabgroup for loading by making all dynamic views which values can be loaded into. **/
hearthAssoc_prepareLoading() {
  hearthAssoc_removeLacust = false;
  hearthAssoc_removeTerrestrial = false;
  hearthAssoc_removeEggshell = false;
  hearthAssoc_removeStone = false;
  hearthAssoc_removeOther = false;
  hearthAssoc_removeChippedStone = false;
  hearthAssoc_removeUnmodifiedStone = false;
  hearthAssoc_removeGroundStone = false;
  hearthAssoc_removeRetouchedStone = false;
  hearthAssoc_makeDynamicViews();
}

/** Resets all tab and view flags for the tabgroup **/
hearthAssoc_resetFlags() {
  // set flags to default
  hearthAssoc_removeLacust = true;
  hearthAssoc_removeTerrestrial = true;
  hearthAssoc_removeEggshell = true;
  hearthAssoc_removeStone = true;
  hearthAssoc_removeOther = true;
  hearthAssoc_removeChippedStone = true;
  hearthAssoc_removeUnmodifiedStone = true;
  hearthAssoc_removeGroundStone = true;
  hearthAssoc_removeRetouchedStone = true;
}

/** Creates a hearth associated materials record. **/
hearthAssoc_create() {
  if (!isNull(hearth_id)) {
    fetchOne("select uuid, response " +
      "from latestNonDeletedArchEntFormattedIdentifiers " +
      "where aenttypename = '"+hearthAssoc_archentType+"' " +
      "and uuid in  (select uuid " +
      "FROM latestNonDeletedAentReln " +
      "where relationshipid in (select relationshipid " +
      "FROM latestNonDeletedAentReln " +
      "JOIN relationship using (relationshipid) " +
      "JOIN relntype using (relntypeid) " +
      "where uuid = "+hearth_id+" " +
      "and relntypeName = '"+hearthAssoc_relTypeName+"') " +
      "and uuid != "+hearth_id+");",  new FetchCallback() {
      onFetch(result) {
        if(isNull(result)) {
          dialog = showBusy("preparing record", "please wait");
          hearthAssoc_id = null;
          hearthAssoc_loading = false;
          removeAllViewsAndContainers(hearthAssoc_tabgroup);
          newTabGroup(hearthAssoc_tabgroup);
          hearthAssoc_resetFlags();
          hearthAssoc_removeDynamicViews();
          hearthAssoc_toggleTabs();
          dialog.dismiss();
        } else {
          showToast("Only one associated material can be recorded");
        }
      }
    });
  } else {
    showToast("This record needs to be saved before recording an associated material");
  }
}

/** Renders all appropriate tabs dynamic views for the tabgroup. **/
hearthAssoc_renderTabsAndViews() {
  if (!hearthAssoc_loading) {
    Log.d("hearthAssoc_renderTabsAndViews()", "Rendering tabgroup");
    hearthAssoc_checkSelections();
    hearthAssoc_toggleTabs();
    hearthAssoc_removeDynamicViews();
    hearthAssoc_makeDynamicViews();
  } else {
    Log.d("hearthAssoc_renderTabsAndViews()", "Loading record, not rendering tabgroup");
  }
}

/** Renders all appropriate dynamic views for the tabgroup. **/
hearthAssoc_renderViews() {
  if (!hearthAssoc_loading) {
    Log.d("hearthAssoc_renderViews()", "Rendering tabgroup");
    hearthAssoc_checkSelections();
    hearthAssoc_removeDynamicViews();
    hearthAssoc_makeDynamicViews();
  } else {
    Log.d("hearthAssoc_renderViews()", "Loading record, not rendering tabgroup");
  }
}

/** Checks the selections that dynamic views are dependant upon and changes the flags as appropriate. **/
hearthAssoc_checkSelections() {
  hearthAssoc_resetFlags();
  // check selected associated materials
  selectedMaterials = getFieldValue(hearthAssoc_tabgroup+"/nearbyMaterial/assocMaterial");  
  for (selectedItem : selectedMaterials) {
    for (type : hearthAssoc_assocMaterialVocabulary) {
      if (selectedItem.getName().equals(type.get(0))) {
        Log.d("hearthAssoc_renderAssocTabs()", "Selected "+hearthAssoc_tabgroup+" "+type.get(1));
        if (type.get(1).equals("{lacust}")) {
          hearthAssoc_removeLacust = false;
        } else if(type.get(1).equals("{terrbone}")) {
          hearthAssoc_removeTerrestrial = false;
        } else if(type.get(1).equals("{eggshell}")) {
          hearthAssoc_removeEggshell = false;
        } else if(type.get(1).equals("{stoneart}")) {
          hearthAssoc_removeStone = false;
        } else if(type.get(1).equals("{otherwork}")) {
          hearthAssoc_removeOther = false;
        } else {
          Log.e("hearthAssoc_renderAssocTabs()", "Error: no matched insitu selected");
        }
      }
    }
  }
  // check selected associated stone
  if (!hearthAssoc_removeStone) {
    selectedStone = getFieldValue(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocStone");
    for (selectedItem : selectedStone) {
      for (type : hearthAssoc_stoneArtefactsVocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          if (type.get(1).equals("{cs}")) {
            hearthAssoc_removeChippedStone = false;
          } else if (type.get(1).equals("{um}")) {
            hearthAssoc_removeUnmodifiedStone = false;
          } else if (type.get(1).equals("{ground}")) {
            hearthAssoc_removeGroundStone = false;
          } else {
            Log.e("hearthAssoc_removeUnselectedMaterials", "Error: no stone artefact selected");
          }
        }
      }
    }
  }
  // check selected chipped stone, but first check it exists since it is a dynamic view
  if (!hearthAssoc_removeChippedStone) {
    if (hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
      chippedStone = getFieldValue(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone");
      for (selectedItem : chippedStone) {
        for (type : hearthAssoc_chippedStoneVocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            if (type.get(1).equals("{ru}")) {
              hearthAssoc_removeRetouchedStone = false;
            }
          }
        }
      }
    }
  }
}

/** Shows or cancels the associated material tabs. **/
hearthAssoc_toggleTabs() {
  Log.d("hearthAssoc_toggleTab()", "Toggling the tabs with values lacust:"+hearthAssoc_removeLacust.toString()+" terrestrial:"+hearthAssoc_removeTerrestrial.toString()+" eggshell:"+hearthAssoc_removeEggshell.toString()+" stone:"+hearthAssoc_removeStone.toString()+" other:"+hearthAssoc_removeOther.toString());
  Boolean tabChanged = false;
  // remove unselected tabs
  if (hearthAssoc_removeLacust) {
    cancelTab(hearthAssoc_tabgroup+"/associatedLacustrineMaterial", false);
  }
  if (hearthAssoc_removeTerrestrial) {
    cancelTab(hearthAssoc_tabgroup+"/associatedTerrestrialBone", false);
  } 
  if (hearthAssoc_removeEggshell) {
    cancelTab(hearthAssoc_tabgroup+"/associatedEggshell", false);
  }
  if (hearthAssoc_removeStone) {
    cancelTab(hearthAssoc_tabgroup+"/associatedStoneArtefacts", false);
  }
  if (hearthAssoc_removeOther) {
    cancelTab(hearthAssoc_tabgroup+"/associatedOtherWorkedMaterial", false);
  }
  // show the selected tabs
  if (!hearthAssoc_removeLacust) {
    showTab(hearthAssoc_tabgroup+"/associatedLacustrineMaterial");
    tabChanged = true;
  }   
  if (!hearthAssoc_removeTerrestrial) {
    showTab(hearthAssoc_tabgroup+"/associatedTerrestrialBone");
    tabChanged = true;
  }
  if (!hearthAssoc_removeEggshell) {
    showTab(hearthAssoc_tabgroup+"/associatedEggshell");
    tabChanged = true;
  } 
  if (!hearthAssoc_removeStone) {
    showTab(hearthAssoc_tabgroup+"/associatedStoneArtefacts");
    tabChanged = true;
  } 
  if (!hearthAssoc_removeOther) {
    showTab(hearthAssoc_tabgroup+"/associatedOtherWorkedMaterial");
    tabChanged = true;
  }
  // switch to the control tab and save the tabgroup
  if (tabChanged) {
    showTab(hearthAssoc_tabgroup+"/nearbyMaterial");
  }
  hearthAssoc_save();
}

/** Displays the flagged dynamic views for the tabgroup **/
hearthAssoc_makeDynamicViews() {
  if (!hearthAssoc_removeChippedStone) {
    if (!hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
      String callback = "onEvent(\""+hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone\", \"click\", \"hearthAssoc_renderViews();\");";
      makeDynamicVocab("CheckBoxGroup", hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "{hearthAssociatedMaterialsUI_assocChippedStone}", callback, hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "vocab");
    }
    if (!hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "HearthAssoc_-_Chipped_Stone_Raw_Material", "{hearthAssociatedMaterialsUI_assocChippedRawMaterial}", null, hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "HearthAssoc_-_Chipped_Stone_Raw_Material", "vocab");  
    }
  }
  if (!hearthAssoc_removeRetouchedStone) {
    if (!hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
      makeDynamicVocab("CheckBoxGroup", hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "{hearthAssociatedMaterialsUI_assocRetouchedStone}", null, hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "vocab");
    }
  }
  if (!hearthAssoc_removeUnmodifiedStone) {
    if (!hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
      makeDynamicVocab("CheckBoxGroup", hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "{hearthAssociatedMaterialsUI_assocUnmodifiedStone}", null, hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "vocab");
    }
    if (!hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "HearthAssoc_-_Unmodified_Raw_Material", "{hearthAssociatedMaterialsUI_assocUnmodifiedRawMaterial}", null, hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "HearthAssoc_-_Unmodified_Raw_Material", "vocab");  
    }
  }
  if (!hearthAssoc_removeGroundStone) {
    if (!hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
      makeDynamicVocab("CheckBoxGroup", hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "{hearthAssociatedMaterialsUI_assocGroundStoneType}", null, hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "vocab");
    }
    if (!hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
      makeDynamicVocab("CheckBoxGroup", hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "{hearthAssociatedMaterialsUI_assocGroundStoneStatus}", null, hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "vocab");
    }
    if (!hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "HearthAssoc_-_Ground_stone_raw_material", "{hearthAssociatedMaterialsUI_assocGroundRawMaterial}", null, hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "HearthAssoc_-_Ground_stone_raw_material", "vocab");  
    }
  }
}

/** Removes the flagged dynamic views for the tabgroup **/
hearthAssoc_removeDynamicViews() {
  if (hearthAssoc_removeChippedStone) {
    if (hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
      removeView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone");
    }
    if (hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
     removeView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial");
    }
  }
  if (hearthAssoc_removeRetouchedStone) {
    if (hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
      removeView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocRetouchedStone");
    }
  }
  if (hearthAssoc_removeUnmodifiedStone) {
    if (hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
      removeView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone");
    }
    if (hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
      removeView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial");
    }
  }
  if (hearthAssoc_removeGroundStone) {
    if (hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
      removeView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneType");
    }
    if (hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
      removeView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus");
    }
    if (hasView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
      removeView(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial");
    }
  }
}

onEvent(hearthAssoc_tabgroup, "show", "keepTabGroupChanges(\""+hearthAssoc_tabgroup+"\"); hearthAssoc_save();");
onEvent(hearthAssoc_tabgroup+"/nearbyMaterial/assocMaterial", "click", "hearthAssoc_renderTabsAndViews();");
onEvent(hearthAssoc_tabgroup+"/associatedStoneArtefacts/assocStone", "click", "hearthAssoc_renderViews();");
hearthAssoc_init();

/**********************************************/
/** End Hearth Associated Materials Tabgroup **/
/**********************************************/

/**********************/
/*** MIDDEN FEATURE ***/
/**********************/
String midden_tabgroup = "midden";
String midden_archentType = "Midden";
String midden_desc = midden_archentType + " record";
String midden_id = null;
String midden_relTypeName = "Midden And Associated Materials";
ArrayList midden_typeVocabulary = new ArrayList();
Boolean midden_removeContinuity = true;

/** Saves the feature **/
midden_save() {
  Boolean enable_autosave = true;
  saveTabGroup(midden_tabgroup, midden_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      midden_id = uuid;
      Log.d("midden_save()", midden_desc + " saved with midden_id: " + midden_id);
      if (newRecord) {
        Log.d("midden_save()", "New " + midden_desc + " created");
      }
    }
    onError(message) {
        showToast(message);
    }  
  }, enable_autosave);
}

/** Creates a new feature record. **/
midden_create() {
  dialog = showBusy("creating a new record", "please wait");
  midden_removeContinuity = true;
  midden_id = null;
  newTabGroup(midden_tabgroup);
  setFieldValue(midden_tabgroup + "/basicIdentification/idNumber", "0");
  setFieldValue(midden_tabgroup + "/basicIdentification/gridSquare", "0");
  keepTabGroupChanges(midden_tabgroup);
  midden_save();
  dialog.dismiss();
}

/** Loads a feature record. **/
midden_load() {
  if (isNull(midden_id)) {
    showToast("No entity selected");
      return;
  }
  dialog = showBusy("loading record", "please wait");
  removeAllViewsAndContainers(midden_tabgroup);
  // display all dynamic views
  midden_removeContinuity = false;
  midden_displayDynamicViews();
  // load the entity and populate any dynamic views with their saved value
  showTabGroup(midden_tabgroup, midden_id, new FetchCallback() {
    onFetch(result) {
      Log.d("midden_load()", "Loaded a " + midden_desc + ", ID: " + midden_id);
      showToast("Loaded a " + midden_desc);
      midden_checkType(); // remove any dynamic views that shouldn't be present
      keepTabGroupChanges(midden_tabgroup);
      dialog.dismiss();
    }
  });
}

/** Checks the midden type selection and displays/removes the appropriate dynamic views **/
midden_checkType() {
  String selectedItem = getFieldValue(midden_tabgroup+"/basicIdentification/middenType");
  if (isNull(selectedItem)) {
    midden_removeContinuity = true;
    midden_removeDynamicViews();
    return;
  }
  for (middenType : midden_typeVocabulary) {
    if (selectedItem.equals(middenType.get(0))) {
      if (middenType.get(1).equals("{largeclust}") || middenType.get(1).equals("{extthin}") || middenType.get(1).equals("{extthick}")) {
        midden_removeContinuity = false;
      } else {
        midden_removeContinuity = true;
      }
    }
  }
  // update dynamic views
  midden_displayDynamicViews();
  midden_removeDynamicViews();
}

/** Displays the flagged dynamic views for the tab **/
midden_displayDynamicViews() {
  String tabgroup = midden_tabgroup;
  if (!midden_removeContinuity) {
    if (!hasView(tabgroup+"/basicIdentification/continuity")) {
      makeDynamicVocab("CheckBoxGroup", midden_tabgroup+"/basicIdentification/continuity", "Midden_-_Continuity", "{middenUI_continuity}", null, midden_tabgroup+"/basicIdentification/continuity", "Midden_-_Continuity", "vocab");
    }
  }
}

/** Removes the flagged dynamic views for the tab **/
midden_removeDynamicViews() {
  String tabgroup = midden_tabgroup;
  if (midden_removeContinuity) {
    if (hasView(tabgroup+"/basicIdentification/continuity")) {
      removeView(tabgroup+"/basicIdentification/continuity");
    }
  }
}

/** Initialises the tabgroup vocabularies. **/
midden_init() {
  makeVocab("HierarchicalDropDown" , midden_tabgroup + "/basicIdentification/middenType"                               , "Midden_-_Midden_Type");
  makeVocab("DropDown"             , midden_tabgroup + "/middenDescription/presenceOfCharcoal"                         , "Midden_-_Presence_of_charcoal");
  makeVocab("DropDown"             , midden_tabgroup + "/middenDescription/proportionOfMaterialThatRemainsInSitu"      , "Midden_-_Proportion_of_material_that_remains_in_situ");
  makeVocab("DropDown"             , midden_tabgroup + "/middenDescription/bivalvePreservation"                        , "Midden_-_Bivalve_preservation");
  makeVocab("DropDown"             , midden_tabgroup + "/middenDescription/bivalveDispersal"                           , "Midden_-_Bivalve_dispersal");
  makeVocab("PictureGallery"       , midden_tabgroup + "/topAndStratSetting/topographicSetting"                        , "Midden_-_Topographic_Setting");
  makeVocab("PictureGallery"       , midden_tabgroup + "/topAndStratSetting/sedimentType"                              , "Midden_-_Sediment_Type");
  makeVocab("PictureGallery"       , midden_tabgroup + "/topAndStratSetting/stratigraphicUnit"                         , "Midden_-_Stratigraphic_Unit");
  makeVocab("PictureGallery"       , midden_tabgroup + "/topAndStratSetting/erosionVulnerability"                      , "Midden_-_Vulnerability_To_Erosion");
  makeVocab("PictureGallery"       , midden_tabgroup + "/topAndStratSetting/paleotopographicSetting"                   , "Midden_-_Palaeotopographic_Setting");
  fetchVocabulary("Midden_-_Midden_Type", midden_typeVocabulary);
}

/** Populates the in-situ and surface associated materials list. **/
midden_listAssociatedMaterials() {
  listAssociatedMaterials(midden_tabgroup+"/associatedMaterials/associatedMaterialList", midden_id, middenAssoc_archentType, midden_relTypeName);
}

onEvent(midden_tabgroup                                                 , "show"       , "midden_save();");
onEvent(midden_tabgroup + "/associatedMaterials"                        , "show"       , "midden_listAssociatedMaterials();");
onEvent(midden_tabgroup + "/associatedMaterials/associatedMaterialList" , "click"      , "middenAssoc_load()");
onEvent(midden_tabgroup + "/associatedMaterials/recordMaterial"         , "delayclick" , "middenAssoc_create();");
onEvent(midden_tabgroup + "/basicIdentification/calculateGridSquare"    , "click"      , "calculateGridSquare(midden_id, midden_tabgroup , \""+midden_tabgroup+"/basicIdentification/gridSquare\");");
onEvent(midden_tabgroup + "/basicIdentification/middenType"              , "click"      , "midden_checkType();");
midden_init();

/********************/
/** End Midden Tab **/
/********************/

/***********************************/
/*** MIDDEN ASSOCIATED MATERIALS ***/
/***********************************/
String middenAssoc_tabgroup = "middenAssociatedMaterials";
String middenAssoc_archentType = "Midden Associated Materials";
String middenAssoc_relTypeName = "Midden And Associated Materials";
String middenAssoc_id = null;
Boolean middenAssoc_loading = false;
Boolean middenAssoc_removeLacust = true;
Boolean middenAssoc_removeTerrestrial = true;
Boolean middenAssoc_removeEggshell = true;
Boolean middenAssoc_removeStone = true;
Boolean middenAssoc_removeOther = true;
Boolean middenAssoc_removeChippedStone = true;
Boolean middenAssoc_removeRetouchedStone = true;
Boolean middenAssoc_removeUnmodifiedStone = true;
Boolean middenAssoc_removeGroundStone = true;
List middenAssoc_assocMaterialVocabulary = new ArrayList();
List middenAssoc_stoneArtefactsVocabulary = new ArrayList();
List middenAssoc_chippedStoneVocabulary = new ArrayList();

/** Initialises the tabgroup vocabularies. **/
middenAssoc_init() {
  makeVocab("CheckBoxGroup",  middenAssoc_tabgroup+"/control/assocMaterial",                          "MiddenAssoc_-_Associated_material");
  makeVocab("CheckBoxGroup",  middenAssoc_tabgroup+"/associatedLacustrineMaterial/assocLacust",       "MiddenAssoc_-_Associated_lacustrine_material");
  makeVocab("RadioGroup",     middenAssoc_tabgroup+"/associatedLacustrineMaterial/assocBurntLacust",  "MiddenAssoc_-_Burnt_lacustrine_material");
  makeVocab("CheckBoxGroup",  middenAssoc_tabgroup+"/associatedTerrestrialBone/assocTerrestrial",     "MiddenAssoc_-_Associated_terrestrial_bone");
  makeVocab("RadioGroup",     middenAssoc_tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial","MiddenAssoc_-_Burnt_terrestrial_bone");
  makeVocab("CheckBoxGroup",  middenAssoc_tabgroup+"/associatedEggshell/assocEggshell",               "MiddenAssoc_-_Associated_eggshell");
  makeVocab("RadioGroup",     middenAssoc_tabgroup+"/associatedEggshell/assocBurntEggshell",          "MiddenAssoc_-_Burnt_eggshell");
  makeVocab("CheckBoxGroup",  middenAssoc_tabgroup+"/associatedStoneArtefacts/assocStone",            "MiddenAssoc_-_Associated_stone_artefacts");
  makeVocab("CheckBoxGroup",  middenAssoc_tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork",   "MiddenAssoc_-_Associated_other_worked_(or_transported)_material");
  fetchVocabulary("MiddenAssoc_-_Associated_material", middenAssoc_assocMaterialVocabulary);
  fetchVocabulary("MiddenAssoc_-_Associated_stone_artefacts", middenAssoc_stoneArtefactsVocabulary);
  fetchVocabulary("MiddenAssoc_-_Associated_chipped_stone_artefacts", middenAssoc_chippedStoneVocabulary);
}

/** Saves the associated materials record. **/
middenAssoc_save() {
  Boolean enable_autosave = true;
  saveTabGroup(middenAssoc_tabgroup, middenAssoc_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      middenAssoc_id = uuid;
      Log.d("middenAssociatedMaterials.middenAssoc_save()", "Saving the relation between midden " + midden_id + " and " + middenAssoc_tabgroup + " " + middenAssoc_id);
      String callback = "midden_listAssociatedMaterials();" + "showTab(\"midden/associatedMaterials\");";
      saveEntitiesToRel(middenAssoc_relTypeName, midden_id, middenAssoc_id, callback);
    }
  }, enable_autosave);
}

/** Loads the hearth associated materials record. **/
middenAssoc_load() {
  String selectedID = getListItemValue();
  if (!isNull(selectedID) && !selectedID.equals("placeholder")) {
    Log.d("middenAssoc_load()", "Preparing to load associated material with ID: " + selectedID);
    dialog = showBusy("loading record", "please wait");
    middenAssoc_id = selectedID;
    middenAssoc_loading = true;
    removeAllViewsAndContainers(middenAssoc_tabgroup);
    middenAssoc_prepareLoading();
    showTabGroup(middenAssoc_tabgroup, middenAssoc_id, new FetchCallback() {
    onFetch(result) {
      middenAssoc_checkSelections();
      middenAssoc_removeDynamicViews();
      middenAssoc_toggleTabs();
      middenAssoc_loading = false;
      dialog.dismiss();
    }
  });
  }
}

/** Prepares the tabgroup for loading by making all dynamic views which values can be loaded into. **/
middenAssoc_prepareLoading() {
  middenAssoc_removeLacust = false;
  middenAssoc_removeTerrestrial = false;
  middenAssoc_removeEggshell = false;
  middenAssoc_removeStone = false;
  middenAssoc_removeOther = false;
  middenAssoc_removeChippedStone = false;
  middenAssoc_removeRetouchedStone = false;
  middenAssoc_removeUnmodifiedStone = false;
  middenAssoc_removeGroundStone = false;
  middenAssoc_makeDynamicViews();
}

/** Resets all tab and view flags for the tabgroup **/
middenAssoc_resetFlags() {
  // set flags to default
  middenAssoc_removeLacust = true;
  middenAssoc_removeTerrestrial = true;
  middenAssoc_removeEggshell = true;
  middenAssoc_removeStone = true;
  middenAssoc_removeOther = true;
  middenAssoc_removeChippedStone = true;
  middenAssoc_removeRetouchedStone = true;
  middenAssoc_removeUnmodifiedStone = true;
  middenAssoc_removeGroundStone = true;
}

/** Creates a midden associated materials record. **/
middenAssoc_create() {
  if (!isNull(midden_id)) {
    fetchOne("select uuid, response " +
      "from latestNonDeletedArchEntFormattedIdentifiers " +
      "where aenttypename = '"+middenAssoc_archentType+"' " +
      "and uuid in  (select uuid " +
      "FROM latestNonDeletedAentReln " +
      "where relationshipid in (select relationshipid " +
      "FROM latestNonDeletedAentReln " +
      "JOIN relationship using (relationshipid) " +
      "JOIN relntype using (relntypeid) " +
      "where uuid = "+midden_id+" " +
      "and relntypeName = '"+middenAssoc_relTypeName+"') " +
      "and uuid != "+midden_id+");",  new FetchCallback() {
      onFetch(result) {
        if(isNull(result)) {
          dialog = showBusy("preparing record", "please wait");
          middenAssoc_id = null;
          middenAssoc_loading = false;
          removeAllViewsAndContainers(middenAssoc_tabgroup);
          newTabGroup(middenAssoc_tabgroup);
          middenAssoc_resetFlags();
          middenAssoc_removeDynamicViews();
          middenAssoc_toggleTabs();
          dialog.dismiss();
        } else {
          showToast("Only one associated material can be recorded");
        }
      }
    });
  } else {
    showToast("This record needs to be saved before recording an associated material");
  }
}

/** Renders all appropriate tabs dynamic views for the tabgroup. **/
middenAssoc_renderTabsAndViews() {
  if (!middenAssoc_loading) {
    Log.d("middenAssoc_renderTabsAndViews()", "Rendering tabgroup");
    middenAssoc_checkSelections();
    middenAssoc_toggleTabs();
    middenAssoc_removeDynamicViews();
    middenAssoc_makeDynamicViews();
  } else {
    Log.d("middenAssoc_renderTabsAndViews()", "Loading record, not rendering tabgroup");
  }
}

/** Renders all appropriate dynamic views for the tabgroup. **/
middenAssoc_renderViews() {
  if (!middenAssoc_loading) {
    Log.d("middenAssoc_renderViews()", "Rendering tabgroup");
    middenAssoc_checkSelections();
    middenAssoc_removeDynamicViews();
    middenAssoc_makeDynamicViews();
  } else {
    Log.d("middenAssoc_renderViews()", "Loading record, not rendering tabgroup");
  }
}

/** Checks the selections that dynamic views are dependant upon and changes the flags as appropriate. **/
middenAssoc_checkSelections() {
  middenAssoc_resetFlags();
  // check selected associated materials
  selectedMaterials = getFieldValue(middenAssoc_tabgroup+"/nearbyMaterial/assocMaterial");  
  for (selectedItem : selectedMaterials) {
    for (type : middenAssoc_assocMaterialVocabulary) {
      if (selectedItem.getName().equals(type.get(0))) {
        Log.d("middenAssoc_renderAssocTabs()", "Selected "+middenAssoc_tabgroup+" "+type.get(1));
        if (type.get(1).equals("{lacust}")) {
          middenAssoc_removeLacust = false;
        } else if(type.get(1).equals("{terrbone}")) {
          middenAssoc_removeTerrestrial = false;
        } else if(type.get(1).equals("{eggshell}")) {
          middenAssoc_removeEggshell = false;
        } else if(type.get(1).equals("{stoneart}")) {
          middenAssoc_removeStone = false;
        } else if(type.get(1).equals("{otherwork}")) {
          middenAssoc_removeOther = false;
        } else {
          Log.e("middenAssoc_renderAssocTabs()", "Error: no matched insitu selected");
        }
      }
    }
  }
  // check selected associated stone
  if (!middenAssoc_removeStone) {
    selectedStone = getFieldValue(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocStone");
    for (selectedItem : selectedStone) {
      for (type : middenAssoc_stoneArtefactsVocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          if (type.get(1).equals("{cs}")) {
            middenAssoc_removeChippedStone = false;
          } else if (type.get(1).equals("{um}")) {
            middenAssoc_removeUnmodifiedStone = false;
          } else if (type.get(1).equals("{ground}")) {
            middenAssoc_removeGroundStone = false;
          } else {
            Log.e("middenAssoc_removeUnselectedMaterials", "Error: no stone artefact selected");
          }
        }
      }
    }
  }
  // check selected chipped stone, but first check it exists since it is a dynamic view
  if (!middenAssoc_removeChippedStone) {
    if (hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
      chippedStone = getFieldValue(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone");
      for (selectedItem : chippedStone) {
        for (type : middenAssoc_chippedStoneVocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            if (type.get(1).equals("{ru}")) {
              middenAssoc_removeRetouchedStone = false;
            }
          }
        }
      }
    }
  }
}

/** Shows or cancels the associated material tabs. **/
middenAssoc_toggleTabs() {
  Boolean tabChanged = false;
  // remove unselected tabs
  if (middenAssoc_removeLacust) {
    cancelTab(middenAssoc_tabgroup+"/associatedLacustrineMaterial", false);
  }
  if (middenAssoc_removeTerrestrial) {
    cancelTab(middenAssoc_tabgroup+"/associatedTerrestrialBone", false);
  } 
  if (middenAssoc_removeEggshell) {
    cancelTab(middenAssoc_tabgroup+"/associatedEggshell", false);
  }
  if (middenAssoc_removeStone) {
    cancelTab(middenAssoc_tabgroup+"/associatedStoneArtefacts", false);
  }
  if (middenAssoc_removeOther) {
    cancelTab(middenAssoc_tabgroup+"/associatedOtherWorkedMaterial", false);
  }
  // show the selected tabs
  if (!middenAssoc_removeLacust) {
    showTab(middenAssoc_tabgroup+"/associatedLacustrineMaterial");
    tabChanged = true;
  }   
  if (!middenAssoc_removeTerrestrial) {
    showTab(middenAssoc_tabgroup+"/associatedTerrestrialBone");
    tabChanged = true;
  }
  if (!middenAssoc_removeEggshell) {
    showTab(middenAssoc_tabgroup+"/associatedEggshell");
    tabChanged = true;
  } 
  if (!middenAssoc_removeStone) {
    showTab(middenAssoc_tabgroup+"/associatedStoneArtefacts");
    tabChanged = true;
  } 
  if (!middenAssoc_removeOther) {
    showTab(middenAssoc_tabgroup+"/associatedOtherWorkedMaterial");
    tabChanged = true;
  }
  // switch to the control tab and save the tabgroup
  if (tabChanged) {
    showTab(middenAssoc_tabgroup+"/nearbyMaterial");
  }
  middenAssoc_save();
}

/** Displays the flagged dynamic views for the tabgroup **/
middenAssoc_makeDynamicViews() {
  if (!middenAssoc_removeChippedStone) {
    if (!hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
      String callback = "onEvent(\""+middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone\", \"click\", \"middenAssoc_renderViews();\");";
      makeDynamicVocab("CheckBoxGroup", middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone", "MiddenAssoc_-_Associated_chipped_stone_artefacts", "{middenAssociatedMaterialsUI_assocChippedStone}", callback, middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone", "MiddenAssoc_-_Associated_chipped_stone_artefacts", "vocab");
    }
    if (!hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "MiddenAssoc_-_Chipped_Stone_Raw_Material", "{middenAssociatedMaterialsUI_assocChippedRawMaterial}", null, middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "MiddenAssoc_-_Chipped_Stone_Raw_Material", "vocab");  
    }
  }
  if (!middenAssoc_removeRetouchedStone) {
    if (!hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
      makeDynamicVocab("CheckBoxGroup", middenAssoc_tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "MiddenAssoc_-_Associated_retouched_artefacts", "{middenAssociatedMaterialsUI_assocRetouchedStone}", null, middenAssoc_tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "MiddenAssoc_-_Associated_retouched_artefacts", "vocab");
    }
  }
  if (!middenAssoc_removeUnmodifiedStone) {
    if (!hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
      makeDynamicVocab("CheckBoxGroup", middenAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "MiddenAssoc_-_Associated_unmodified_stone", "{middenAssociatedMaterialsUI_assocUnmodifiedStone}", null, middenAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "MiddenAssoc_-_Associated_unmodified_stone", "vocab");
    }
    if (!hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", middenAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "MiddenAssoc_-_Unmodified_Raw_Material", "{middenAssociatedMaterialsUI_assocUnmodifiedRawMaterial}", null, middenAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "MiddenAssoc_-_Unmodified_Raw_Material", "vocab");  
    }
  }
  if (!middenAssoc_removeGroundStone) {
    if (!hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
      makeDynamicVocab("CheckBoxGroup", middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "MiddenAssoc_-_Ground_stone_types_present", "{middenAssociatedMaterialsUI_assocGroundStoneType}", null, middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "MiddenAssoc_-_Ground_stone_types_present", "vocab");
    }
    if (!hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
      makeDynamicVocab("CheckBoxGroup", middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "MiddenAssoc_-_Ground_stone_status", "{middenAssociatedMaterialsUI_assocGroundStoneStatus}", null, middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "MiddenAssoc_-_Ground_stone_status", "vocab");
    }
    if (!hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "MiddenAssoc_-_Ground_stone_raw_material", "{middenAssociatedMaterialsUI_assocGroundRawMaterial}", null, middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "MiddenAssoc_-_Ground_stone_raw_material", "vocab");  
    }
  }
}

/** Removes the flagged dynamic views for the tabgroup **/
middenAssoc_removeDynamicViews() {
  if (middenAssoc_removeChippedStone) {
    if (hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
      removeView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedStone");
    }
    if (hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
     removeView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial");
    }
  }
  if (middenAssoc_removeRetouchedStone) {
    if (hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
      removeView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocRetouchedStone");
    }
  }
  if (middenAssoc_removeUnmodifiedStone) {
    if (hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
      removeView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone");
    }
    if (hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
      removeView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial");
    }
  }
  if (middenAssoc_removeGroundStone) {
    if (hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
      removeView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneType");
    }
    if (hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
      removeView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus");
    }
    if (hasView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
      removeView(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial");
    }
  }
}

onEvent(middenAssoc_tabgroup, "show", "keepTabGroupChanges(\""+middenAssoc_tabgroup+"\"); middenAssoc_save();");
onEvent(middenAssoc_tabgroup+"/control/assocMaterial", "click", "middenAssoc_renderTabsAndViews();");
onEvent(middenAssoc_tabgroup+"/associatedStoneArtefacts/assocStone", "click", "middenAssoc_renderViews();");
middenAssoc_init();
/**********************************************/
/** End Midden Associated Materials Tabgroup **/
/**********************************************/

/******************************/
/*** STONE ARTEFACT FEATURE ***/
/******************************/
String stone_tabgroup = "stoneArtefactClusters";
String stone_archentType = "Stone Artefact Clusters";
String stone_desc = stone_archentType + " record";
String stone_id = null;
String stone_insituRelTypeName = "Stone And Associated Insitu Materials";
String stone_surfaceRelTypeName = "Stone And Associated Surface Materials";
String stone_assocInsituTabgroup = "stoneAssociatedInsituMaterials";
String stone_assocSurfaceTabgroup = "stoneAssociatedSurfaceMaterials";
List stone_clusterTypeVocabulary = new ArrayList();
List stone_insituStoneArtefactsVocabulary = new ArrayList();
List stone_insituChippedStoneVocabulary = new ArrayList();
List stone_surfaceStoneArtefactsVocabulary = new ArrayList();
List stone_surfaceChippedStoneVocabulary = new ArrayList();
Boolean stone_removeInsituGroundStone = true;
Boolean stone_removeInsituUnmodifiedStone = true;
Boolean stone_removeInsituChippedStone = true;
Boolean stone_removeInsituRetouchedArtefacts = true;
Boolean stone_removeSurfaceGroundStone = true;
Boolean stone_removeSurfaceUnmodifiedStone = true;
Boolean stone_removeSurfaceChippedStone = true;
Boolean stone_removeSurfaceRetouchedArtefacts = true;
Boolean stone_showInsituTab = false;
Boolean stone_showSurfaceTab = false;
Boolean stone_showAssocTab = false;

/** Saves the feature **/
stone_save() {
  Boolean enable_autosave = true;
  saveTabGroup(stone_tabgroup, stone_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      stone_id = uuid;
      Log.d("stone_save()", stone_desc + " saved with stone_id: " + stone_id);
      if (newRecord) {
        Log.d("stone_save()", "New " + stone_desc + " created");
      }
    }
    onError(message) {
        showToast(message);
    }  
  }, enable_autosave);
}

/** Creates a new feature record. **/
stone_create() {
  dialog = showBusy("creating a new record", "please wait");
  stone_id = null;
  removeAllViewsAndContainers(stone_tabgroup);
  newTabGroup(stone_tabgroup);
  setFieldValue(stone_tabgroup + "/basicIdentification/idNumber", "0");
  setFieldValue(stone_tabgroup + "/basicIdentification/gridSquare", "0");
  keepTabGroupChanges(stone_tabgroup);
  stone_save();
  dialog.dismiss();
}

/** Loads a feature record. **/
stone_load() {
  if (isNull(stone_id)) {
    showToast("No entity selected");
      return;
  }
  dialog = showBusy("loading record", "please wait");
  showTabGroup(stone_tabgroup, stone_id, new FetchCallback() {
    onFetch(result) {
      Log.d("stone_load()", "Loaded a " + stone_desc + ", ID: " + stone_id);
      showToast("Loaded a " + stone_desc);
      removeAllViewsAndContainers(stone_tabgroup);
      stone_checkClusterType();
      keepTabGroupChanges(stone_tabgroup);
      dialog.dismiss();
    }
  });
}

stone_checkClusterType() {
  String selectedItem = getFieldValue(stone_tabgroup+"/basicIdentification/clusterType");
  stone_showInsituTab = false;
  stone_showSurfaceTab = false;
  stone_showAssocTab = false;
  // determine what is selected
  for (clusterType : stone_clusterTypeVocabulary) {
    if (!isNull(selectedItem) && selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{insitu}") || clusterType.get(1).equals("{both}") || clusterType.get(1).equals("{insit_oth}") || clusterType.get(1).equals("{both_oth}"))) {
      stone_showInsituTab = true;
    }
    if (!isNull(selectedItem) && selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{surf}") || clusterType.get(1).equals("{both}") || clusterType.get(1).equals("{surfrefit}") || clusterType.get(1).equals("{surf_oth}") || clusterType.get(1).equals("{both_oth}"))) {
      stone_showSurfaceTab = true;
    }
    if (!isNull(selectedItem) && selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{Stone_artefacts_and_other_material}") || clusterType.get(1).equals("{insit_oth}") || clusterType.get(1).equals("{surf_oth}") || clusterType.get(1).equals("{both_oth}"))) {
      stone_showAssocTab = true;
    }
  }
  // show or hide the relevant tabs
  if (stone_showInsituTab) {
    Log.d("stone_checkClusterType()", "Showing insitu artefact tab");
    showTab(stone_tabgroup + "/inSituDescription");
  } else {
    Log.d("stone_checkClusterType()", "Cancelling insitu artefacts tab");
    cancelTab(stone_tabgroup + "/inSituDescription", false);
  }
  if (stone_showSurfaceTab) {
    Log.d("stone_checkClusterType()", "Showing surface artefact tab");
    showTab(stone_tabgroup + "/surfaceDescription");
  } else {
    Log.d("stone_checkClusterType()", "Cancelling surface artefacts tab");
    cancelTab(stone_tabgroup + "/surfaceDescription", false);
  }
  if (stone_showAssocTab) {
    Log.d("stone_checkClusterType()", "Showing associated materials tab");
    showTab(stone_tabgroup + "/associatedMaterials");
  } else {
    Log.d("stone_checkClusterType()", "Cancelling associated materials tab");
    cancelTab(stone_tabgroup + "/associatedMaterials", false);
  }
  // swap back to the first tab in the stone_tabgroup
  if (stone_showInsituTab || stone_showSurfaceTab || stone_showAssocTab) {
    showTab(stone_tabgroup + "/basicIdentification");
  }
  // update the dynamic views for the insitu and surface tab
  stone_displayDynamicViews();
}

// /** Locking to ensure dynamic view creation does not occur concurrently **/
// Boolean dynamicViewLock = false;

// lockViewCreation() {
//   dynamicViewLock = true;
//   return dynamicViewLock;
// }

// unlockViewCreation() {
//   dynamicViewLock = false;
// }

// checkViewCreationLock() {
//   return dynamicViewLock;
// }
// /********/

/** Displays the dynamic views for the stone_tabgroup **/
stone_displayDynamicViews() {
  // only run dynamic view creation if it is not already occurring
  // if (checkViewCreationLock()) {
  //   Log.e("stone_checkClusterType()", "Exiting stone_checkClusterType(), function is already running");
  //   return;
  // }
  // set lock
  // lockViewCreation();
  // display dynamic views
  if (stone_showInsituTab) {
    stone_displayInsituTabViews();
  }
  if (stone_showSurfaceTab) {
    stone_displaySurfaceTabViews();
  }
  // reset lock
  // unlockViewCreation();

}

/** Displays the dynamic views for the insitu stone artefact description tab. **/
stone_displayInsituTabViews() {
  // flag dynamic views for removal, which is later set to false only if the appropriate selections are detected
  stone_removeInsituChippedStone = true;
  stone_removeInsituRetouchedArtefacts = true;
  stone_removeInsituUnmodifiedStone = true;
  stone_removeInsituGroundStone = true;
  // render the default views for the tab
  String tab = "/inSituDescription";
  if (!hasView(stone_tabgroup+tab+"/potentialRefits")) {
    defRefits = createViewDef()
      .createTextField("integer")
      .setLabel("{stoneArtefactClustersUI_potentialRefits}")
      .setAttributeName("Stone_-_In_Situ_-_Potential_Refits")
      .setAttributeType("measure");
    createView(
        stone_tabgroup+tab+"/potentialRefits",
        defRefits,
        stone_tabgroup+tab+"/potentialRefits"
    );
  }
  // check the value of the insitu stone artefacts and display the relevant dynamic views based on the selection
  List assocInsituStone = getFieldValue(stone_tabgroup+tab+"/inSituInSituStoneArtefacts");
  for (selectedItem : assocInsituStone) {
    for (type : stone_insituStoneArtefactsVocabulary) {
      if (selectedItem.getName().equals(type.get(0))) {
        if (type.get(1).equals("{cs}")) {
          if (!hasView(stone_tabgroup+tab+"/inSituChippedStoneArtfacts")) {
            String callback = "onEvent(\""+stone_tabgroup+tab+"/inSituChippedStoneArtfacts\", \"click\", \"stone_displayDynamicViews();\");";
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/inSituChippedStoneArtfacts", "Stone_-_In_Situ_-_Chipped_Stone_Artefacts", "{stoneArtefactClustersUI_inSituChippedStoneArtfacts}", callback, stone_tabgroup+tab+"/inSituChippedStoneArtfacts", "Stone_-_In_Situ_-_Chipped_Stone_Artefacts", "vocab");
          }
          if (!hasView(stone_tabgroup+tab+"/inSituChippedRawMaterial")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/inSituChippedRawMaterial", "Stone_-_In_Situ_-_Chipped_Stone_Raw_Material", "{stoneArtefactClusterUI_insituChippedRawMaterial}", null, stone_tabgroup+tab+"/inSituChippedRawMaterial", "Stone_-_In_Situ_-_Chipped_Stone_Raw_Material", "vocab");  
          }
          stone_removeInsituChippedStone = false;
          // Only proceed to create the initu retouched stone if the insitu chipped stone artefacts view is present
          if (hasView(stone_tabgroup+tab+"/inSituChippedStoneArtfacts")) {
            List chippedStone = getFieldValue(stone_tabgroup+tab+"/inSituChippedStoneArtfacts");
            for (selectedItem : chippedStone) {
              for (type : stone_insituChippedStoneVocabulary) {
                if (type.get(1).equals("{ru}")) {
                  if (!hasView(stone_tabgroup+tab+"/inSituRetouchedArtefacts")) {
                    makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/inSituRetouchedArtefacts", "Stone_-_In_Situ_-_Retouched_Artefacts", "{stoneArtefactClustersUI_inSituRetouchedArtefacts}", null, stone_tabgroup+tab+"/inSituRetouchedArtefacts", "Stone_-_In_Situ_-_Retouched_Artefacts", "vocab");
                  }
                  stone_removeInsituRetouchedArtefacts = false;
                }
              }
            }
          }
        } else if (type.get(1).equals("{um}")) {
          if (!hasView(stone_tabgroup+tab+"/inSituUnmodifiedStoneTypes")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/inSituUnmodifiedStoneTypes", "Stone_-_In_Situ_-_Unmodified_Stone_Types", "{stoneArtefactClustersUI_inSituUnmodifiedStoneTypes}", null, stone_tabgroup+tab+"/inSituUnmodifiedStoneTypes", "Stone_-_In_Situ_-_Unmodified_Stone_Types", "vocab");
          }
          if (!hasView(stone_tabgroup+tab+"/inSituUnmodifiedRawMaterial")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/inSituUnmodifiedRawMaterial", "Stone_-_In_Situ_-_Unmodified_Stone_Raw_Material", "{stoneArtefactClusterUI_insituUnmodifiedRawMaterial}", null, stone_tabgroup+tab+"/inSituUnmodifiedRawMaterial", "Stone_-_In_Situ_-_Unmodified_Stone_Raw_Material", "vocab");  
          } 
          stone_removeInsituUnmodifiedStone = false;
        } else if (type.get(1).equals("{gs}")) {
          if (!hasView(stone_tabgroup+tab+"/inSituGroundStoneTypes")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/inSituGroundStoneTypes", "Stone_-_In_Situ_-_Ground_Stone_Types", "{stoneArtefactClustersUI_inSituGroundStoneTypes}", null, stone_tabgroup+tab+"/inSituGroundStoneTypes", "Stone_-_In_Situ_-_Ground_Stone_Types", "vocab");
          }
          if (!hasView(stone_tabgroup+tab+"/inSituGroundStoneStatus")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/inSituGroundStoneStatus", "Stone_-_In_Situ_-_Ground_Stone_Status", "{stoneArtefactClustersUI_inSituGroundStoneStatus}", null, stone_tabgroup+tab+"/inSituGroundStoneStatus", "Stone_-_In_Situ_-_Ground_Stone_Status", "vocab");
          }
          if (!hasView(stone_tabgroup+tab+"/inSituGroundRawMaterial")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/inSituGroundRawMaterial", "Stone_-_In_Situ_-_Ground_Stone_Raw_Material", "{stoneArtefactClusterUI_insituGroundRawMaterial}", null, stone_tabgroup+tab+"/inSituGroundRawMaterial", "Stone_-_In_Situ_-_Ground_Stone_Raw_Material", "vocab");  
          }
          stone_removeInsituGroundStone = false;
        } else {
          Log.e("stone_displayInsituTabViews()", "Error: no insitu stone artefact selected");
        }
      }
    }
  }
  stone_removeInsituTabViews();
}

/** Removes any insitu views that are flagged. **/
stone_removeInsituTabViews() {
  String tab = "/inSituDescription";
  if (stone_removeInsituChippedStone) {
    if (hasView(stone_tabgroup+tab+"/inSituChippedStoneArtfacts")) {
      removeView(stone_tabgroup+tab+"/inSituChippedStoneArtfacts");
    }
    if (hasView(stone_tabgroup+tab+"/inSituChippedRawMaterial")) {
      removeView(stone_tabgroup+tab+"/inSituChippedRawMaterial");
    }
    stone_removeInsituRetouchedArtefacts = true;
  }
  if (stone_removeInsituRetouchedArtefacts) {
    if (hasView(stone_tabgroup+tab+"/inSituRetouchedArtefacts")) {
      removeView(stone_tabgroup+tab+"/inSituRetouchedArtefacts");
    }
  }
  if (stone_removeInsituUnmodifiedStone) {
    if (hasView(stone_tabgroup+tab+"/inSituUnmodifiedStoneTypes")) {
      removeView(stone_tabgroup+tab+"/inSituUnmodifiedStoneTypes");
    }
    if (hasView(stone_tabgroup+tab+"/inSituUnmodifiedRawMaterial")) {
      removeView(stone_tabgroup+tab+"/inSituUnmodifiedRawMaterial");
    }
  }
  if (stone_removeInsituGroundStone) {
    if (hasView(stone_tabgroup+tab+"/inSituGroundStoneTypes")) {
      removeView(stone_tabgroup+tab+"/inSituGroundStoneTypes");
    }
    if (hasView(stone_tabgroup+tab+"/inSituGroundStoneStatus")) {
      removeView(stone_tabgroup+tab+"/inSituGroundStoneStatus");
    }
    if (hasView(stone_tabgroup+tab+"/inSituGroundRawMaterial")) {
      removeView(stone_tabgroup+tab+"/inSituGroundRawMaterial");
    }
  }
}

/** Displays the dynamic views for the surface stone artefact description tab. **/
stone_displaySurfaceTabViews() {
  // flag dynamic views for removal, which is later set to false only if the appropriate selections are detected
  stone_removeSurfaceChippedStone = true;
  stone_removeSurfaceRetouchedArtefacts = true;
  stone_removeSurfaceUnmodifiedStone = true;
  stone_removeSurfaceGroundStone = true;
  // render the default views for the tab
  String tab = "/surfaceDescription";
  if (!hasView(stone_tabgroup+tab+"/potentialRefits")) {
    defRefits = createViewDef()
      .createTextField("integer")
      .setLabel("{stoneArtefactClustersUI_potentialRefits}")
      .setAttributeName("Stone_-_Surface_-_Potential_Refits")
      .setAttributeType("measure");
    createView(
        stone_tabgroup+tab+"/potentialRefits",
        defRefits,
        stone_tabgroup+tab+"/potentialRefits"
    );
  }
  // check the value of the surface stone artefacts and display the relevant dynamic views based on the selection
  List assocSurfaceStone = getFieldValue(stone_tabgroup+tab+"/surfaceStoneArtefacts");
  for (selectedItem : assocSurfaceStone) {
    for (type : stone_surfaceStoneArtefactsVocabulary) {
      if (selectedItem.getName().equals(type.get(0))) {
        if (type.get(1).equals("{cs}")) {
          if (!hasView(stone_tabgroup+tab+"/surfaceChippedStoneArtfacts")) {
            String callback = "onEvent(\""+stone_tabgroup+tab+"/surfaceChippedStoneArtfacts\", \"click\", \"stone_displayDynamicViews();\");";
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/surfaceChippedStoneArtfacts", "Stone_-_Surface_-_Chipped_Stone_Artefacts", "{stoneArtefactClustersUI_surfaceChippedStoneArtfacts}", callback, stone_tabgroup+tab+"/surfaceChippedStoneArtfacts", "Stone_-_Surface_-_Chipped_Stone_Artefacts", "vocab");
          }
          if (!hasView(stone_tabgroup+tab+"/surfaceChippedRawMaterial")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/surfaceChippedRawMaterial", "Stone_-_Surface_-_Chipped_Stone_Raw_Material", "{stoneArtefactClusterUI_surfaceChippedRawMaterial}", null, stone_tabgroup+tab+"/surfaceChippedRawMaterial", "Stone_-_Surface_-_Chipped_Stone_Raw_Material", "vocab");  
          }
          stone_removeSurfaceChippedStone = false;
          // Only proceed to create the initu retouched stone if the surface chipped stone artefacts view is present
          if (hasView(stone_tabgroup+tab+"/surfaceChippedStoneArtfacts")) {
            List chippedStone = getFieldValue(stone_tabgroup+tab+"/surfaceChippedStoneArtfacts");
            for (selectedItem : chippedStone) {
              for (type : stone_surfaceChippedStoneVocabulary) {
                if (type.get(1).equals("{ru}")) {
                  if (!hasView(stone_tabgroup+tab+"/surfaceRetouchedArtefacts")) {
                    makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/surfaceRetouchedArtefacts", "Stone_-_Surface_-_Retouched_Artefacts", "{stoneArtefactClustersUI_surfaceRetouchedArtefacts}", null, stone_tabgroup+tab+"/surfaceRetouchedArtefacts", "Stone_-_Surface_-_Retouched_Artefacts", "vocab");
                  }
                  stone_removeSurfaceRetouchedArtefacts = false;
                }
              }
            }
          }
        } else if (type.get(1).equals("{um}")) {
          if (!hasView(stone_tabgroup+tab+"/surfaceUnmodifiedStoneTypes")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/surfaceUnmodifiedStoneTypes", "Stone_-_Surface_-_Unmodified_Stone_Types", "{stoneArtefactClustersUI_surfaceUnmodifiedStoneTypes}", null, stone_tabgroup+tab+"/surfaceUnmodifiedStoneTypes", "Stone_-_Surface_-_Unmodified_Stone_Types", "vocab");
          }
          if (!hasView(stone_tabgroup+tab+"/surfaceUnmodifiedRawMaterial")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/surfaceUnmodifiedRawMaterial", "Stone_-_Surface_-_Unmodified_Stone_Raw_Material", "{stoneArtefactClusterUI_surfaceUnmodifiedRawMaterial}", null, stone_tabgroup+tab+"/surfaceUnmodifiedRawMaterial", "Stone_-_Surface_-_Unmodified_Stone_Raw_Material", "vocab");  
          } 
          stone_removeSurfaceUnmodifiedStone = false;
        } else if (type.get(1).equals("{gs}")) {
          if (!hasView(stone_tabgroup+tab+"/surfaceGroundStoneTypes")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/surfaceGroundStoneTypes", "Stone_-_Surface_-_Ground_Stone_Types", "{stoneArtefactClustersUI_surfaceGroundStoneTypes}", null, stone_tabgroup+tab+"/surfaceGroundStoneTypes", "Stone_-_Surface_-_Ground_Stone_Types", "vocab");
          }
          if (!hasView(stone_tabgroup+tab+"/surfaceGroundStoneStatus")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/surfaceGroundStoneStatus", "Stone_-_Surface_-_Ground_Stone_Status", "{stoneArtefactClustersUI_surfaceGroundStoneStatus}", null, stone_tabgroup+tab+"/surfaceGroundStoneStatus", "Stone_-_Surface_-_Ground_Stone_Status", "vocab");
          }
          if (!hasView(stone_tabgroup+tab+"/surfaceGroundRawMaterial")) {
            makeDynamicVocab("CheckBoxGroup", stone_tabgroup+tab+"/surfaceGroundRawMaterial", "Stone_-_Surface_-_Ground_Stone_Raw_Material", "{stoneArtefactClusterUI_surfaceGroundRawMaterial}", null, stone_tabgroup+tab+"/surfaceGroundRawMaterial", "Stone_-_Surface_-_Ground_Stone_Raw_Material", "vocab");  
          }
          stone_removeSurfaceGroundStone = false;
        } else {
          Log.e("stone_displaySurfaceTabViews()", "Error: no surface stone artefact selected");
        }
      }
    }
  }
  stone_removeSurfaceTabViews();
}

/** Removes any surface views that are flagged. **/
stone_removeSurfaceTabViews() {
  String tab = "/surfaceDescription";
  if (stone_removeSurfaceChippedStone) {
    if (hasView(stone_tabgroup+tab+"/surfaceChippedStoneArtfacts")) {
      removeView(stone_tabgroup+tab+"/surfaceChippedStoneArtfacts");
    }
    if (hasView(stone_tabgroup+tab+"/surfaceChippedRawMaterial")) {
      removeView(stone_tabgroup+tab+"/surfaceChippedRawMaterial");
    }
    stone_removeSurfaceRetouchedArtefacts = true;
  }
  if (stone_removeSurfaceRetouchedArtefacts) {
    if (hasView(stone_tabgroup+tab+"/surfaceRetouchedArtefacts")) {
      removeView(stone_tabgroup+tab+"/surfaceRetouchedArtefacts");
    }
  }
  if (stone_removeSurfaceUnmodifiedStone) {
    if (hasView(stone_tabgroup+tab+"/surfaceUnmodifiedStoneTypes")) {
      removeView(stone_tabgroup+tab+"/surfaceUnmodifiedStoneTypes");
    }
    if (hasView(stone_tabgroup+tab+"/surfaceUnmodifiedRawMaterial")) {
      removeView(stone_tabgroup+tab+"/surfaceUnmodifiedRawMaterial");
    }
  }
  if (stone_removeSurfaceGroundStone) {
    if (hasView(stone_tabgroup+tab+"/surfaceGroundStoneTypes")) {
      removeView(stone_tabgroup+tab+"/surfaceGroundStoneTypes");
    }
    if (hasView(stone_tabgroup+tab+"/surfaceGroundStoneStatus")) {
      removeView(stone_tabgroup+tab+"/surfaceGroundStoneStatus");
    }
    if (hasView(stone_tabgroup+tab+"/surfaceGroundRawMaterial")) {
      removeView(stone_tabgroup+tab+"/surfaceGroundRawMaterial");
    }
  }
}

/** Initialises the stone_tabgroup vocabularies. **/
stone_init() {
  makeVocab("HierarchicalDropDown" , stone_tabgroup + "/basicIdentification/clusterType"              , "Stone_-_Cluster_Type");
  makeVocab("PictureGallery"       , stone_tabgroup + "/topAndStratSetting/topographicSetting"        , "Stone_-_Topographic_Setting");
  makeVocab("PictureGallery"       , stone_tabgroup + "/topAndStratSetting/sedimentType"              , "Stone_-_Sediment_Type");
  makeVocab("PictureGallery"       , stone_tabgroup + "/topAndStratSetting/stratigraphicUnit"         , "Stone_-_Stratigraphic_Unit");
  makeVocab("PictureGallery"       , stone_tabgroup + "/topAndStratSetting/erosionVulnerability"      , "Stone_-_Vulnerability_To_Erosion");
  makeVocab("PictureGallery"       , stone_tabgroup + "/topAndStratSetting/paleotopographicSetting"   , "Stone_-_Palaeotopographic_Setting");
  makeVocab("CheckBoxGroup"        , stone_tabgroup + "/inSituDescription/inSituInSituStoneArtefacts" , "Stone_-_In_Situ_-_Stone_Artefacts");
  makeVocab("CheckBoxGroup"        , stone_tabgroup + "/inSituDescription/inSituSurfaceModification"  , "Stone_-_In_Situ_-_Surface_Modification");
  makeVocab("CheckBoxGroup"        , stone_tabgroup + "/surfaceDescription/surfaceStoneArtefacts"     , "Stone_-_Surface_-_Stone_Artefacts");
  makeVocab("CheckBoxGroup"        , stone_tabgroup + "/surfaceDescription/surfaceSurfaceModification", "Stone_-_Surface_-_Surface_Modification");
  fetchVocabulary("Stone_-_Cluster_Type", stone_clusterTypeVocabulary);
  fetchVocabulary("Stone_-_In_Situ_-_Stone_Artefacts", stone_insituStoneArtefactsVocabulary);
  fetchVocabulary("Stone_-_In_Situ_-_Chipped_Stone_Artefacts", stone_insituChippedStoneVocabulary);
  fetchVocabulary("Stone_-_Surface_-_Stone_Artefacts", stone_surfaceStoneArtefactsVocabulary);
  fetchVocabulary("Stone_-_Surface_-_Chipped_Stone_Artefacts", stone_surfaceChippedStoneVocabulary);

}

/** Populates the in-situ and surface associated materials list. **/
stone_listAssociatedMaterials() {
  listAssociatedMaterials(stone_tabgroup+"/associatedMaterials/associatedMaterialListInSitu", stone_id, stoneAssoc_insituArchentType, stone_insituRelTypeName);
  listAssociatedMaterials(stone_tabgroup+"/associatedMaterials/associatedMaterialListSurface", stone_id, stoneAssoc_surfaceArchentType, stone_surfaceRelTypeName);
}

// onEvent(stone_tabgroup                                                        , "show"  , "stone_save(); unlockViewCreation(); stone_checkClusterType();");
onEvent(stone_tabgroup                                                        , "show"  , "stone_save(); stone_checkClusterType();");
onEvent(stone_tabgroup + "/basicIdentification/clusterType"                   , "click" , "stone_checkClusterType();");
onEvent(stone_tabgroup + "/basicIdentification/calculateGridSquare"           , "click" , "calculateGridSquare(stone_id, stone_tabgroup, \""+stone_tabgroup+"/basicIdentification/gridSquare\");");
onEvent(stone_tabgroup + "/associatedMaterials"                               , "show"  , "stone_listAssociatedMaterials();"); 
onEvent(stone_tabgroup + "/associatedMaterials/recordMaterialInSitu"          , "click" , "stoneAssoc_isInsituMaterial=true; stoneAssoc_create();");
onEvent(stone_tabgroup + "/associatedMaterials/recordMaterialSurface"         , "click" , "stoneAssoc_isInsituMaterial=false; stoneAssoc_create();");
onEvent(stone_tabgroup + "/associatedMaterials/associatedMaterialListInSitu"  , "click" , "stoneAssoc_isInsituMaterial=true; stoneAssoc_load();");
onEvent(stone_tabgroup + "/associatedMaterials/associatedMaterialListSurface" , "click" , "stoneAssoc_isInsituMaterial=false; stoneAssoc_load();");
onEvent(stone_tabgroup + "/inSituDescription/inSituInSituStoneArtefacts"      , "click" , "stone_displayDynamicViews();");
onEvent(stone_tabgroup + "/surfaceDescription/surfaceStoneArtefacts"          , "click" , "stone_displayDynamicViews();");
stone_init();

/************************/
/** End Stone Tabgroup **/
/************************/

/**********************************/
/*** STONE ASSOCIATED MATERIALS ***/
/**********************************/
String stoneAssoc_insituTabgroup = "stoneAssociatedInsituMaterials";
String stoneAssoc_insituArchentType = "Stone Associated Insitu";
String stoneAssoc_insituRelTypeName = "Stone And Associated Insitu Materials";
String stoneAssoc_surfaceTabgroup = "stoneAssociatedSurfaceMaterials";
String stoneAssoc_surfaceArchentType = "Stone Associated Surface";
String stoneAssoc_surfaceRelTypeName = "Stone And Associated Surface Materials";
String stoneAssoc_id = null;
Boolean stoneAssoc_loading = false;
Boolean stoneAssoc_isInsituMaterial = true;
List stoneAssoc_insituMaterialVocabulary = new ArrayList();
List stoneAssoc_surfaceMaterialVocabulary = new ArrayList();
Boolean stoneAssoc_removeHearth = true;
Boolean stoneAssoc_removeLacust = true;
Boolean stoneAssoc_removeTerrbo = true;
Boolean stoneAssoc_removeEggshell = true;
Boolean stoneAssoc_removeOther = true;

/** Saves the stone associated materials record. **/
stoneAssoc_save() {
  String tabgroup = stoneAssoc_insituTabgroup;
  String relTypeName = stoneAssoc_insituRelTypeName;
  if (!stoneAssoc_isInsituMaterial) {
    tabgroup = stoneAssoc_surfaceTabgroup;
    relTypeName = stoneAssoc_surfaceRelTypeName;
  }
  Boolean enable_autosave = true;
  saveTabGroup(tabgroup, stoneAssoc_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      stoneAssoc_id = uuid;
      Log.d("stoneAssoc_save()", "Saving the relation between stone " + stone_id + " and " + tabgroup + " " + stoneAssoc_id);
      String callback = "stone_listAssociatedMaterials();" + "showTab(\"stoneArtefactClusters/associatedMaterials\");";
      saveEntitiesToRel(relTypeName, stone_id, stoneAssoc_id, callback);
    }
  }, enable_autosave);
}

/** Loads the stone associated materials record. **/
stoneAssoc_load() {
  String tabgroup = stoneAssoc_insituTabgroup;
  if (!stoneAssoc_isInsituMaterial) {
    tabgroup = stoneAssoc_surfaceTabgroup;
  }
  String selectedID = getListItemValue();
  if (!isNull(selectedID) && !selectedID.equals("placeholder")) {
    Log.d("stoneAssoc_load()", "Preparing to load associated material with ID: " + selectedID);
    dialog = showBusy("loading record", "please wait");
    stoneAssoc_id = selectedID;
    stoneAssoc_loading = true;
    removeAllViewsAndContainers(tabgroup);
    showTabGroup(tabgroup, stoneAssoc_id, new FetchCallback() {
      onFetch(result) {
        stoneAssoc_checkSelections();
        stoneAssoc_toggleTabs();
        stoneAssoc_loading = false;
        dialog.dismiss();
      }
    });
  }
}

/** Resets all tab and view flags for the tabgroup **/
stoneAssoc_resetFlags() {
  // set flags to default
  stoneAssoc_removeHearth = true;
  stoneAssoc_removeLacust = true;
  stoneAssoc_removeTerrbo = true;
  stoneAssoc_removeEggshell = true;
  stoneAssoc_removeOther = true;
}

/** Creates a stone associated materials record. **/
stoneAssoc_create() {
  if (!isNull(stone_id)) {
    String tabgroup = stoneAssoc_insituTabgroup;
    String archentType = stoneAssoc_insituArchentType;
    String relTypeName = stoneAssoc_insituRelTypeName;
    if (!stoneAssoc_isInsituMaterial) {
      tabgroup = stoneAssoc_surfaceTabgroup;
      archentType = stoneAssoc_surfaceArchentType;
      relTypeName = stoneAssoc_surfaceRelTypeName;
    }
    fetchOne("select uuid, response " +
      "from latestNonDeletedArchEntFormattedIdentifiers " +
      "where aenttypename = '"+archentType+"' " +
      "and uuid in  (select uuid " +
      "FROM latestNonDeletedAentReln " +
      "where relationshipid in (select relationshipid " +
      "FROM latestNonDeletedAentReln " +
      "JOIN relationship using (relationshipid) " +
      "JOIN relntype using (relntypeid) " +
      "where uuid = "+stone_id+" " +
      "and relntypeName = '"+relTypeName+"') " +
      "and uuid != "+stone_id+");",  new FetchCallback() {
      onFetch(result) {
        if(isNull(result)) {
          dialog = showBusy("preparing record", "please wait");
          stoneAssoc_id = null;
          stoneAssoc_loading = false;
          removeAllViewsAndContainers(tabgroup);
          newTabGroup(tabgroup);
          stoneAssoc_resetFlags();
          stoneAssoc_toggleTabs();
          dialog.dismiss();
        } else {
          String type = "insitu";
          if (!stoneAssoc_isInsituMaterial) {
            type = "surface";
          }
          showToast("Only one associated "+type+" material can be recorded");
        }
      }
    });
  } else {
    showToast("This record needs to be saved before recording an associated material");
  }
}

/** Renders all appropriate tabs dynamic views for the tabgroup. **/
stoneAssoc_renderTabs() {
  if (!stoneAssoc_loading) {
    Log.d("stoneAssoc_renderTabsAndViews()", "Rendering tabs");
    stoneAssoc_checkSelections();
    stoneAssoc_toggleTabs();
  } else {
    Log.d("stoneAssoc_renderTabsAndViews()", "Loading record, not rendering tabgroup");
  }
}

/** Checks the selections that dynamic views are dependant upon and changes the flags as appropriate. **/
stoneAssoc_checkSelections() {
  stoneAssoc_resetFlags();
  // check selected associated materials
  String view = stoneAssoc_insituTabgroup+"/nearbyMaterial/assocInsituMaterial";;
  if (!stoneAssoc_isInsituMaterial) {
    view = stoneAssoc_surfaceTabgroup+"/nearbyMaterial/assocSurfaceMaterial";
  }
  selectedAssocMaterial = getFieldValue(view);
  String tabgroup = stoneAssoc_insituTabgroup;
  List vocabulary = stoneAssoc_insituMaterialVocabulary;
  if (!stoneAssoc_isInsituMaterial) {
    tabgroup = stoneAssoc_surfaceTabgroup;
    vocabulary = stoneAssoc_surfaceMaterialVocabulary;
  }
  for (selectedItem : selectedAssocMaterial) {
    for (type : vocabulary) {
      if (selectedItem.getName().equals(type.get(0))) {
        Log.d("stoneAssoc_renderAssocTabs()", "Selected "+tabgroup+" "+type.get(1));
        if (type.get(1).equals("{hs}")) {
          stoneAssoc_removeHearth = false;
        } else if (type.get(1).equals("{lacust}")) {
          stoneAssoc_removeLacust = false;
        } else if (type.get(1).equals("{terrbo}")) {
          stoneAssoc_removeTerrbo = false;
        } else if (type.get(1).equals("{eggshell}")) {
          stoneAssoc_removeEggshell = false;
        } else if (type.get(1).equals("{otherwork}")) {
          stoneAssoc_removeOther = false;
        } else {
          Log.e("stoneAssoc_renderAssocTabs()", "Error: no matched insitu selected");
        }
      }
    }
  }
}

/** Shows or cancels the associated material tabs. **/
stoneAssoc_toggleTabs() {
  String tabgroup = stoneAssoc_insituTabgroup;
  if (!stoneAssoc_isInsituMaterial) {
    tabgroup = stoneAssoc_surfaceTabgroup;
  }
  Boolean tabChanged = false;
  // remove unselected tabs
  if (stoneAssoc_removeHearth) {
    cancelTab(tabgroup+"/associatedHearthstones", false);
  }
  if (stoneAssoc_removeLacust) {
    cancelTab(tabgroup+"/associatedLacustrineMaterial", false);
  } 
  if (stoneAssoc_removeTerrbo) {
    cancelTab(tabgroup+"/associatedTerrestrialBone", false);
  }
  if (stoneAssoc_removeEggshell) {
    cancelTab(tabgroup+"/associatedEggshell", false);
  }
  if (stoneAssoc_removeOther) {
    cancelTab(tabgroup+"/associatedOtherWorkedMaterial", false);
  }
  // show the selected tabs
  if (!stoneAssoc_removeHearth) {
    showTab(tabgroup+"/associatedHearthstones");
    tabChanged = true;
  }   
  if (!stoneAssoc_removeLacust) {
    showTab(tabgroup+"/associatedLacustrineMaterial");
    tabChanged = true;
  }
  if (!stoneAssoc_removeTerrbo) {
    showTab(tabgroup+"/associatedTerrestrialBone");
    tabChanged = true;
  } 
  if (!stoneAssoc_removeEggshell) {
    showTab(tabgroup+"/associatedEggshell");
    tabChanged = true;
  } 
  if (!stoneAssoc_removeOther) {
    showTab(tabgroup+"/associatedOtherWorkedMaterial");
    tabChanged = true;
  }
  // switch to the control tab and save the tabgroup
  if (tabChanged) {
    showTab(tabgroup+"/nearbyMaterial");
  }
  stoneAssoc_save();
}

/** Initialises the tabgroup vocabularies. **/
stoneAssoc_init() {
  makeVocab("CheckBoxGroup", stoneAssoc_insituTabgroup  + "/nearbyMaterial/assocInsituMaterial"           , "Stone_-_In_Situ");
  makeVocab("CheckBoxGroup", stoneAssoc_insituTabgroup  + "/associatedHearthstones/assocHearth"           , "Stone_-_Hearth");
  makeVocab("CheckBoxGroup", stoneAssoc_insituTabgroup  + "/associatedLacustrineMaterial/assocLacust"     , "Stone_-_Lacustrine");
  makeVocab("CheckBoxGroup", stoneAssoc_insituTabgroup  + "/associatedTerrestrialBone/assocTerrestrial"   , "Stone_-_Terrestrial");
  makeVocab("CheckBoxGroup", stoneAssoc_insituTabgroup  + "/associatedEggshell/assocEggshell"             , "Stone_-_Eggshell");
  makeVocab("CheckBoxGroup", stoneAssoc_insituTabgroup  + "/associatedOtherWorkedMaterial/assocOtherwork" , "Stone_-_Other_Worked_or_Transported_Material");
  makeVocab("CheckBoxGroup", stoneAssoc_surfaceTabgroup + "/nearbyMaterial/assocSurfaceMaterial"          , "Stone_-_Surface");
  makeVocab("CheckBoxGroup", stoneAssoc_surfaceTabgroup + "/associatedHearthstones/assocHearth"           , "Stone_-_Hearth");
  makeVocab("CheckBoxGroup", stoneAssoc_surfaceTabgroup + "/associatedLacustrineMaterial/assocLacust"     , "Stone_-_Lacustrine");
  makeVocab("CheckBoxGroup", stoneAssoc_surfaceTabgroup + "/associatedTerrestrialBone/assocTerrestrial"   , "Stone_-_Terrestrial");
  makeVocab("CheckBoxGroup", stoneAssoc_surfaceTabgroup + "/associatedEggshell/assocEggshell"             , "Stone_-_Eggshell");
  makeVocab("CheckBoxGroup", stoneAssoc_surfaceTabgroup + "/associatedOtherWorkedMaterial/assocOtherwork" , "Stone_-_Other_Worked_or_Transported_Material");
  fetchVocabulary("Stone_-_In_Situ", stoneAssoc_insituMaterialVocabulary);
  fetchVocabulary("Stone_-_Surface", stoneAssoc_surfaceMaterialVocabulary);
}

onEvent(stoneAssoc_insituTabgroup,  "show", "keepTabGroupChanges(\""+stoneAssoc_insituTabgroup+"\"); stoneAssoc_save();");
onEvent(stoneAssoc_surfaceTabgroup, "show", "keepTabGroupChanges(\""+stoneAssoc_surfaceTabgroup+"\"); stoneAssoc_save();");
onEvent(stoneAssoc_insituTabgroup   + "/nearbyMaterial/assocInsituMaterial"   , "click", "stoneAssoc_renderTabs();");
onEvent(stoneAssoc_surfaceTabgroup  + "/nearbyMaterial/assocSurfaceMaterial"  , "click", "stoneAssoc_renderTabs();");
stoneAssoc_init();

/*********************************************/
/** End Stone Associated Materials Tabgroup **/
/*********************************************/

/************************/
/*** OLD BONE FEATURE ***/
/************************/
String oldbone_tabgroup = "oldBone";
String oldbone_archentType = "Old Bone";
String oldbone_desc = oldbone_archentType + " record";
String oldbone_id = null;
String oldbone_insituRelTypeName = "Old Bone And Associated Insitu Materials";
String oldbone_surfaceRelTypeName = "Old Bone And Associated Surface Materials";
String oldbone_assocInsituTabgroup = "oldboneAssociatedInsituMaterials";
String oldbone_assocSurfaceTabgroup = "oldboneAssociatedSurfaceMaterials";
List oldbone_clusterTypeVocabulary = new ArrayList();

/** Saves the feature **/
oldbone_save() {
  Boolean enable_autosave = true;
  saveTabGroup(oldbone_tabgroup, oldbone_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      oldbone_id = uuid;
      Log.d("oldbone_save()", oldbone_desc + " saved with oldbone_id: " + oldbone_id);
      if (newRecord) {
        Log.d("oldbone_save()", "New " + oldbone_desc + " created");
      }
    }
    onError(message) {
        showToast(message);
    }  
  }, enable_autosave);
}

/** Creates a new feature record. **/
oldbone_create() {
  dialog = showBusy("creating a new record", "please wait");
  newTabGroup(oldbone_tabgroup);
  oldbone_id = null;
  setFieldValue(oldbone_tabgroup + "/basicIdentification/idNumber", "0");
  setFieldValue(oldbone_tabgroup + "/basicIdentification/gridSquare", "0");
  keepTabGroupChanges(oldbone_tabgroup);
  oldbone_save();
  dialog.dismiss();
}

/** Loads a feature record. **/
oldbone_load() {
  if (isNull(oldbone_id)) {
    showToast("No entity selected");
    return;
  }
  dialog = showBusy("loading record", "please wait");
  showTabGroup(oldbone_tabgroup, oldbone_id, new FetchCallback() {
    onFetch(result) {
      Log.d("oldbone_load()", "Loaded an " + oldbone_desc + ", ID: " + oldbone_id);
      showToast("Loaded an " + oldbone_desc);
      oldbone_checkClusterType();
      keepTabGroupChanges(oldbone_tabgroup);
      dialog.dismiss();
    }
  });
}

/** Initialises the tabgroup vocabularies. **/
oldbone_init() {
  makeVocab("HierarchicalDropDown" , oldbone_tabgroup + "/basicIdentification/clusterType"                    , "OldBone_-_Cluster_Type");
  makeVocab("CheckBoxGroup"        , oldbone_tabgroup + "/insituAndSurfaceBone/bodyPartsIdentified"           , "OldBone_-_Body_Parts_Identifed");
  makeVocab("CheckBoxGroup"        , oldbone_tabgroup + "/insituAndSurfaceBone/taxonIdentified"               , "OldBone_-_Taxon_Identified");
  makeVocab("CheckBoxGroup"        , oldbone_tabgroup + "/insituAndSurfaceBone/bonePreservation"              , "OldBone_-_Bone_Preservation");
  makeVocab("CheckBoxGroup"        , oldbone_tabgroup + "/insituAndSurfaceBone/deliberateSurfaceModification" , "OldBone_-_Deliberate_Surface_Modification");
  makeVocab("PictureGallery"       , oldbone_tabgroup + "/topAndStratSetting/topographicSetting"              , "OldBone_-_Topographic_Setting");
  makeVocab("PictureGallery"       , oldbone_tabgroup + "/topAndStratSetting/sedimentType"                    , "OldBone_-_Sediment_Type");
  makeVocab("PictureGallery"       , oldbone_tabgroup + "/topAndStratSetting/stratigraphicUnit"               , "OldBone_-_Stratigraphic_Unit");
  makeVocab("PictureGallery"       , oldbone_tabgroup + "/topAndStratSetting/erosionVulnerability"            , "OldBone_-_Vulnerability_To_Erosion");
  makeVocab("PictureGallery"       , oldbone_tabgroup + "/topAndStratSetting/paleotopographicSetting"         , "OldBone_-_Palaeotopographic_Setting");
  fetchVocabulary("OldBone_-_Cluster_Type", oldbone_clusterTypeVocabulary);
}

/** Populates the in-situ and surface associated materials list. **/
oldbone_listAssociatedMaterials() {
  listAssociatedMaterials(oldbone_tabgroup+"/associatedMaterials/associatedInsituList", oldbone_id, oldboneAssoc_insituArchentType, oldbone_insituRelTypeName);
  listAssociatedMaterials(oldbone_tabgroup+"/associatedMaterials/associatedSurfaceList", oldbone_id, oldboneAssoc_surfaceArchentType, oldbone_surfaceRelTypeName);
}

/** Displays the insitu proportion view. **/
oldbone_displayInsituProportion() {
  String selectedItem = getFieldValue("oldBone/basicIdentification/clusterType");
  if (isNull(selectedItem)) {
    Log.e("updateInsituProportion()", "Null field value for: \"oldBone/basicIdentification/clusterType\"");
    return;
  } else if (oldbone_clusterTypeVocabulary == null) {
    Log.e("updateInsituProportion()", "Null value for: \"oldbone_clusterTypeVocabulary\"");
    return;
  }
  String dynamicView = "oldBone/insituAndSurfaceBone/insituProportion";
  Boolean removeDynamicView = true;
  // iterate through the cluster type vocab and display the insitu proportion view if insitu values are seletced
  for (clusterType : oldbone_clusterTypeVocabulary) {
    if (selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{insitBO}") || clusterType.get(1).equals("{insitAndSurf}") || clusterType.get(1).equals("{inistAndOth}") || clusterType.get(1).equals("{bothAndOth}"))) {
      removeDynamicView = false;
      if (!hasView(dynamicView)) {
        String vocab = "OldBone_-_Proportion_of_material_that_remains_in_situ";
        makeDynamicVocab("PictureGallery", dynamicView, vocab, "{oldBoneUI_insituProportion}", null, "oldBone/insituAndSurfaceBone/insituProportion", vocab, "vocab"); 
        Log.d("oldbone_displayInsituProportion()", "Making insituProportion picture gallery");
      }
    }
  }
  if (removeDynamicView) {
    if (hasView(dynamicView)) {
      removeView(dynamicView);
    }
  }
}

oldbone_checkClusterType() {
  String selectedItem = getFieldValue("oldBone/basicIdentification/clusterType");
  Boolean showAssocTab = false;
  for (clusterType : oldbone_clusterTypeVocabulary) {
    if (!isNull(selectedItem) && selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{boneAndOtherMaterial}") || clusterType.get(1).equals("{inistAndOth}") || clusterType.get(1).equals("{surfAndOth}") || clusterType.get(1).equals("{bothAndOth}"))) {
      showAssocTab = true;
    }
  }
  if (showAssocTab) {
    Log.d("oldbone_checkClusterType()", "Showing associated materials tab");
    showTab("oldBone/associatedMaterials");
    showTab("oldBone/basicIdentification");
  } else {
    Log.d("oldbone_checkClusterType()", "Cancelling associated materials tab");
    cancelTab("oldBone/associatedMaterials", false);
  }
}

onEvent(oldbone_tabgroup, "show", "oldbone_save(); oldbone_checkClusterType();");
onEvent(oldbone_tabgroup + "/associatedMaterials",                        "show", "oldbone_listAssociatedMaterials();");
onEvent(oldbone_tabgroup + "/basicIdentification/calculateGridSquare",    "click", "calculateGridSquare(oldbone_id, oldbone_tabgroup, \""+oldbone_tabgroup+"/basicIdentification/gridSquare\");");
onEvent(oldbone_tabgroup + "/basicIdentification/clusterType",            "click", "oldbone_displayInsituProportion(); oldbone_checkClusterType();");
onEvent(oldbone_tabgroup + "/associatedMaterials/recordInsituMaterial",   "click", "oldboneAssoc_isInsituMaterial=true; oldboneAssoc_create();");
onEvent(oldbone_tabgroup + "/associatedMaterials/recordSurfaceMaterial",  "click", "oldboneAssoc_isInsituMaterial=false; oldboneAssoc_create();");
onEvent(oldbone_tabgroup + "/associatedMaterials/associatedInsituList",   "click", "oldboneAssoc_isInsituMaterial=true; oldboneAssoc_load();");
onEvent(oldbone_tabgroup + "/associatedMaterials/associatedSurfaceList",  "click", "oldboneAssoc_isInsituMaterial=false; oldboneAssoc_load();");
oldbone_init();

/***************************/
/** End Old Bone Tabgroup **/
/***************************/

/************************************/
/*** OLDBONE ASSOCIATED MATERIALS ***/
/************************************/
String oldboneAssoc_insituTabgroup = "oldboneAssociatedInsituMaterials";
String oldboneAssoc_insituArchentType = "Old Bone Associated Insitu Materials";
String oldboneAssoc_insituRelTypeName = "Old Bone And Associated Insitu Materials";
String oldboneAssoc_surfaceTabgroup = "oldboneAssociatedSurfaceMaterials";
String oldboneAssoc_surfaceArchentType = "Old Bone Associated Surface Materials";
String oldboneAssoc_surfaceRelTypeName = "Old Bone And Associated Surface Materials";
String oldboneAssoc_id = null;
Boolean oldboneAssoc_loading = false;
Boolean oldboneAssoc_isInsituMaterial = true;
Boolean oldboneAssoc_removeAssocMussel = true;
Boolean oldboneAssoc_removeAssocHearth = true;
Boolean oldboneAssoc_removeAssocEggshell = true;
Boolean oldboneAssoc_removeAssocStone = true;
Boolean oldboneAssoc_removeAssocOther = true;
Boolean oldboneAssoc_removeChippedStone = true;
Boolean oldboneAssoc_removeUnmodifiedStone = true;
Boolean oldboneAssoc_removeGroundStone = true;
Boolean oldboneAssoc_removeRetouchedStone = true;
List oldboneAssoc_insituMaterialVocabulary = new ArrayList();
List oldboneAssoc_surfaceMaterialVocabulary = new ArrayList();
List oldboneAssoc_stoneArtefactsVocabulary = new ArrayList();
List oldboneAssoc_chippedStoneVocabulary = new ArrayList();

oldboneAssoc_init() {
  makeVocab("CheckBoxGroup", oldboneAssoc_insituTabgroup  + "/nearbyMaterial/assocInsituMaterial",            "OldBone_-_Associated_in_situ_material");
  makeVocab("RadioGroup"   , oldboneAssoc_insituTabgroup  + "/associatedMussel/bivalvePreservation",          "OldBone_-_Bivalve_preservation");
  makeVocab("CheckBoxGroup", oldboneAssoc_insituTabgroup  + "/associatedHearthMaterial/assocHearth",          "OldBone_-_Associated_Hearth_Material");
  makeVocab("CheckBoxGroup", oldboneAssoc_insituTabgroup  + "/associatedEggshell/assocEggshell",              "OldBone_-_Associated_Eggshell");
  makeVocab("CheckBoxGroup", oldboneAssoc_insituTabgroup  + "/associatedStoneArtefacts/assocStone",           "OldBone_-_Associated_Stone_Artefacts");
  makeVocab("CheckBoxGroup", oldboneAssoc_insituTabgroup  + "/associatedOtherWorkedMaterial/assocOtherwork",  "OldBone_-_Associated_Other_Artefacts");
  makeVocab("CheckBoxGroup", oldboneAssoc_surfaceTabgroup + "/nearbyMaterial/assocSurfaceMaterial",           "OldBone_-_Associated_surface_material");
  makeVocab("RadioGroup"   , oldboneAssoc_surfaceTabgroup + "/associatedMussel/bivalvePreservation",          "OldBone_-_Bivalve_preservation");
  makeVocab("CheckBoxGroup", oldboneAssoc_surfaceTabgroup + "/associatedHearthMaterial/assocHearth",          "OldBone_-_Associated_Hearth_Material");
  makeVocab("CheckBoxGroup", oldboneAssoc_surfaceTabgroup + "/associatedEggshell/assocEggshell",              "OldBone_-_Associated_Eggshell");
  makeVocab("CheckBoxGroup", oldboneAssoc_surfaceTabgroup + "/associatedStoneArtefacts/assocStone",           "OldBone_-_Associated_Stone_Artefacts");
  makeVocab("CheckBoxGroup", oldboneAssoc_surfaceTabgroup + "/associatedOtherWorkedMaterial/assocOtherwork",  "OldBone_-_Associated_Other_Artefacts");
  fetchVocabulary("OldBone_-_Associated_in_situ_material", oldboneAssoc_insituMaterialVocabulary);
  fetchVocabulary("OldBone_-_Associated_surface_material", oldboneAssoc_surfaceMaterialVocabulary);
  fetchVocabulary("OldBone_-_Associated_Stone_Artefacts", oldboneAssoc_stoneArtefactsVocabulary);
  fetchVocabulary("OldBone_-_Associated_Chipped_Stone_Artefacts", oldboneAssoc_chippedStoneVocabulary);
}

/** Saves the old bone associated materials record. **/
oldboneAssoc_save() {
  String tabgroup = oldboneAssoc_insituTabgroup;
  String relTypeName = oldboneAssoc_insituRelTypeName;
  if (!oldboneAssoc_isInsituMaterial) {
    tabgroup = oldboneAssoc_surfaceTabgroup;
    relTypeName = oldboneAssoc_surfaceRelTypeName;
  }
  Boolean enable_autosave = true;
  saveTabGroup(tabgroup, oldboneAssoc_id, null, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      oldboneAssoc_id = uuid;
      Log.d("oldboneAssoc_save()", "Saving the relation between oldBone " + oldbone_id + " and " + tabgroup + " " + oldboneAssoc_id);
      String callback = "oldbone_listAssociatedMaterials();" + "showTab(\"oldBone/associatedMaterials\");";
      saveEntitiesToRel(relTypeName, oldbone_id, oldboneAssoc_id, callback);
    }
  }, enable_autosave);
}

/** Loads the old bone associated materials record. **/
oldboneAssoc_load() {
  String tabgroup = oldboneAssoc_insituTabgroup;
  if (!oldboneAssoc_isInsituMaterial) {
    tabgroup = oldboneAssoc_surfaceTabgroup;
  }
  String selectedID = getListItemValue();
  if (!isNull(selectedID) && !selectedID.equals("placeholder")) {
    Log.d("oldboneAssoc_load()", "Preparing to load associated material with ID: " + selectedID);
    oldboneAssoc_id = selectedID;
    oldboneAssoc_loading = true;
    removeAllViewsAndContainers(tabgroup);
    oldboneAssoc_renderControlTab();
  }
}

/** Creates an old bone associated materials record. **/
oldboneAssoc_create() {
  if (!isNull(oldbone_id)) {
    String tabgroup = oldboneAssoc_insituTabgroup;
    String archentType = oldboneAssoc_insituArchentType;
    String relTypeName = oldboneAssoc_insituRelTypeName;
    if (!oldboneAssoc_isInsituMaterial) {
      tabgroup = oldboneAssoc_surfaceTabgroup;
      archentType = oldboneAssoc_surfaceArchentType;
      relTypeName = oldboneAssoc_surfaceRelTypeName;
    }
    fetchOne("select uuid, response " +
      "from latestNonDeletedArchEntFormattedIdentifiers " +
      "where aenttypename = '"+archentType+"' " +
      "and uuid in  (select uuid " +
      "FROM latestNonDeletedAentReln " +
      "where relationshipid in (select relationshipid " +
      "FROM latestNonDeletedAentReln " +
      "JOIN relationship using (relationshipid) " +
      "JOIN relntype using (relntypeid) " +
      "where uuid = "+oldbone_id+" " +
      "and relntypeName = '"+relTypeName+"') " +
      "and uuid != "+oldbone_id+");",  new FetchCallback() {
      onFetch(result) {
        if(isNull(result)) {
          oldboneAssoc_id = null;
          removeAllViewsAndContainers(tabgroup);
          newTabGroup(tabgroup);
          oldboneAssoc_renderControlTab();
        } else {
          String type = "insitu";
          if (!oldboneAssoc_isInsituMaterial) {
            type = "surface";
          }
          showToast("Only one associated "+type+" material can be recorded");
        }
      }
    });
  } else {
    showToast("This record needs to be saved before recording an associated material");
  }
}

/** Retrieves the dynamic associated material selection or null if it does not exist. **/
List oldboneAssoc_getSelectedAssocMaterial() {
  String view = oldboneAssoc_insituTabgroup+"/nearbyMaterial/assocInsituMaterial";;
  if (!oldboneAssoc_isInsituMaterial) {
    view = oldboneAssoc_surfaceTabgroup+"/nearbyMaterial/assocSurfaceMaterial";
  }
  return getFieldValue(view);
}

/** Display the associated material list and attach a callback to render the other tabs when appropriate. **/
oldboneAssoc_renderControlTab() {
  oldboneAssoc_renderAssocTabs();
  if (oldboneAssoc_loading) {
    Log.d("oldboneAssoc_renderControlTab()", "Preparing to oldboneAssoc_load");
    oldboneAssoc_loadAssocCallback();
  }
}

/** Displays the associated material tabs when appropriate. **/
oldboneAssoc_renderAssocTabs() {
  selectedAssocMaterial = oldboneAssoc_getSelectedAssocMaterial();
  if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty()) {
    String tabgroup = oldboneAssoc_insituTabgroup;
    List vocabulary = oldboneAssoc_insituMaterialVocabulary;
    if (!oldboneAssoc_isInsituMaterial) {
      tabgroup = oldboneAssoc_surfaceTabgroup;
      vocabulary = oldboneAssoc_surfaceMaterialVocabulary;
    }
    for (selectedItem : selectedAssocMaterial) {
      // render the associated material dynamic views
      for (type : vocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          Log.d("oldboneAssoc_renderAssocTabs()", "Selected "+tabgroup+" "+type.get(1));
          if (type.get(1).equals("{mussel}")) {
            oldboneAssoc_removeAssocMussel = false;
          } else if(type.get(1).equals("{hs}")) {
            oldboneAssoc_removeAssocHearth = false;
          } else if(type.get(1).equals("{eggshell}")) {
            oldboneAssoc_removeAssocEggshell = false;
          } else if(type.get(1).equals("{stoneart}")) {
            oldboneAssoc_removeAssocStone = false;
          } else if(type.get(1).equals("{otherart}")) {
            oldboneAssoc_removeAssocOther = false;
          } else {
            Log.e("oldboneAssoc_renderAssocTabs()", "Error: no matched insitu selected");
          }
        }
      }
    } 
  }
  // show and cancel the appropriate associated material tabs.
  oldboneAssoc_onShowAssociatedMaterials();
}

/** Shows or cancels the associated material tabs. **/
oldboneAssoc_onShowAssociatedMaterials() {
  // if the tab show is triggered after loading, don't execute the rest of this function.
  if (oldboneAssoc_loading) {
    Log.d("oldboneAssoc_onShowAssociatedMaterials()", "Exiting function, loading associated material");
    return;
  }
  Boolean tabChanged = false;
  String tabgroup = oldboneAssoc_insituTabgroup;
  if (!oldboneAssoc_isInsituMaterial) {
    tabgroup = oldboneAssoc_surfaceTabgroup;
  }
  // remove unselected tabs
  if (oldboneAssoc_removeAssocMussel) {
    cancelTab(tabgroup+"/associatedMussel", false);
  }
  if (oldboneAssoc_removeAssocHearth) {
    cancelTab(tabgroup+"/associatedHearthMaterial", false);
  } 
  if (oldboneAssoc_removeAssocEggshell) {
    cancelTab(tabgroup+"/associatedEggshell", false);
  }
  if (oldboneAssoc_removeAssocStone) {
    cancelTab(tabgroup+"/associatedStoneArtefacts", false);
  }
  if (oldboneAssoc_removeAssocOther) {
    cancelTab(tabgroup+"/associatedOtherWorkedMaterial", false);
  }
  // show the selected tabs
  if (!oldboneAssoc_removeAssocMussel) {
    showTab(tabgroup+"/associatedMussel");
    oldboneAssoc_removeAssocMussel = true;
    tabChanged = true;
  }   
  if (!oldboneAssoc_removeAssocHearth) {
    showTab(tabgroup+"/associatedHearthMaterial");
    oldboneAssoc_removeAssocHearth = true;
    tabChanged = true;
  }
  if (!oldboneAssoc_removeAssocEggshell) {
    showTab(tabgroup+"/associatedEggshell");
    oldboneAssoc_removeAssocEggshell = true;
    tabChanged = true;
  } 
  if (!oldboneAssoc_removeAssocStone) {
    showTab(tabgroup+"/associatedStoneArtefacts");
    oldboneAssoc_removeAssocStone = true;
    tabChanged = true;
  } 
  if (!oldboneAssoc_removeAssocOther) {
    showTab(tabgroup+"/associatedOtherWorkedMaterial");
    oldboneAssoc_removeAssocOther = true;
    tabChanged = true;
  }
  // switch to the control tab and save the tabgroup
  if (tabChanged) {
    showTab(tabgroup+"/nearbyMaterial");
  }
  oldboneAssoc_save();
}

oldboneAssoc_loadAssocCallback() {
  String tabgroup = oldboneAssoc_insituTabgroup;
  if (!oldboneAssoc_isInsituMaterial) {
    tabgroup = oldboneAssoc_surfaceTabgroup;
  }
  oldboneAssoc_removeAssocMussel = false;
  oldboneAssoc_removeAssocHearth = false;
  oldboneAssoc_removeAssocEggshell = false;
  oldboneAssoc_removeAssocStone = false;
  oldboneAssoc_removeAssocOther = false;

  // render the 'selection-dependent' views for the stone tab
  if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
    String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocChippedStone\", \"click\", \"oldboneAssoc_updateDynamicChippedStone();\");";
    makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "{oldBoneUI_assocChippedStone}", callback, tabgroup+"/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "vocab");   
  }
  if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
    makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "{oldBoneUI_assocChippedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "vocab");  
  }
  oldboneAssoc_removeChippedStone = false;
  if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
    makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "{oldBoneUI_assocUnmodifiedStone}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "vocab");
  } 
  if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
    makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "{oldBoneUI_assocUnmodifiedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "vocab");  
  }   
  oldboneAssoc_removeUnmodifiedStone = false;
  if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
    makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "{oldBoneUI_assocGroundStoneType}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "vocab"); 
  } 
  if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
    makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "{oldBoneUI_assocGroundStoneStatus}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "vocab");     
  }
  if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
    makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "{oldBoneUI_assocGroundRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "vocab");  
  }    
  oldboneAssoc_removeGroundStone = false;
  if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
    makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "{oldBoneUI_assocRetouchedStone}", null, tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "vocab");    
  }
  oldboneAssoc_removeRetouchedStone = false;
  
  // load the saved values into the rendered views
  dialog = showBusy("loading record", "please wait");
  showTabGroup(tabgroup, oldboneAssoc_id, new FetchCallback() {
    onFetch(result) {
      // print("loaded assoc: " + result + " with attributes: " + result.getAttributes());
      oldboneAssoc_removeUnselectedMaterials();
      dialog.dismiss();
    }
  });
}

/** Removes the tabs for unselected materials when loading. **/
oldboneAssoc_removeUnselectedMaterials() {
  // only perform the removal if the associated materials are being loaded.
  if (!oldboneAssoc_loading) {
    return;
  }
  Log.d("oldboneAssoc_removeUnselectedMaterials()", "Removing unseletected materials from loaded associated material.");
  // get the selected material list values 
  selectedAssocMaterial = oldboneAssoc_getSelectedAssocMaterial();
  if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty())
  {
    String tabgroup = oldboneAssoc_insituTabgroup;
    List vocabulary = oldboneAssoc_insituMaterialVocabulary;
    if (!oldboneAssoc_isInsituMaterial) {
      tabgroup = oldboneAssoc_surfaceTabgroup;
      vocabulary = oldboneAssoc_surfaceMaterialVocabulary;
    }
    oldboneAssoc_removeAssocMussel = true;
    oldboneAssoc_removeAssocHearth = true;
    oldboneAssoc_removeAssocEggshell = true;
    oldboneAssoc_removeAssocStone = true;
    oldboneAssoc_removeAssocOther = true;
    // flag the selected values which shouldn't be removed.
    for (selectedItem : selectedAssocMaterial) {
      for (type : vocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          if (type.get(1).equals("{mussel}")) {
            oldboneAssoc_removeAssocMussel = false;
          } else if(type.get(1).equals("{hs}")) {
            oldboneAssoc_removeAssocHearth = false;
          } else if(type.get(1).equals("{eggshell}")) {
            oldboneAssoc_removeAssocEggshell = false;
          } else if(type.get(1).equals("{stoneart}")) {
            oldboneAssoc_removeAssocStone = false;
          } else if(type.get(1).equals("{otherart}")) {
            oldboneAssoc_removeAssocOther = false;
          } else {
            Log.e("oldboneAssoc_removeUnselectedMaterials()", "Error: no matched insitu selected");
          }
        }
      }
    }
    // remove the appropriate selection-dependent views for the tabs that aren't going to be removed.
    if (!oldboneAssoc_removeAssocStone) {
      oldboneAssoc_removeChippedStone = true;
      oldboneAssoc_removeUnmodifiedStone = true;
      oldboneAssoc_removeGroundStone = true;
      assocStones = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocStone");
      for (selectedItem : assocStones) {
        for (type : oldboneAssoc_stoneArtefactsVocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            if (type.get(1).equals("{cs}")) {
              oldboneAssoc_removeChippedStone = false;
            } else if (type.get(1).equals("{um}")) {
              oldboneAssoc_removeUnmodifiedStone = false;
            } else if (type.get(1).equals("{ground}")) {
              oldboneAssoc_removeGroundStone = false;
            } else {
              Log.e("oldboneAssoc_removeUnselectedMaterials", "Error: no stone artefact selected");
            }
          }
        }
      }
      oldboneAssoc_removeDynamicAssociatedStone();
      oldboneAssoc_removeRetouchedStone = true;
      if (!oldboneAssoc_removeChippedStone) {
        chippedStone = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
        for (selectedItem : chippedStone) {
          for (type : oldboneAssoc_chippedStoneVocabulary) {
            if (selectedItem.getName().equals(type.get(0))) {
              if (type.get(1).equals("{ru}")) {
                oldboneAssoc_removeRetouchedStone = false;
              }
            }
          }
        }
      }
      oldboneAssoc_removeRetouchedArtefacts();
    }
    // remove the unselected tabs, switching the load flag mark that the 'oldboneAssoc_loading' process has finished.
    oldboneAssoc_loading = false;
    oldboneAssoc_onShowAssociatedMaterials();
  }
}

/** Detect and display the relevent associated stone artefact views. **/
oldboneAssoc_updateDynamicAssociatedStone() {
  oldboneAssoc_removeChippedStone = true;
  oldboneAssoc_removeUnmodifiedStone = true;
  oldboneAssoc_removeGroundStone = true;
  String tabgroup = oldboneAssoc_insituTabgroup;
  if (!oldboneAssoc_isInsituMaterial) {
    tabgroup = oldboneAssoc_surfaceTabgroup;
  }
  assocStones = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocStone");
  // compare each selected artefact against the stone artefact vocab to determine which one(s) the user selected
  for (selectedItem : assocStones) {
    for (type : oldboneAssoc_stoneArtefactsVocabulary) {
      if (selectedItem.getName().equals(type.get(0))) {
        if (type.get(1).equals("{cs}")) {
          String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocChippedStone\", \"click\", \"oldboneAssoc_updateDynamicChippedStone();\");";
          if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
            makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "{oldBoneUI_assocChippedStone}", callback, tabgroup+"/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "vocab");
          }
          if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
            makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "{oldBoneUI_assocChippedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "vocab");  
          }
          oldboneAssoc_removeChippedStone = false;
        } else if (type.get(1).equals("{um}")) {
          if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
            makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "{oldBoneUI_assocUnmodifiedStone}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "vocab");
          }
          if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
            makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "{oldBoneUI_assocUnmodifiedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "vocab");  
          } 
          oldboneAssoc_removeUnmodifiedStone = false;
        } else if (type.get(1).equals("{ground}")) {
          if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
            makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "{oldBoneUI_assocGroundStoneType}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "vocab");
          }
          if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
            makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "{oldBoneUI_assocGroundStoneStatus}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "vocab");
          }
          if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
            makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "{oldBoneUI_assocGroundRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "vocab");  
          }
          oldboneAssoc_removeGroundStone = false;
        } else {
          Log.e("oldboneAssoc_updateDynamicAssociatedStone", "Error: no stone artefact selected");
        }
      }
    }    
  }
  // remove the appropriate dynamic views.
  oldboneAssoc_removeDynamicAssociatedStone();
}

/** Removes the relevent associated stone artefact views. **/
oldboneAssoc_removeDynamicAssociatedStone() {
  String tabgroup = oldboneAssoc_insituTabgroup;
  if (!oldboneAssoc_isInsituMaterial) {
    tabgroup = oldboneAssoc_surfaceTabgroup;
  }
  if (oldboneAssoc_removeChippedStone) {
    if (hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
      removeView(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone");
      }
    }
    if (hasView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
      removeView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial");
    }
  }
  if (oldboneAssoc_removeUnmodifiedStone) {
    if (hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
      removeView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone");
    }
    if (hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
      removeView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial");
    }
  }
  if (oldboneAssoc_removeGroundStone) {
    if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
      removeView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType");
    }
    if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
      removeView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus");
    }
    if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
      removeView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial");
    }
  }
}

/** Displays the associated retouched artefacts view for associated stone artefacts **/
oldboneAssoc_updateDynamicChippedStone() {
  String tabgroup = oldboneAssoc_insituTabgroup;
  if (!oldboneAssoc_isInsituMaterial) {
    tabgroup = oldboneAssoc_surfaceTabgroup;
  }
  chippedStone = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
  oldboneAssoc_removeRetouchedStone = true;
  for (selectedItem : chippedStone) {
    for (type : oldboneAssoc_chippedStoneVocabulary) {
      if (selectedItem.getName().equals(type.get(0))) {
        if (type.get(1).equals("{ru}")) {
          Log.d("oldboneAssoc_updateDynamicChippedStone", "ru selected");
          if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
            makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "{oldBoneUI_assocRetouchedStone}", null, tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "vocab");
          }
          oldboneAssoc_removeRetouchedStone = false;
        }
      }
    }
  }
  oldboneAssoc_removeRetouchedArtefacts();
}

/** Removes the retouched artefacts view if appropriate. **/
oldboneAssoc_removeRetouchedArtefacts() {
  String tabgroup = oldboneAssoc_insituTabgroup;
  if (!oldboneAssoc_isInsituMaterial) {
    tabgroup = oldboneAssoc_surfaceTabgroup;
  }
  if (oldboneAssoc_removeRetouchedStone) {
    if (hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
      removeView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone");
    }
  }
}
  
onEvent(oldboneAssoc_insituTabgroup,  "show", "oldboneAssoc_onShowAssociatedMaterials(); keepTabGroupChanges(\""+oldboneAssoc_insituTabgroup+"\"); oldboneAssoc_save();");
onEvent(oldboneAssoc_surfaceTabgroup, "show", "oldboneAssoc_onShowAssociatedMaterials(); keepTabGroupChanges(\""+oldboneAssoc_surfaceTabgroup+"\"); oldboneAssoc_save();");
onEvent(oldboneAssoc_insituTabgroup   + "/nearbyMaterial/assocInsituMaterial",    "click", "oldboneAssoc_renderAssocTabs();");
onEvent(oldboneAssoc_insituTabgroup   + "/associatedStoneArtefacts/assocStone",   "click", "oldboneAssoc_updateDynamicAssociatedStone();");
onEvent(oldboneAssoc_surfaceTabgroup  + "/nearbyMaterial/assocSurfaceMaterial",   "click", "oldboneAssoc_renderAssocTabs();");
onEvent(oldboneAssoc_surfaceTabgroup  + "/associatedStoneArtefacts/assocStone",   "click", "oldboneAssoc_updateDynamicAssociatedStone();");
oldboneAssoc_init();

/***********************************************/
/** End Old Bone Associate Materials Tabgroup **/
/***********************************************/

