/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;
import java.io.File;
import jsqlite;
import jsqlite.Callback;

Log.d("Lake Mungo Module", "Very first line of logic after imports.");

User user; // don't touch
String userid;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
}
makeLocalID();

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/
loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}

loadUsers();

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/
startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

/** Fetches the contents of a specifed vocabulary and stores it in the given list. **/
fetchVocabulary(String vocabName, List storageList) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      storageList.addAll(result);
      // Log.d("fetchVocabulary()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
    }
  }); 
}

/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/*** 'Editable' - you can edit the code below based on the needs ***/
/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;", new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    populateHierarchicalDropDown(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          populateDropDown(path, result);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

makeDynamicVocab(String type, String path, String attrib, String label) {
  makeDynamicVocab(type, path, attrib, label, null, null);
}

makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction) {
  makeDynamicVocab(type, path, attrib, label, callbackFunction, null);
}

/** Makes a dynamic vocab and populates it using a data_schema vocab. **/
makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction, String container) {
  makeDynamicVocab(type, path, attrib, label, callbackFunction, container, null, null);
}

/** Makes a dynamic vocab nested in the specified and populates it using a data_schema vocab, with a callbackFunction to execute after creating the dynamic view. **/
makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction, String container, String attributeName, String attributeType) {
  executeViewTask(new ViewTask(){
    doTask() {
      viewDef = createViewDef();
      if (type.equals("DropDown")) {
        viewDef.createDropDown();
      } else if (type.equals("CheckBoxGroup")) {
        viewDef.createCheckboxGroup();
      } else if (type.equals("RadioGroup")) {
        viewDef.createRadioGroup();
      } else if (type.equals("PictureGallery")) {
        viewDef.createPictureGallery();
      } else {
        Log.e("makeDynamicVocab()", "Error: invalid vocab type provided.");
        return;
      }
      // set the label for the dynamic view
      if (!isNull(label)) {
        viewDef.setLabel(label);
      }
      // link the dynamic view to a property in the data schema
      if (!isNull(attributeName) && !isNull(attributeType)) {
        viewDef.setAttributeName(attributeName).setAttributeType(attributeType);
      }
      // Add the certainty, annotation and description
      viewDef.setAnnotationEnabled(true).setCertaintyEnabled(true).setInfoEnabled(true);
      // populate the dynamic view choices with the contents of some vocabulary
      String tabgroup = path.split("/")[0];
      String tab = path.split("/")[1];
      String view = path.split("/")[2];
      fetchAll("select vocabid, vocabname, pictureurl from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;", new FetchCallback() {
        onFetch(result) {
          if (!isNull(container)) {
            Log.d("makeDynamicVocab()", "Creating dynamic view '" + view + "' in container '" + container + "'");
            createView(path, viewDef, container);
          } else {
            Log.d("makeDynamicVocab()", "Creating dynamic view '" + view + "' in tab '" + tabgroup + "/" + tab + "'");
            createView(path, viewDef);
          }

          if (type.equals("DropDown")) {
            populateDropDown(path, result);
          } else if (type.equals("CheckBoxGroup")) {
            populateCheckBoxGroup(path, result);
          } else if (type.equals("RadioGroup")) {
            populateRadioGroup(path, result);
          } else if (type.equals("PictureGallery")) {
            populatePictureGallery(path, result);
          }    

          if (callbackFunction != null && !isNull(callbackFunction)) {
            execute(callbackFunction);
          }
        }
      });
      refreshTabgroupCSS(tabgroup);
    }
  });
}

/** Entity Relationship Saving **/
/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

/** Saves two entity id's as a relation with some callback executed. **/
saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            if(!isNull(callback)) {
               execute(callback);
            }
        }
    });
}

/** Saves two entity id's as a hierachical relation. **/
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
        }
    });
}

/** Action Bar **/
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Sync}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Enable_Sync}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Internal_GPS}";
    }
    actionOn() {
        stopGPS();
        showToast("{Internal_GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_Internal_GPS}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{Internal_GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_External_GPS}";
    }
    actionOn() {
        stopGPS();
        showToast("{External_GPS_Disabled}");

    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_External_GPS}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{External_GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
    }
});

/*** MODULE CONTROL ***/
// List of feature entities for recording.
entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{oldBone}", "Old Bone"));
entityTypes.add(new NameValuePair("{hearth}", "Hearth"));
entityTypes.add(new NameValuePair("{midden}", "Midden"));
entityTypes.add(new NameValuePair("{stone}", "Stone Artefact Clusters"));
entityTypes.add(new NameValuePair("{isolated}", "Isolated"));
populateDropDown("control/control/entityTypes", entityTypes);
// entityTypes.add(0, new NameValuePair("{all}", "Feature"));
populateDropDown("control/search/entityTypes", entityTypes);

/* Loads a list view of existing entities. */
loadSearch() {
  String type = getFieldValue("control/search/entityTypes");
  populateCursorList("control/search/entityList", "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename = '" + type + "' limit ? offset ?;", 25);
}

/** Creates a record for the selected feature type. **/
newFeature() {
  String type = getFieldValue("control/control/entityTypes");
  if (type.equals("Old Bone")) {
    oldbone.create();
  } else if (type.equals("Hearth")) {
    hearth.create();
  } else if (type.equals("Midden")) {
    midden.create();
  } else if (type.equals("Stone Artefact Clusters")) {
    stone.create();
  } else if (type.equals("Isolated")) {
    isolated.create();
  }
}

loadFeature() {
  String listID = getListItemValue();
  if (!isNull(listID)) {
    fetchAll("select aenttypename from latestnondeletedarchent join aenttype using (aenttypeid) where uuid = '" + listID + "';", new FetchCallback() {
      onFetch(result) {
        Log.d("loadFeature()", "Loading entity id: " + entityID);
        if (result.get(0).get(0).equals("Old Bone")) {
          oldbone.id = listID;
          oldbone.load();
        } else if (result.get(0).get(0).equals("Hearth")) {
          hearth.id = listID;
          hearth.load();
        } else if (result.get(0).get(0).equals("Midden")) {
          midden.id = listID;
          midden.load();
        } else if (result.get(0).get(0).equals("Stone Artefact Clusters")) {
          stone.id = listID;
          stone.load();
        } else if (result.get(0).get(0).equals("Isolated")) {
          isolated.id = listID;
          isolated.load();
        }
      }
    });
  } else {
    Log.e("loadFeature()", "Error: cannot load an entity with a null ID.");
  }
}

/** Populates the in-situ and surface associated materials list. **/
listAssociatedMaterials(String listPath, String id, String associatedAenttypename, String reltypename) {
  if(!isNull(id)) {
    String assocListQuery = "select uuid, response " +
      "from latestNonDeletedArchEntFormattedIdentifiers " +
      "where aenttypename = '"+ associatedAenttypename +"' " +
      "and uuid in  (select uuid " +
      "FROM latestNonDeletedAentReln " +
      "where relationshipid in (select relationshipid " +
      "FROM latestNonDeletedAentReln " +
      "JOIN relationship using (relationshipid) " +
      "JOIN relntype using (relntypeid) " +
      "where uuid = "+ id +" " +
      "and relntypeName = '"+ reltypename +"') " +
      "and uuid != "+ id +");";
    fetchAll(assocListQuery, new FetchCallback() {
      onFetch(result) {
        Log.d("listAssociatedMaterials()", "Associated materials ("+associatedAenttypename+") found in relation ("+reltypename+") with uuid ("+id+"): "+result.toString());
        if (result == null || result.isEmpty()) {
            result = new ArrayList();
            result.add(new NameValuePair("{noRecordsFound}", ""));
        }
        populateList(listPath, result);
      }
    });
  } else {
    result = new ArrayList();
    result.add(new NameValuePair("{noRecordsFound}", ""));
    populateList(listPath, result);
  } 
}

onEvent("control/control/newEntity"  , "delayclick" , "newFeature();");
onEvent("control/search"             , "show"       , "loadSearch();");
onEvent("control/search/entityList"  , "click"      , "loadFeature();");
onEvent("control/search/entityTypes" , "click"      , "loadSearch();");

/*******************/
/* Grid Square GPS */
/** Calculates the grid square that the feature is in. **/
calculateGridSquare(String id, String tabgroup, String gridSquareViewPath) {
  // check that GPS is on and a position can be found.
  if(!isExternalGPSOn() && !isInternalGPSOn()) {
    showToast("Please turn on GPS");
    Log.e("calculateGridSquare()", "Internal and external GPS are off.");
    return;
  }
  Object position = getGPSPosition();
  if (position == null) {
    showToast("A GPS position could not be found");
    Log.e("calculateGridSquare()", "A GPS position couldn't be found.");
    return;
  }
  if(isNull(id)) {
    showToast("The record needs to be saved before calculating the grid square");
    Log.e("calculateGridSquare()", "The entity_id is null as the record has not been saved yet.");
    return;
  }
  // record the gps geometry 
  dialog = showBusy("Caculating grid square", "please wait");
  Object projPosition = getGPSPositionProjected();
  Log.d("calculateGridSquare()", "Projected position: " + projPosition.toString());
  Double latitude = position.getLatitude();
  Double longitude = position.getLongitude();
  Double northing = projPosition.getLatitude();
  Double easting = projPosition.getLongitude();
  Log.d("calculateGridSquare()", "Using module srid " + getModuleSrid() + ", obtained as lat and long (" + latitude.toString() + " " + longitude.toString() + "), and northing and easting (" + northing.toString() + " " + easting.toString() + ")");
  samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);
  saveArchEnt(id, tabgroup, geolist, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      Log.d("calculateGridSquare()", "Saved geometry: " + geolist.toString());
      // queryGridDB(easting.toString(), northing.toString(), gridSquareViewPath);
      queryGridDB("693400", "6257300", gridSquareViewPath); // Used for testing
      showWarning("Alert", "The calculate grid square is currently using the following mock projections for testing: (693400, 6257300)");
      dialog.dismiss();
    }  
  });
}

/** Connects to and queries the grid db. **/
queryGridDB(String easting, String northing, String gridSquareViewPath) {
  String srid = getModuleSrid();
  File file = new File("/sdcard/faims/modules/"+getModuleId()+"/files/data/grid.sqlite3");
  type = jsqlite.Constants.SQLITE_OPEN_READONLY;
  jsqlite.Database db = new jsqlite.Database();
  // Query the grid square
  String gridSquareQuery = "select label from grid where coveredBy(pointfromtext('POINT ("+easting+" "+northing+")',"+srid+"), grid) order by x,y limit 1;";
  Log.d("queryGridDB()", "Running query to select grid label: " + gridSquareQuery);
  try {
    db.open(file.getPath(), type);
    db.exec(gridSquareQuery, new Callback() {
      public void columns(String[] coldata) {
        Log.d("grid square query", "coldata: " + Arrays.toString(coldata));
      }
      public void types(String[] types) {
        Log.d("grid square query", "types: " + Arrays.toString(types));
      }
      public boolean newrow(String[] rowdata) {
        Log.d("grid square query", "rowdata: " + Arrays.toString(rowdata));
        setFieldValue(gridSquareViewPath, rowdata[0].toString());
        showToast("You are in grid square " + rowdata[0].toString());
        return false;
      }
    });
  } catch (Exception e) {
    Log.e("error dumping database", e.toString());
  } finally {
    db.close();
  }
  // Query the grid warning
  String warningQuery = "select warning from gridbuffer where  coveredBy(pointfromtext('POINT ("+easting+" "+northing+")',"+srid+"), gridbuffer);";
  Log.d("queryGridDB()", "Running query to select grid warning: " + warningQuery);
  try {
    db.open(file.getPath(), type);
    db.exec(warningQuery, new Callback() {
      public void columns(String[] coldata) {
        Log.d("grid warning query", "coldata: " + Arrays.toString(coldata));
      }
      public void types(String[] types) {
        Log.d("grid warning query", "types: " + Arrays.toString(types));
      }
      public boolean newrow(String[] rowdata) {
        Log.d("grid warning query", "rowdata: " + Arrays.toString(rowdata));
        if (rowdata[0].toString().equals("warning")) {
          showWarning("Warning", "You are close to a grid square boundary");
        }
        return false;
      }
    });
  } catch (Exception e) {
    Log.e("error dumping database", e.toString());
  } finally {
    db.close();
  }
}
/*******************/

/*** HEARTH FEATURE ***/
hearthFeature() {
  String entityTabgroup = "hearth";
  String type = "Hearth";
  String desc = type + " record";
  String id = null;
  String relTypeName = "Hearth And Associated Materials";
  List hearthTypeVocabulary = new ArrayList();
  Boolean removeBriefDescription = true;  
  Boolean removeHeatRetainer = true;
  Boolean removeNonHeatRetainer = true;  
  
  /** Saves the feature **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(entityTabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("save()", desc + " saved with id: " + id);
        if (newRecord) {
          Log.d("save()", "New " + desc + " created");
        }
      }
      onError(message) {
          showToast(message);
      }  
    }, enable_autosave);
  }

  /** Creates a new feature record. **/
  create() {
    dialog = showBusy("creating a new record", "please wait");
    removeBriefDescription = true;
    removeHeatRetainer = true;
    removeNonHeatRetainer = true;
    id = null;
    newTabGroup(entityTabgroup);
    setFieldValue(entityTabgroup + "/basicIdentification/idNumber", "0");
    setFieldValue(entityTabgroup + "/basicIdentification/gridSquare", "0");
    keepTabGroupChanges(entityTabgroup);
    save();
    dialog.dismiss();
  }

  /** Loads a feature record. **/
  load() {
    if (isNull(id)) {
      showToast("No entity selected");
        return;
    }
    dialog = showBusy("loading record", "please wait");
    removeAllViewsAndContainers(entityTabgroup);
    // display all dynamic views
    removeBriefDescription = false;
    removeHeatRetainer = false;
    removeNonHeatRetainer = false;
    displayDynamicViews();
    // load the entity and populate any dynamic views with their saved value
    showTabGroup(entityTabgroup, id, new FetchCallback() {
      onFetch(result) {
        Log.d("load()", "Loaded a " + desc + ", ID: " + id);
        showToast("Loaded a " + desc);
        checkHearthType(); // remove any dynamic views that shouldn't be present
        keepTabGroupChanges(entityTabgroup);
        dialog.dismiss();
      }
    });
  }

  /** Flags the selected hearth type corresponding to dynamic views **/
  checkHearthType() {
    String selectedItem = getFieldValue(entityTabgroup+"/basicIdentification/hearthType");
    if (isNull(selectedItem)) {
      removeBriefDescription = true;
      removeHeatRetainer = true;
      removeNonHeatRetainer = true;
      removeDynamicViews();
      return;
    }
    for (hearthType : hearthTypeVocabulary) {
      if (selectedItem.equals(hearthType.get(0))) {
        if (hearthType.get(1).equals("{hsother}") || hearthType.get(1).equals("{other}")) {
          removeBriefDescription = false;
        } else {
          removeBriefDescription = true;
        }
        if (hearthType.get(1).equals("{hsterm}") || hearthType.get(1).equals("{hscarb}") || hearthType.get(1).equals("{hsclay}") || hearthType.get(1).equals("{hsother}") || hearthType.get(1).equals("{hsindet}")) {
          removeHeatRetainer = false;
        } else {
          removeHeatRetainer = true;
        }
        if (hearthType.get(1).equals("{emupat}") || hearthType.get(1).equals("{bakedclay}") || hearthType.get(1).equals("{bakedsed}") || hearthType.get(1).equals("{ashlens}") || hearthType.get(1).equals("{ashpatch}") || hearthType.get(1).equals("{charclens}") || hearthType.get(1).equals("{staining}") || hearthType.get(1).equals("{other}")) {
          removeNonHeatRetainer = false;
        } else {
          removeNonHeatRetainer = true;
        }
      }
    }
    // update dynamic views
    displayDynamicViews();
    removeDynamicViews();
  }

  /** Displays the flagged dynamic vieiws **/
  displayDynamicViews() {
    String tabgroup = entityTabgroup;
    if (!removeBriefDescription) {
      if (!hasView(tabgroup+"/basicIdentification/briefDescription")) {
        executeViewTask(new ViewTask(){
          doTask() {
            viewDef = createViewDef();
            viewDef.createTextField().setLabel("{hearthUI_briefDescription}").setAttributeName("Hearth_-_Brief_description").setAttributeType("measure").setAnnotationEnabled(true).setCertaintyEnabled(true).setInfoEnabled(true);
            createView(tabgroup+"/basicIdentification/briefDescription", viewDef);
          }
        });
      }
    }
    if (!removeHeatRetainer) {
      if (!hasView(tabgroup+"/hearthStructure/heatRetainer")) {
        makeDynamicVocab("CheckBoxGroup", tabgroup+"/hearthStructure/heatRetainer", "Hearth_-_Modification_of_heat-retainer_hearths", "{hearthUI_heatRetainer}", null, tabgroup+"/hearthStructure/heatRetainer", "Hearth_-_Modification_of_heat-retainer_hearths", "vocab");
      }
    }
    if (!removeNonHeatRetainer) {
      if (!hasView(tabgroup+"/hearthStructure/nonHeatRetainer")) {
        makeDynamicVocab("DropDown", tabgroup+"/hearthStructure/nonHeatRetainer", "Hearth_-_Modification_of_non-heat_retainer_hearths", "{hearthUI_nonHeatRetainer}", null, tabgroup+"/hearthStructure/nonHeatRetainer", "Hearth_-_Modification_of_non-heat_retainer_hearths", "vocab");
      }
    }
  }

  /** Removes the flagged dynamic views **/
  removeDynamicViews() {
    String tabgroup = entityTabgroup;
    if (removeBriefDescription) {
      if (hasView(tabgroup+"/basicIdentification/briefDescription")) {
        removeView(tabgroup+"/basicIdentification/briefDescription");
      }
    }
    if (removeHeatRetainer) {
      if (hasView(tabgroup+"/hearthStructure/heatRetainer")) {
        removeView(tabgroup+"/hearthStructure/heatRetainer");
      }
    }
    if (removeNonHeatRetainer) {
      if (hasView(tabgroup+"/hearthStructure/nonHeatRetainer")) {
        removeView(tabgroup+"/hearthStructure/nonHeatRetainer");
      }
    }
  }

  /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("HierarchicalDropDown" , entityTabgroup + "/basicIdentification/" + "hearthType"        , "Hearth_-_Hearth_Type");
    makeVocab("DropDown"             , entityTabgroup + "/basicIdentification/" + "charcoal"          , "Hearth_-_Charcoal");
    makeVocab("PictureGallery"       , entityTabgroup + "/hearthStructure/" + "insituProportion"      , "Hearth_-_Proportion_of_material_that_remains_in_situ");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/topographicSetting"      , "Hearth_-_Topographic_Setting");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/sedimentType"            , "Hearth_-_Sediment_Type");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/stratigraphicUnit"       , "Hearth_-_Stratigraphic_Unit");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/erosionVulnerability"    , "Hearth_-_Vulnerability_To_Erosion");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/paleotopographicSetting" , "Hearth_-_Palaeotopographic_Setting");
    fetchVocabulary("Hearth_-_Hearth_Type", hearthTypeVocabulary);
  }

  /** Populates the in-situ and surface associated materials list. **/
  listAssociatedMaterials() {
    listAssociatedMaterials(entityTabgroup+"/associatedMaterials/associatedMaterialList", id, hearthAssoc.archentType, relTypeName);
  }

  onEvent(entityTabgroup                                                 , "show"       , "hearth.save();");
  onEvent(entityTabgroup + "/associatedMaterials"                        , "show"       , "hearth.listAssociatedMaterials();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedMaterialList" , "click"      , "hearthAssoc.load()");
  onEvent(entityTabgroup + "/associatedMaterials/recordMaterial"         , "delayclick" , "hearthAssoc.create();");
  onEvent(entityTabgroup + "/basicIdentification/calculateGridSquare"    , "click"      , "calculateGridSquare(hearth.id        , hearth.entityTabgroup , \""+entityTabgroup+"/basicIdentification/gridSquare\");");
  onEvent(entityTabgroup + "/basicIdentification/hearthType"             , "click"      , "hearth.checkHearthType();");

  return this;
}
hearth = hearthFeature();
hearth.init();


/*** HEARTH ASSOCIATED MATERIALS ***/
hearthAssociatedMaterials() {
  String tabgroup = "hearthAssociatedMaterials";
  String archentType = "Hearth Associated Materials";
  String relTypeName = hearth.relTypeName;
  String id = null;
  Boolean loading = false;
  Boolean removeLacust = true;
  Boolean removeTerrestrial = true;
  Boolean removeEggshell = true;
  Boolean removeStone = true;
  Boolean removeOther = true;
  Boolean removeChippedStone = true;
  Boolean removeRetouchedStone = true;
  Boolean removeUnmodifiedStone = true;
  Boolean removeGroundStone = true;
  List assocMaterialVocabulary = new ArrayList();
  List stoneArtefactsVocabulary = new ArrayList();
  List chippedStoneVocabulary = new ArrayList(); 

  /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("CheckBoxGroup", tabgroup+"/nearbyMaterial/assocMaterial", "HearthAssoc_-_Associated_material");
    fetchVocabulary("HearthAssoc_-_Associated_material", assocMaterialVocabulary);
    fetchVocabulary("HearthAssoc_-_Associated_stone_artefacts", stoneArtefactsVocabulary);
    fetchVocabulary("HearthAssoc_-_Associated_chipped_stone_artefacts", chippedStoneVocabulary);
  }

  /** Saves the associated materials record. **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(tabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("hearthAssociatedMaterials.save()", "Saving the relation between hearth " + hearth.id + " and " + tabgroup + " " + id);
        String callback = "hearth.listAssociatedMaterials();" + "showTab(\"hearth/associatedMaterials\");";
        saveEntitiesToRel(relTypeName, hearth.id, id, callback);
      }
    }, enable_autosave);
  }

  /** Loads the hearth associated materials record. **/
  load() {
    String selectedID = getListItemValue();
    if (!isNull(selectedID) && !selectedID.equals("placeholder")) {
      Log.d("load()", "Preparing to load associated material with ID: " + selectedID);
      id = selectedID;
      loading = true;
      removeAllViewsAndContainers(tabgroup);
      renderControlTab();
    }
  }

  /** Creates a hearth associated materials record. **/
  create() {
    if (!isNull(hearth.id)) {
      fetchOne("select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = '"+archentType+"' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+hearth.id+" " +
        "and relntypeName = '"+relTypeName+"') " +
        "and uuid != "+hearth.id+");",  new FetchCallback() {
        onFetch(result) {
          if(isNull(result)) {
            id = null;
            removeAllViewsAndContainers(tabgroup);
            newTabGroup(tabgroup);
            renderControlTab();
          } else {
            showToast("Only one associated material can be recorded");
          }
        }
      });
    }
  }

  /** Retrieves the dynamic associated material selection or null if it does not exist. **/
  List getSelectedAssocMaterial() {
    return getFieldValue(tabgroup+"/nearbyMaterial/assocMaterial");
  }

  /** Display the associated material list and attach a callback to render the other tabs when appropriate. **/
  renderControlTab() {
    renderAssocTabs();
    if (loading) {
      Log.d("renderControlTab()", "Preparing to load");
      loadAssocCallback();
    }
  }

  /** Displays the associated material tabs when appropriate. **/
  renderAssocTabs() {
    selectedAssocMaterial = getSelectedAssocMaterial();
    if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty()) {
      for (selectedItem : selectedAssocMaterial) {
        for (type : assocMaterialVocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            Log.d("renderAssocTabs()", "Selected "+tabgroup+" "+type.get(1));
            if (type.get(1).equals("{lacust}")) {
              if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocLacust")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedLacustrineMaterial/assocLacust", "HearthAssoc_-_Associated_lacustrine_material", "{hearthAssociatedMaterialsUI_assocLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocLacust", "HearthAssoc_-_Associated_lacustrine_material", "vocab");
              }
              if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocBurntLacust")) {
                makeDynamicVocab("RadioGroup", tabgroup+"/associatedLacustrineMaterial/assocBurntLacust", "HearthAssoc_-_Burnt_lacustrine_material", "{hearthAssociatedMaterialsUI_assocBurntLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocBurntLacust", "HearthAssoc_-_Burnt_lacustrine_material", "vocab");
              }
              removeLacust = false;
            } else if(type.get(1).equals("{terrbone}")) {
              if (!hasView(tabgroup+"/associatedTerrestrialBone/assocTerrestrial")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "HearthAssoc_-_Associated_terrestrial_bone", "{hearthAssociatedMaterialsUI_assocTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "HearthAssoc_-_Associated_terrestrial_bone", "vocab");
              }
              if (!hasView(tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial")) {
                makeDynamicVocab("RadioGroup", tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial", "HearthAssoc_-_Burnt_terrestrial_bone", "{hearthAssociatedMaterialsUI_assocBurntTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial", "HearthAssoc_-_Burnt_terrestrial_bone", "vocab");
              }
              removeTerrestrial = false;
            } else if(type.get(1).equals("{eggshell}")) {
              if (!hasView(tabgroup+"/associatedEggshell/assocEggshell")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedEggshell/assocEggshell", "HearthAssoc_-_Associated_eggshell", "{hearthAssociatedMaterialsUI_assocEggshell}", null, tabgroup+"/associatedEggshell/assocEggshell", "HearthAssoc_-_Associated_eggshell", "vocab");
              }
              if (!hasView(tabgroup+"/associatedEggshell/assocBurntEggshell")) {
                makeDynamicVocab("RadioGroup", tabgroup+"/associatedEggshell/assocBurntEggshell", "HearthAssoc_-_Burnt_eggshell", "{hearthAssociatedMaterialsUI_assocBurntEggshell}", null, tabgroup+"/associatedEggshell/assocBurntEggshell", "HearthAssoc_-_Burnt_eggshell", "vocab");
              }
              removeEggshell = false;
            } else if(type.get(1).equals("{stoneart}")) {
              if (!hasView( tabgroup+"/associatedStoneArtefacts/assocStone")) {
                String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocStone\", \"click\", \"hearthAssoc.updateDynamicAssociatedStone();\");";
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocStone", "HearthAssoc_-_Associated_stone_artefacts", "{hearthAssociatedMaterialsUI_assocStone}", callback, tabgroup+"/associatedStoneArtefacts/assocStone", "HearthAssoc_-_Associated_stone_artefacts", "vocab");
              }
              removeStone = false;
            } else if(type.get(1).equals("{otherwork}")) {
              if (!hasView(tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "HearthAssoc_-_Associated_other_worked_(or_transported)_material", "{hearthAssociatedMaterialsUI_assocOtherwork}", null, tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "HearthAssoc_-_Associated_other_worked_(or_transported)_material", "vocab");
              }
              removeOther = false;
            } else {
              Log.e("renderAssocTabs()", "Error: no matched insitu selected");
            }
          }
        }
      } 
    }
    // show and cancel the appropriate associated material tabs.
    onShowAssociatedMaterials();
  }

  /** Shows or cancels the associated material tabs. **/
  onShowAssociatedMaterials() {
    Boolean tabChanged = false;

    // if the tab show is triggered after loading, don't execute the rest of this function.
    if (loading) {
      Log.d("onShowAssociatedMaterials()", "Exiting function, loading associated material");
      return;
    }
    // remove unselected tabs
    if (removeLacust) {
      cancelTab(tabgroup+"/associatedLacustrineMaterial", false);
    }
    if (removeTerrestrial) {
      cancelTab(tabgroup+"/associatedTerrestrialBone", false);
    } 
    if (removeEggshell) {
      cancelTab(tabgroup+"/associatedEggshell", false);
    }
    if (removeStone) {
      cancelTab(tabgroup+"/associatedStoneArtefacts", false);
    }
    if (removeOther) {
      cancelTab(tabgroup+"/associatedOtherWorkedMaterial", false);
    }
    // show the selected tabs
    if (!removeLacust) {
      showTab(tabgroup+"/associatedLacustrineMaterial");
      removeLacust = true;
      tabChanged = true;
    }   
    if (!removeTerrestrial) {
      showTab(tabgroup+"/associatedTerrestrialBone");
      removeTerrestrial = true;
      tabChanged = true;
    }
    if (!removeEggshell) {
      showTab(tabgroup+"/associatedEggshell");
      removeEggshell = true;
      tabChanged = true;
    } 
    if (!removeStone) {
      showTab(tabgroup+"/associatedStoneArtefacts");
      removeStone = true;
      tabChanged = true;
    } 
    if (!removeOther) {
      showTab(tabgroup+"/associatedOtherWorkedMaterial");
      removeOther = true;
      tabChanged = true;
    }
    // switch to the control tab and save the tabgroup
    if (tabChanged) {
      showTab(tabgroup+"/nearbyMaterial");
    }
    hearthAssoc.save();
  }

  loadAssocCallback() {
    // render the default views for each associated material tab
    if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocLacust")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedLacustrineMaterial/assocLacust", "HearthAssoc_-_Associated_lacustrine_material", "{hearthAssociatedMaterialsUI_assocLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocLacust", "HearthAssoc_-_Associated_lacustrine_material", "vocab");
    }
    if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocBurntLacust")) {
      makeDynamicVocab("RadioGroup", tabgroup+"/associatedLacustrineMaterial/assocBurntLacust", "HearthAssoc_-_Burnt_lacustrine_material", "{hearthAssociatedMaterialsUI_assocBurntLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocBurntLacust", "HearthAssoc_-_Burnt_lacustrine_material", "vocab");
    }
    removeLacust = false;
    if (!hasView(tabgroup+"/associatedTerrestrialBone/assocTerrestrial")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "HearthAssoc_-_Associated_terrestrial_bone", "{hearthAssociatedMaterialsUI_assocTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "HearthAssoc_-_Associated_terrestrial_bone", "vocab");
    }
    if (!hasView(tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial")) {
      makeDynamicVocab("RadioGroup", tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial", "HearthAssoc_-_Burnt_terrestrial_bone", "{hearthAssociatedMaterialsUI_assocBurntTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial", "HearthAssoc_-_Burnt_terrestrial_bone", "vocab");
    }
    removeTerrestrial = false;
    if (!hasView(tabgroup+"/associatedEggshell/assocEggshell")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedEggshell/assocEggshell", "HearthAssoc_-_Associated_eggshell", "{hearthAssociatedMaterialsUI_assocEggshell}", null, tabgroup+"/associatedEggshell/assocEggshell", "HearthAssoc_-_Associated_eggshell", "vocab");
    }
    if (!hasView(tabgroup+"/associatedEggshell/assocBurntEggshell")) {
      makeDynamicVocab("RadioGroup", tabgroup+"/associatedEggshell/assocBurntEggshell", "HearthAssoc_-_Burnt_eggshell", "{hearthAssociatedMaterialsUI_assocBurntEggshell}", null, tabgroup+"/associatedEggshell/assocBurntEggshell", "HearthAssoc_-_Burnt_eggshell", "vocab");
    }
    removeEggshell = false;
    if (!hasView( tabgroup+"/associatedStoneArtefacts/assocStone")) {
      String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocStone\", \"click\", \"hearthAssoc.renderTabgroup();\");";
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocStone", "HearthAssoc_-_Associated_stone_artefacts", "{hearthAssociatedMaterialsUI_assocStone}", callback, tabgroup+"/associatedStoneArtefacts/assocStone", "HearthAssoc_-_Associated_stone_artefacts", "vocab");
    }
    removeStone = false;
    if (!hasView(tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "HearthAssoc_-_Associated_other_worked_(or_transported)_material", "{hearthAssociatedMaterialsUI_assocOtherwork}", null, tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "HearthAssoc_-_Associated_other_worked_(or_transported)_material", "vocab");
    }
    removeOther = false;
    // render the 'selection-dependent' views for the stone tab
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
      String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocChippedStone\", \"click\", \"hearthAssoc.renderTabgroup();\");";
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "{hearthAssociatedMaterialsUI_assocChippedStone}", callback, tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "vocab");
    }
    removeChippedStone = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "{hearthAssociatedMaterialsUI_assocRetouchedStone}", null, tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "vocab");
    }
    removeRetouchedStone = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "{hearthAssociatedMaterialsUI_assocUnmodifiedStone}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "vocab");
    }
    removeUnmodifiedStone = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "{hearthAssociatedMaterialsUI_assocGroundStoneType}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "vocab");
    }
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "{hearthAssociatedMaterialsUI_assocGroundStoneStatus}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "vocab");
    }
    removeGroundStone = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRawMaterial", "HearthAssoc_-_Raw_material_types_present", "{hearthAssociatedMaterialsUI_assocRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocRawMaterial", "HearthAssoc_-_Raw_material_types_present", "vocab");
    }    
    // load the saved values into the rendered views
    dialog = showBusy("loading record", "please wait");
    showTabGroup(tabgroup, id, new FetchCallback() {
      onFetch(result) {
        // print("loaded assoc: " + result + " with attributes: " + result.getAttributes());
        removeUnselectedMaterials();
        dialog.dismiss();
      }
    });
  }

  /** Removes the tabs for unselected materials when loading. **/
  removeUnselectedMaterials() {
    // only perform the removal if the associated materials are being loaded.
    if (!loading) {
      return;
    }
    Log.d("removeUnselectedMaterials()", "Removing unseletected materials from loaded associated material.");
    // get the selected material list values 
    selectedAssocMaterial = getSelectedAssocMaterial();
    if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty())
    {
      removeLacust = true;
      removeTerrestrial = true;
      removeEggshell = true;
      removeStone = true;
      removeOther = true;
      // flag the selected values which shouldn't be removed.
      for (selectedItem : selectedAssocMaterial) {
        for (type : assocMaterialVocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            if (type.get(1).equals("{lacust}")) {
              removeLacust = false;
            } else if(type.get(1).equals("{terrbone}")) {
              removeTerrestrial = false;
            } else if(type.get(1).equals("{eggshell}")) {
              removeEggshell = false;
            } else if(type.get(1).equals("{stoneart}")) {
              removeStone = false;
            } else if(type.get(1).equals("{otherwork}")) {
              removeOther = false;
            } else {
              Log.e("removeUnselectedMaterials()", "Error: no matched insitu selected");
            }
          }
        }
      }
      // remove the appropriate selection-dependent views for the tabs that aren't going to be removed.
      if (!removeStone) {
        removeChippedStone = true;
        removeUnmodifiedStone = true;
        removeGroundStone = true;
        assocStones = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocStone");
        for (selectedItem : assocStones) {
          for (type : stoneArtefactsVocabulary) {
            if (selectedItem.getName().equals(type.get(0))) {
              if (type.get(1).equals("{cs}")) {
                removeChippedStone = false;
              } else if (type.get(1).equals("{um}")) {
                removeUnmodifiedStone = false;
              } else if (type.get(1).equals("{ground}")) {
                removeGroundStone = false;
              } else {
                Log.e("removeUnselectedMaterials", "Error: no stone artefact selected");
              }
            }
          }
        }
        removeDynamicAssociatedStone();
        removeRetouchedArtefacts = true;
        if (!removeChippedStone) {
          chippedStone = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
          for (selectedItem : chippedStone) {
            for (type : chippedStoneVocabulary) {
              if (selectedItem.getName().equals(type.get(0))) {
                if (type.get(1).equals("{ru}")) {
                  removeRetouchedStone = false;
                }
              }
            }
          }
        }
        removeRetouchedArtefacts();
      }
      // remove the unselected tabs, switching the load flag mark that the 'loading' process has finished.
      loading = false;
      onShowAssociatedMaterials();
    }
  }

  /** Detect and display the relevent associated stone artefact views. **/
  updateDynamicAssociatedStone() {
    removeChippedStone = true;
    removeUnmodifiedStone = true;
    removeGroundStone = true;
    assocStones = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocStone");
    // compare each selected artefact against the stone artefact vocab to determine which one(s) the user selected
    for (selectedItem : assocStones) {
      for (type : stoneArtefactsVocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          if (type.get(1).equals("{cs}")) {
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
              String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocChippedStone\", \"click\", \"hearthAssoc.renderAssocTabs();\");";
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "{hearthAssociatedMaterialsUI_assocChippedStone}", callback, tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "vocab");
            }
            // if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
            //   makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "{oldBoneUI_assocChippedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "vocab");  
            // }
            removeChippedStone = false;
          } else if (type.get(1).equals("{um}")) {
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "{hearthAssociatedMaterialsUI_assocUnmodifiedStone}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "vocab");
            }
            // if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
            //   makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "{oldBoneUI_assocUnmodifiedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "vocab");  
            // } 
            removeUnmodifiedStone = false;
          } else if (type.get(1).equals("{ground}")) {
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "{hearthAssociatedMaterialsUI_assocGroundStoneType}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "vocab");
            }
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "{hearthAssociatedMaterialsUI_assocGroundStoneStatus}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "vocab");
            }
            // if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
            //   makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "{oldBoneUI_assocGroundRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "vocab");  
            // }
            removeGroundStone = false;
          } else {
            Log.e("updateDynamicAssociatedStone", "Error: no stone artefact selected");
          }
        }
      }    
    }
    // remove the appropriate dynamic views.
    removeDynamicAssociatedStone();
  }

  /** Removes the relevent associated stone artefact views. **/
  removeDynamicAssociatedStone() {
    if (removeChippedStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
        if (hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
          removeView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone");
        }
      }
      // if (hasView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
      //   removeView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial");
      // }
    }
    if (removeUnmodifiedStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone");
      }
      // if (hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
      //   removeView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial");
      // }
    }
    if (removeGroundStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType");
      }
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus");
      }
      // if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
      //   removeView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial");
      // }
    }
    if (hasView(view = tabgroup+"/associatedStoneArtefacts/assocRawMaterial")) {
      removeView(view = tabgroup+"/associatedStoneArtefacts/assocRawMaterial");
    } 
  }

  /** Displays the associated retouched artefacts view for associated stone artefacts **/
  updateDynamicChippedStone() {
    chippedStone = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
    removeRetouchedArtefacts = true;
    for (selectedItem : chippedStone) {
      for (type : chippedStoneVocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          if (type.get(1).equals("{ru}")) {
            Log.d("updateDynamicChippedStone", "ru selected");
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
            makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "{hearthAssociatedMaterialsUI_assocRetouchedStone}", null, tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "vocab");
          }
            removeRetouchedStone = false;
          }
        }
      }
    }
    removeRetouchedArtefacts();
  }

  /** Removes the retouched artefacts view if appropriate. **/
  removeRetouchedArtefacts() {
    if (removeRetouchedStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone");
      }
    }
  }
  
  onEvent(tabgroup, "show", "hearthAssoc.onShowAssociatedMaterials(); keepTabGroupChanges(\""+tabgroup+"\"); hearthAssoc.save();");
  onEvent(tabgroup+"/nearbyMaterial/assocMaterial", "click", "hearthAssoc.renderAssocTabs();");

  return this;
}
hearthAssoc = hearthAssociatedMaterials();
hearthAssoc.init();

/*** OLD BONE FEATURE ***/
oldboneFeature() {
  String entityTabgroup = "oldBone";
  String archentType = "Old Bone";
  String desc = archentType + " record";
  String id = null;
  String insituRelTypeName = "Old Bone And Associated Insitu Materials";
  String surfaceRelTypeName = "Old Bone And Associated Surface Materials";
  String assocInsituTabgroup = "oldboneAssociatedInsituMaterials";
  String assocSurfaceTabgroup = "oldboneAssociatedSurfaceMaterials";
  List clusterTypeVocabulary = new ArrayList();

  /** Saves the feature **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(entityTabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("save()", desc + " saved with id: " + id);
        if (newRecord) {
          Log.d("save()", "New " + desc + " created");
        }
      }
      onError(message) {
          showToast(message);
      }  
    }, enable_autosave);
  }

  /** Creates a new feature record. **/
  create() {
    dialog = showBusy("creating a new record", "please wait");
    newTabGroup(entityTabgroup);
    id = null;
    setFieldValue(entityTabgroup + "/basicIdentification/idNumber", "0");
    setFieldValue(entityTabgroup + "/basicIdentification/gridSquare", "0");
    keepTabGroupChanges(entityTabgroup);
    save();
    dialog.dismiss();
  }

  /** Loads a feature record. **/
  load() {
    if (isNull(id)) {
      showToast("No entity selected");
      return;
    }
    dialog = showBusy("loading record", "please wait");
    showTabGroup(entityTabgroup, id, new FetchCallback() {
      onFetch(result) {
        Log.d("load()", "Loaded a " + desc + ", ID: " + id);
        showToast("Loaded a " + desc);
        checkClusterType();
        keepTabGroupChanges(entityTabgroup);
        dialog.dismiss();
      }
    });
  }

  /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("HierarchicalDropDown" , entityTabgroup + "/basicIdentification/clusterType"                    , "OldBone_-_Cluster_Type");
    makeVocab("CheckBoxGroup"        , entityTabgroup + "/insituAndSurfaceBone/bodyPartsIdentified"           , "OldBone_-_Body_Parts_Identifed");
    makeVocab("CheckBoxGroup"        , entityTabgroup + "/insituAndSurfaceBone/taxonIdentified"               , "OldBone_-_Taxon_Identified");
    makeVocab("CheckBoxGroup"        , entityTabgroup + "/insituAndSurfaceBone/bonePreservation"              , "OldBone_-_Bone_Preservation");
    makeVocab("CheckBoxGroup"        , entityTabgroup + "/insituAndSurfaceBone/deliberateSurfaceModification" , "OldBone_-_Deliberate_Surface_Modification");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/topographicSetting"              , "OldBone_-_Topographic_Setting");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/sedimentType"                    , "OldBone_-_Sediment_Type");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/stratigraphicUnit"               , "OldBone_-_Stratigraphic_Unit");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/erosionVulnerability"            , "OldBone_-_Vulnerability_To_Erosion");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/paleotopographicSetting"         , "OldBone_-_Palaeotopographic_Setting");
    fetchVocabulary("OldBone_-_Cluster_Type", clusterTypeVocabulary);
  }

  /** Populates the in-situ and surface associated materials list. **/
  listAssociatedMaterials() {
    listAssociatedMaterials(entityTabgroup+"/associatedMaterials/associatedInsituList", id, oldboneAssoc.insituArchentType, insituRelTypeName);
    listAssociatedMaterials(entityTabgroup+"/associatedMaterials/associatedSurfaceList", id, oldboneAssoc.surfaceArchentType, surfaceRelTypeName);
  }

  /** Displays the insitu proportion view. **/
  displayInsituProportion() {
    String selectedItem = getFieldValue("oldBone/basicIdentification/clusterType");
    if (isNull(selectedItem)) {
      Log.e("updateInsituProportion()", "Null field value for: \"oldBone/basicIdentification/clusterType\"");
      return;
    } else if (clusterTypeVocabulary == null) {
      Log.e("updateInsituProportion()", "Null value for: \"clusterTypeVocabulary\"");
      return;
    }
    String dynamicView = "oldBone/insituAndSurfaceBone/insituProportion";
    Boolean removeDynamicView = true;
    // iterate through the cluster type vocab and display the insitu proportion view if insitu values are seletced
    for (clusterType : clusterTypeVocabulary) {
      if (selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{insitBO}") || clusterType.get(1).equals("{insitAndSurf}") || clusterType.get(1).equals("{inistAndOth}") || clusterType.get(1).equals("{bothAndOth}"))) {
        removeDynamicView = false;
        if (!hasView(dynamicView)) {
          String vocab = "OldBone_-_Proportion_of_material_that_remains_in_situ";
          makeDynamicVocab("PictureGallery", dynamicView, vocab, "{oldBoneUI_insituProportion}", null, "oldBone/insituAndSurfaceBone/insituProportion", vocab, "vocab"); 
          Log.d("displayInsituProportion()", "Making insituProportion picture gallery");
        }
      }
    }
    if (removeDynamicView) {
      if (hasView(dynamicView)) {
        removeView(dynamicView);
      }
    }
  }

  checkClusterType() {
    String selectedItem = getFieldValue("oldBone/basicIdentification/clusterType");
    Boolean showAssocTab = false;
    for (clusterType : clusterTypeVocabulary) {
      if (!isNull(selectedItem) && selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{boneAndOtherMaterial}") || clusterType.get(1).equals("{inistAndOth}") || clusterType.get(1).equals("{surfAndOth}") || clusterType.get(1).equals("{bothAndOth}"))) {
        showAssocTab = true;
      }
    }
    if (showAssocTab) {
      Log.d("oldBone.checkClusterType()", "Showing associated materials tab");
      showTab("oldBone/associatedMaterials");
      showTab("oldBone/basicIdentification");
    } else {
      Log.d("oldBone.checkClusterType()", "Cancelling associated materials tab");
      cancelTab("oldBone/associatedMaterials", false);
    }
  }

  onEvent(entityTabgroup, "show", "oldbone.save(); oldbone.checkClusterType();");
  onEvent(entityTabgroup + "/associatedMaterials", "show", "oldbone.listAssociatedMaterials();");
  onEvent(entityTabgroup + "/basicIdentification/calculateGridSquare", "click", "calculateGridSquare(oldbone.id, oldbone.entityTabgroup, \""+entityTabgroup+"/basicIdentification/gridSquare\");");
  onEvent(entityTabgroup + "/basicIdentification/clusterType", "click", "oldbone.displayInsituProportion(); oldbone.checkClusterType();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedSurfaceList", "click", "showToast(\"Placeholder for loading an associated material\");");
  onEvent(entityTabgroup + "/associatedMaterials/recordInsituMaterial", "click", "oldboneAssoc.isInsituMaterial=true; oldboneAssoc.create();");
  onEvent(entityTabgroup + "/associatedMaterials/recordSurfaceMaterial", "click", "oldboneAssoc.isInsituMaterial=false; oldboneAssoc.create();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedInsituList", "click", "oldboneAssoc.isInsituMaterial=true; oldboneAssoc.load();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedSurfaceList", "click", "oldboneAssoc.isInsituMaterial=false; oldboneAssoc.load();");

  return this;
}
oldbone = oldboneFeature();
oldbone.init();

/*** OLDBONE ASSOCIATED MATERIALS ***/
oldboneAssociatedMaterials() {
  String insituTabgroup = "oldboneAssociatedInsituMaterials";
  String insituArchentType = "Old Bone Associated Insitu Materials";
  String insituRelTypeName = "Old Bone And Associated Insitu Materials";
  String surfaceTabgroup = "oldboneAssociatedSurfaceMaterials";
  String surfaceArchentType = "Old Bone Associated Surface Materials";
  String surfaceRelTypeName = "Old Bone And Associated Surface Materials";
  String id = null;
  Boolean loading = false;
  Boolean isInsituMaterial = true;
  Boolean removeAssocMussel = true;
  Boolean removeAssocHearth = true;
  Boolean removeAssocEggshell = true;
  Boolean removeAssocStone = true;
  Boolean removeAssocOther = true;
  Boolean removeChippedStone = true;
  Boolean removeUnmodifiedStone = true;
  Boolean removeGroundStone = true;
  Boolean removeRetouchedArtefacts = true;
  List insituMaterialVocabulary = new ArrayList();
  List surfaceMaterialVocabulary = new ArrayList();
  List stoneArtefactsVocabulary = new ArrayList();
  List chippedStoneVocabulary = new ArrayList();

  init() {
    fetchVocabulary("OldBone_-_Associated_in_situ_material", insituMaterialVocabulary);
    fetchVocabulary("OldBone_-_Associated_surface_material", surfaceMaterialVocabulary);
    fetchVocabulary("OldBone_-_Associated_Stone_Artefacts", stoneArtefactsVocabulary);
    fetchVocabulary("OldBone_-_Associated_Chipped_Stone_Artefacts", chippedStoneVocabulary);
  }

  /** Saves the old bone associated materials record. **/
  save() {
    String tabgroup = insituTabgroup;
    String relTypeName = insituRelTypeName;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
      relTypeName = surfaceRelTypeName;
    }
    Boolean enable_autosave = true;
    saveTabGroup(tabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("oldboneAssociatedMaterials.save()", "Saving the relation between oldBone " + oldbone.id + " and " + tabgroup + " " + id);
        String callback = "oldbone.listAssociatedMaterials();" + "showTab(\"oldBone/associatedMaterials\");";
        saveEntitiesToRel(relTypeName, oldbone.id, id, callback);
      }
    }, enable_autosave);
  }

  /** Loads the old bone associated materials record. **/
  load() {
    String tabgroup = insituTabgroup;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
    }
    String selectedID = getListItemValue();
    if (!isNull(selectedID) && !selectedID.equals("placeholder")) {
      Log.d("load()", "Preparing to load associated material with ID: " + selectedID);
      id = selectedID;
      loading = true;
      removeAllViewsAndContainers(tabgroup);
      renderControlTab();
    }
  }

  /** Creates an old bone associated materials record. **/
  create() {
    if (!isNull(oldbone.id)) {
      String tabgroup = insituTabgroup;
      String archentType = insituArchentType;
      String relTypeName = insituRelTypeName;
      if (!isInsituMaterial) {
        tabgroup = surfaceTabgroup;
        archentType = surfaceArchentType;
        relTypeName = surfaceRelTypeName;
      }
      fetchOne("select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = '"+archentType+"' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+oldbone.id+" " +
        "and relntypeName = '"+relTypeName+"') " +
        "and uuid != "+oldbone.id+");",  new FetchCallback() {
        onFetch(result) {
          if(isNull(result)) {
            id = null;
            removeAllViewsAndContainers(tabgroup);
            newTabGroup(tabgroup);
            renderControlTab();
          } else {
            String type = "insitu";
            if (!isInsituMaterial) {
              type = "surface";
            }
            showToast("Only one associated "+type+" material can be recorded");
          }
        }
      });
    }
  }

  /** Retrieves the dynamic associated material selection or null if it does not exist. **/
  List getSelectedAssocMaterial() {
    String dynamicView = insituTabgroup+"/nearbyMaterial/assocInsituMaterial";;
    if (!isInsituMaterial) {
      dynamicView = surfaceTabgroup+"/nearbyMaterial/assocSurfaceMaterial";
    }
    if (hasView(dynamicView)) {
      return getFieldValue(dynamicView);
    } else {
      Log.e("getSelectedAssocMaterial()", "No dynamic view "+dynamicView+" exists");
      return null;
    }
  }

  /** Display the associated material list and attach a callback to render the other tabs when appropriate. **/
  renderControlTab() {
    String tabgroup = insituTabgroup;
    String dynamicView = insituTabgroup+"/nearbyMaterial/assocInsituMaterial";
    String vocab = "OldBone_-_Associated_in_situ_material";
    String label = "{oldBoneUI_assocInsituMaterial}";
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
      dynamicView = surfaceTabgroup+"/nearbyMaterial/assocSurfaceMaterial";
      vocab = "OldBone_-_Associated_surface_material";
      label = "{oldBoneUI_assocSurfaceMaterial}";
    }
    if (!hasView(dynamicView)) {
      String callback = "onEvent(\""+dynamicView+"\", \"click\", \"oldboneAssoc.renderAssocTabs();\"); oldboneAssoc.renderAssocTabs();";
      Log.d("renderControlTab()", "Making the dynamic view "+dynamicView+", as it doesn't exist");
      makeDynamicVocab("CheckBoxGroup", dynamicView, vocab, label, callback, null, vocab, "vocab");
      // Log.d("renderControlTab()", "Attached callback: " + callback);
      if (loading) {
        Log.d("renderControlTab()", "Preparing to load");
        loadAssocCallback();
      }
    } else {Log.d("renderControlTab()", "Not making dynamic view "+dynamicView+", as it already exists");}
  }

  /** Displays the associated material tabs when appropriate. **/
  renderAssocTabs() {
    selectedAssocMaterial = getSelectedAssocMaterial();
    if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty()) {
      String tabgroup = insituTabgroup;
      List vocabulary = insituMaterialVocabulary;
      if (!isInsituMaterial) {
        tabgroup = surfaceTabgroup;
        vocabulary = surfaceMaterialVocabulary;
      }
      for (selectedItem : selectedAssocMaterial) {
        // render the associated material dynamic views
        for (type : vocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            Log.d("renderAssocTabs()", "Selected "+tabgroup+" "+type.get(1));
            if (type.get(1).equals("{mussel}")) {
              if (!hasView(tabgroup+"/associatedMussel/bivalvePreservation")) {
                makeDynamicVocab("RadioGroup", tabgroup+"/associatedMussel/bivalvePreservation", "OldBone_-_Bivalve_preservation", "{oldBoneUI_assocBivalvePreservation}", null, tabgroup+"/associatedMussel/assocMussel", "OldBone_-_Bivalve_preservation", "vocab");
              }
              removeAssocMussel = false;
            } else if(type.get(1).equals("{hs}")) {
              if (!hasView(tabgroup+"/associatedHearthMaterial/assocHearth")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedHearthMaterial/assocHearth", "OldBone_-_Associated_Hearth_Material", "{oldBoneUI_assocHearth}", null, tabgroup+"/associatedHearthMaterial/assocHearth", "OldBone_-_Associated_Hearth_Material", "vocab");
              }
              removeAssocHearth = false;
            } else if(type.get(1).equals("{eggshell}")) {
              if (!hasView(tabgroup+"/associatedEggshell/assocEggshell")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedEggshell/assocEggshell", "OldBone_-_Associated_Eggshell", "{oldBoneUI_assocEggshell}", null, tabgroup+"/associatedEggshell/assocEggshell", "OldBone_-_Associated_Eggshell", "vocab");
              }
              removeAssocEggshell = false;
            } else if(type.get(1).equals("{stoneart}")) {
              String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocStone\", \"click\", \"oldboneAssoc.updateDynamicAssociatedStone();\");";
              if (!hasView(tabgroup+"/associatedStoneArtefacts/assocStone")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocStone", "OldBone_-_Associated_Stone_Artefacts", "{oldBoneUI_assocStone}", callback, tabgroup+"/associatedStoneArtefacts/assocStone", "OldBone_-_Associated_Stone_Artefacts", "vocab");
              }
              removeAssocStone = false;
            } else if(type.get(1).equals("{otherart}")) {
              if (!hasView(tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork")) {
                  makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "OldBone_-_Associated_Other_Artefacts", "{oldBoneUI_assocOtherwork}", null, tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "OldBone_-_Associated_Other_Artefacts", "vocab");
              }
              removeAssocOther = false;
            } else {
              Log.e("renderAssocTabs()", "Error: no matched insitu selected");
            }
          }
        }
      } 
    }
    // show and cancel the appropriate associated material tabs.
    onShowAssociatedMaterials();
  }

  /** Shows or cancels the associated material tabs. **/
  onShowAssociatedMaterials() {
    // if the tab show is triggered after loading, don't execute the rest of this function.
    if (loading) {
      Log.d("onShowAssociatedMaterials()", "Exiting function, loading associated material");
      return;
    }
    String tabgroup = insituTabgroup;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
    }
    // remove unselected tabs
    if (removeAssocMussel) {
      cancelTab(tabgroup+"/associatedMussel", false);
    }
    if (removeAssocHearth) {
      cancelTab(tabgroup+"/associatedHearthMaterial", false);
    } 
    if (removeAssocEggshell) {
      cancelTab(tabgroup+"/associatedEggshell", false);
    }
    if (removeAssocStone) {
      cancelTab(tabgroup+"/associatedStoneArtefacts", false);
    }
    if (removeAssocOther) {
      cancelTab(tabgroup+"/associatedOtherWorkedMaterial", false);
    }
    // show the selected tabs
    if (!removeAssocMussel) {
      showTab(tabgroup+"/associatedMussel");
      removeAssocMussel = true;
    }   
    if (!removeAssocHearth) {
      showTab(tabgroup+"/associatedHearthMaterial");
      removeAssocHearth = true;
    }
    if (!removeAssocEggshell) {
      showTab(tabgroup+"/associatedEggshell");
      removeAssocEggshell = true;
    } 
    if (!removeAssocStone) {
      showTab(tabgroup+"/associatedStoneArtefacts");
      removeAssocStone = true;
    } 
    if (!removeAssocOther) {
      showTab(tabgroup+"/associatedOtherWorkedMaterial");
      removeAssocOther = true;
    }
    // switch to the control tab and save the tabgroup
    showTab(tabgroup+"/nearbyMaterial");
    oldboneAssoc.save();
  }

  loadAssocCallback() {
    String tabgroup = insituTabgroup;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
    }
    // render the default views for each associated material tab
    if (!hasView(tabgroup+"/associatedMussel/bivalvePreservation")) {
      makeDynamicVocab("RadioGroup", tabgroup+"/associatedMussel/bivalvePreservation", "OldBone_-_Bivalve_preservation", "{oldBoneUI_assocBivalvePreservation}", null, tabgroup+"/associatedMussel/assocMussel", "OldBone_-_Bivalve_preservation", "vocab");
    }
    removeAssocMussel = false;
    if (!hasView(tabgroup+"/associatedHearthMaterial/assocHearth")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedHearthMaterial/assocHearth", "OldBone_-_Associated_Hearth_Material", "{oldBoneUI_assocHearth}", null, tabgroup+"/associatedHearthMaterial/assocHearth", "OldBone_-_Associated_Hearth_Material", "vocab");
    }
    removeAssocHearth = false;
    if (!hasView(tabgroup+"/associatedEggshell/assocEggshell")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedEggshell/assocEggshell", "OldBone_-_Associated_Eggshell", "{oldBoneUI_assocEggshell}", null, tabgroup+"/associatedEggshell/assocEggshell", "OldBone_-_Associated_Eggshell", "vocab");
    }
    removeAssocEggshell = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocStone")) {
      String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocStone\", \"click\", \"oldboneAssoc.updateDynamicAssociatedStone();\");";
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocStone", "OldBone_-_Associated_Stone_Artefacts", "{oldBoneUI_assocStone}", callback, tabgroup+"/associatedStoneArtefacts/assocStone", "OldBone_-_Associated_Stone_Artefacts", "vocab");
    }
    removeAssocStone = false;
    if (!hasView(tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "OldBone_-_Associated_Other_Artefacts", "{oldBoneUI_assocOtherwork}", null, tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "OldBone_-_Associated_Other_Artefacts", "vocab");  
    }
    removeAssocOther = false;

    // render the 'selection-dependent' views for the stone tab
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
      String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocChippedStone\", \"click\", \"oldboneAssoc.updateDynamicChippedStone();\");";
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "{oldBoneUI_assocChippedStone}", callback, tabgroup+"/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "vocab");   
    }
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "{oldBoneUI_assocChippedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "vocab");  
    }
    removeChippedStone = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "{oldBoneUI_assocUnmodifiedStone}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "vocab");
    } 
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "{oldBoneUI_assocUnmodifiedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "vocab");  
    }   
    removeUnmodifiedStone = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "{oldBoneUI_assocGroundStoneType}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "vocab"); 
    } 
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "{oldBoneUI_assocGroundStoneStatus}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "vocab");     
    }
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "{oldBoneUI_assocGroundRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "vocab");  
    }    
    removeGroundStone = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "{oldBoneUI_assocRetouchedStone}", null, tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "vocab");    
    }
    removeRetouchedArtefacts = false;
    
    // load the saved values into the rendered views
    dialog = showBusy("loading record", "please wait");
    showTabGroup(tabgroup, id, new FetchCallback() {
      onFetch(result) {
        // print("loaded assoc: " + result + " with attributes: " + result.getAttributes());
        removeUnselectedMaterials();
        dialog.dismiss();
      }
    });
  }

  /** Removes the tabs for unselected materials when loading. **/
  removeUnselectedMaterials() {
    // only perform the removal if the associated materials are being loaded.
    if (!loading) {
      return;
    }
    Log.d("removeUnselectedMaterials()", "Removing unseletected materials from loaded associated material.");
    // get the selected material list values 
    selectedAssocMaterial = getSelectedAssocMaterial();
    if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty())
    {
      String tabgroup = insituTabgroup;
      List vocabulary = insituMaterialVocabulary;
      if (!isInsituMaterial) {
        tabgroup = surfaceTabgroup;
        vocabulary = surfaceMaterialVocabulary;
      }
      removeAssocMussel = true;
      removeAssocHearth = true;
      removeAssocEggshell = true;
      removeAssocStone = true;
      removeAssocOther = true;
      // flag the selected values which shouldn't be removed.
      for (selectedItem : selectedAssocMaterial) {
        for (type : vocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            if (type.get(1).equals("{mussel}")) {
              removeAssocMussel = false;
            } else if(type.get(1).equals("{hs}")) {
              removeAssocHearth = false;
            } else if(type.get(1).equals("{eggshell}")) {
              removeAssocEggshell = false;
            } else if(type.get(1).equals("{stoneart}")) {
              removeAssocStone = false;
            } else if(type.get(1).equals("{otherart}")) {
              removeAssocOther = false;
            } else {
              Log.e("removeUnselectedMaterials()", "Error: no matched insitu selected");
            }
          }
        }
      }
      // remove the appropriate selection-dependent views for the tabs that aren't going to be removed.
      if (!removeAssocStone) {
        removeChippedStone = true;
        removeUnmodifiedStone = true;
        removeGroundStone = true;
        assocStones = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocStone");
        for (selectedItem : assocStones) {
          for (type : stoneArtefactsVocabulary) {
            if (selectedItem.getName().equals(type.get(0))) {
              if (type.get(1).equals("{cs}")) {
                removeChippedStone = false;
              } else if (type.get(1).equals("{um}")) {
                removeUnmodifiedStone = false;
              } else if (type.get(1).equals("{ground}")) {
                removeGroundStone = false;
              } else {
                Log.e("removeUnselectedMaterials", "Error: no stone artefact selected");
              }
            }
          }
        }
        removeDynamicAssociatedStone();
        removeRetouchedArtefacts = true;
        if (!removeChippedStone) {
          chippedStone = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
          for (selectedItem : chippedStone) {
            for (type : chippedStoneVocabulary) {
              if (selectedItem.getName().equals(type.get(0))) {
                if (type.get(1).equals("{ru}")) {
                  removeRetouchedArtefacts = false;
                }
              }
            }
          }
        }
        removeRetouchedArtefacts();
      }
      // remove the unselected tabs, switching the load flag mark that the 'loading' process has finished.
      loading = false;
      onShowAssociatedMaterials();
    }
  }

  /** Detect and display the relevent associated stone artefact views. **/
  updateDynamicAssociatedStone() {
    removeChippedStone = true;
    removeUnmodifiedStone = true;
    removeGroundStone = true;
    String tabgroup = insituTabgroup;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
    }
    assocStones = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocStone");
    // compare each selected artefact against the stone artefact vocab to determine which one(s) the user selected
    for (selectedItem : assocStones) {
      for (type : stoneArtefactsVocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          if (type.get(1).equals("{cs}")) {
            String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocChippedStone\", \"click\", \"oldboneAssoc.updateDynamicChippedStone();\");";
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "{oldBoneUI_assocChippedStone}", callback, tabgroup+"/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "vocab");
            }
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "{oldBoneUI_assocChippedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "vocab");  
            }
            removeChippedStone = false;
          } else if (type.get(1).equals("{um}")) {
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "{oldBoneUI_assocUnmodifiedStone}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "vocab");
            }
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "{oldBoneUI_assocUnmodifiedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "vocab");  
            } 
            removeUnmodifiedStone = false;
          } else if (type.get(1).equals("{ground}")) {
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "{oldBoneUI_assocGroundStoneType}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "vocab");
            }
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "{oldBoneUI_assocGroundStoneStatus}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "vocab");
            }
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "{oldBoneUI_assocGroundRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "vocab");  
            }
            removeGroundStone = false;
          } else {
            Log.e("updateDynamicAssociatedStone", "Error: no stone artefact selected");
          }
        }
      }    
    }
    // remove the appropriate dynamic views.
    removeDynamicAssociatedStone();
  }

  /** Removes the relevent associated stone artefact views. **/
  removeDynamicAssociatedStone() {
    String tabgroup = insituTabgroup;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
    }
    if (removeChippedStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
        if (hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
          removeView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone");
        }
      }
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial");
      }
    }
    if (removeUnmodifiedStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone");
      }
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial");
      }
    }
    if (removeGroundStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType");
      }
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus");
      }
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial");
      }
    }
  }

  /** Displays the associated retouched artefacts view for associated stone artefacts **/
  updateDynamicChippedStone() {
    String tabgroup = insituTabgroup;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
    }
    chippedStone = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
    removeRetouchedArtefacts = true;
    for (selectedItem : chippedStone) {
      for (type : chippedStoneVocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          if (type.get(1).equals("{ru}")) {
            Log.d("updateDynamicChippedStone", "ru selected");
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "{oldBoneUI_assocRetouchedStone}", null, tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "vocab");
            }
            removeRetouchedArtefacts = false;
          }
        }
      }
    }
    removeRetouchedArtefacts();
  }

  /** Removes the retouched artefacts view if appropriate. **/
  removeRetouchedArtefacts() {
    String tabgroup = insituTabgroup;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
    }
    if (removeRetouchedArtefacts) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone");
      }
    }
  }
  
  onEvent(insituTabgroup, "show", "oldboneAssoc.onShowAssociatedMaterials(); keepTabGroupChanges(\""+insituTabgroup+"\"); oldboneAssoc.save();");
  onEvent(surfaceTabgroup, "show", "oldboneAssoc.onShowAssociatedMaterials(); keepTabGroupChanges(\""+surfaceTabgroup+"\"); oldboneAssoc.save();");
  
  return this;
}
oldboneAssoc = oldboneAssociatedMaterials();
oldboneAssoc.init();

/*** MIDDEN FEATURE ***/
middenFeature() {
  String entityTabgroup = "midden";
  String archentType = "Midden";
  String desc = archentType + " record";
  String id = null;
  String relTypeName = ""; // NEED TO REPLACE THIS WITH THE ACTUAL RELATIONSHIP NAME!!!
  ArrayList middenTypeVocabulary = new ArrayList();
  Boolean removeBriefDescription = true;  
  Boolean removeHeatRetainer = true;
  Boolean removeNonHeatRetainer = true;  
  
  /** Saves the feature **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(entityTabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("save()", desc + " saved with id: " + id);
        if (newRecord) {
          Log.d("save()", "New " + desc + " created");
        }
      }
      onError(message) {
          showToast(message);
      }  
    }, enable_autosave);
  }

  /** Creates a new feature record. **/
  create() {
    dialog = showBusy("creating a new record", "please wait");
    removeBriefDescription = true;
    removeHeatRetainer = true;
    removeNonHeatRetainer = true;
    id = null;
    newTabGroup(entityTabgroup);
    setFieldValue(entityTabgroup + "/basicIdentification/idNumber", "0");
    setFieldValue(entityTabgroup + "/basicIdentification/gridSquare", "0");
    keepTabGroupChanges(entityTabgroup);
    save();
    dialog.dismiss();
  }

  /** Loads a feature record. **/
  load() {
    if (isNull(id)) {
      showToast("No entity selected");
        return;
    }
    dialog = showBusy("loading record", "please wait");
    removeAllViewsAndContainers(entityTabgroup);
    // display all dynamic views
    removeBriefDescription = false;
    removeHeatRetainer = false;
    removeNonHeatRetainer = false;
    displayDynamicViews();
    // load the entity and populate any dynamic views with their saved value
    showTabGroup(entityTabgroup, id, new FetchCallback() {
      onFetch(result) {
        Log.d("load()", "Loaded a " + desc + ", ID: " + id);
        showToast("Loaded a " + desc);
        checkHearthType(); // remove any dynamic views that shouldn't be present
        keepTabGroupChanges(entityTabgroup);
        dialog.dismiss();
      }
    });
  }

  checkHearthType() {
    String selectedItem = getFieldValue(entityTabgroup+"/basicIdentification/hearthType");
    if (isNull(selectedItem)) {
      removeBriefDescription = true;
      removeHeatRetainer = true;
      removeNonHeatRetainer = true;
      removeDynamicViews();
      return;
    }
    for (hearthType : hearthTypeVocabulary) {
      if (selectedItem.equals(hearthType.get(0))) {
        if (hearthType.get(1).equals("{hsother}") || hearthType.get(1).equals("{other}")) {
          removeBriefDescription = false;
        } else {
          removeBriefDescription = true;
        }
        if (hearthType.get(1).equals("{hsterm}") || hearthType.get(1).equals("{hscarb}") || hearthType.get(1).equals("{hsclay}") || hearthType.get(1).equals("{hsother}") || hearthType.get(1).equals("{hsindet}")) {
          removeHeatRetainer = false;
        } else {
          removeHeatRetainer = true;
        }
        if (hearthType.get(1).equals("{emupat}") || hearthType.get(1).equals("{bakedclay}") || hearthType.get(1).equals("{bakedsed}") || hearthType.get(1).equals("{ashlens}") || hearthType.get(1).equals("{ashpatch}") || hearthType.get(1).equals("{charclens}") || hearthType.get(1).equals("{staining}") || hearthType.get(1).equals("{other}")) {
          removeNonHeatRetainer = false;
        } else {
          removeNonHeatRetainer = true;
        }
      }
    }
    // update dynamic views
    displayDynamicViews();
    removeDynamicViews();
  }

  displayDynamicViews() {
    String tabgroup = entityTabgroup;
    if (!removeBriefDescription) {
      if (!hasView(tabgroup+"/basicIdentification/briefDescription")) {
        executeViewTask(new ViewTask(){
          doTask() {
            viewDef = createViewDef();
            viewDef.createTextField().setLabel("{hearthUI_briefDescription}").setAttributeName("Hearth_-_Brief_description").setAttributeType("measure").setAnnotationEnabled(true).setCertaintyEnabled(true).setInfoEnabled(true);
            createView(tabgroup+"/basicIdentification/briefDescription", viewDef);
          }
        });
      }
    }
    if (!removeHeatRetainer) {
      if (!hasView(tabgroup+"/hearthStructure/heatRetainer")) {
        makeDynamicVocab("CheckBoxGroup", tabgroup+"/hearthStructure/heatRetainer", "Hearth_-_Modification_of_heat-retainer_hearths", "{hearthUI_heatRetainer}", null, tabgroup+"/hearthStructure/heatRetainer", "Hearth_-_Modification_of_heat-retainer_hearths", "vocab");
      }
    }
    if (!removeNonHeatRetainer) {
      if (!hasView(tabgroup+"/hearthStructure/nonHeatRetainer")) {
        makeDynamicVocab("DropDown", tabgroup+"/hearthStructure/nonHeatRetainer", "Hearth_-_Modification_of_non-heat_retainer_hearths", "{hearthUI_nonHeatRetainer}", null, tabgroup+"/hearthStructure/nonHeatRetainer", "Hearth_-_Modification_of_non-heat_retainer_hearths", "vocab");
      }
    }
  }

  /** Removes the flagged dynamic views **/
  removeDynamicViews() {
    String tabgroup = entityTabgroup;
    if (removeBriefDescription) {
      if (hasView(tabgroup+"/basicIdentification/briefDescription")) {
        removeView(tabgroup+"/basicIdentification/briefDescription");
      }
    }
    if (removeHeatRetainer) {
      if (hasView(tabgroup+"/hearthStructure/heatRetainer")) {
        removeView(tabgroup+"/hearthStructure/heatRetainer");
      }
    }
    if (removeNonHeatRetainer) {
      if (hasView(tabgroup+"/hearthStructure/nonHeatRetainer")) {
        removeView(tabgroup+"/hearthStructure/nonHeatRetainer");
      }
    }
  }

  displayAssocMaterials() {
    List checkedMaterials = getFieldValue("middenAssociatedMaterials/control/assocMaterial");
    if (isNull(checkedMaterials))
      return;
  }

  displayContinuity() {
    String selectedItem = getFieldValue(entityTabgroup + "/basicIdentification/middenType");
    if (isNull(selectedItem)) {
      return;
    }
    if (middenTypeVocabulary == null) {
      return;
    }
    String dynamicViewMiddenType = entityTabgroup + "/basicIdentification/continuity";

    /* Figure out the selected occurrence type (not the occurrence type's vocabid) */
    String selectedItemName = "";
    for (middenType : middenTypeVocabulary) {
      if (selectedItem.equals(middenType.get(0))) {
        selectedItemName = middenType.get(1);
        break;
      }
    }

    ArrayList extensiveAndLargeTypes = new ArrayList();

    extensiveAndLargeTypes.add("{largeclust}");
    extensiveAndLargeTypes.add("{extthin}");
    extensiveAndLargeTypes.add("{extthick}");

    String faimsAttribMiddenType = "Midden_-_Midden_Type";
    String refMiddenType         = entityTabgroup + "/basicIdentification/middenType";
    Boolean isSelectedExtensiveOrLarge = extensiveAndLargeTypes.contains(selectedItemName);

    String faimsAttribContinuity = "Midden_-_Continuity";
    String refContinuity         = entityTabgroup + "/basicIdentification/continuity";
    if (isSelectedExtensiveOrLarge) {
      if (!hasView(refContinuity)) {
        String callback = "makeVocab(\"CheckBoxGroup\", \"" + refContinuity+"\", \"" + faimsAttribContinuity + "\");";
        makeDynamicVocab(
          "CheckBoxGroup",
          refContinuity,
          faimsAttribContinuity,
          "{middenUI_continuity}",
          callback,
          refContinuity,
          faimsAttribContinuity,
          "vocab"
        );
      }
    } else {
      if (hasView(refContinuity)) {
        removeView(refContinuity);
      }
    }
  }

   /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("HierarchicalDropDown" , entityTabgroup + "/basicIdentification/" + "middenType"                          , "Midden_-_Midden_Type");
    makeVocab("DropDown"             , entityTabgroup + "/middenDescription/" + "presenceOfCharcoal"                    , "Midden_-_Presence_of_charcoal");
    makeVocab("CheckBoxGroup"        , "middenAssociatedMaterials/control/assocMaterial", "MiddenAssoc_-_Associated_material");
    makeVocab("DropDown"             , entityTabgroup + "/middenDescription/" + "proportionOfMaterialThatRemainsInSitu" , "Midden_-_Proportion_of_material_that_remains_in_situ");
    makeVocab("DropDown"             , entityTabgroup + "/middenDescription/" + "bivalvePreservation"                   , "Midden_-_Bivalve_preservation");
    makeVocab("DropDown"             , entityTabgroup + "/middenDescription/" + "bivalveDispersal"                      , "Midden_-_Bivalve_dispersal");

    makeVocab("PictureGallery" , entityTabgroup + "/topAndStratSetting/topographicSetting"      , "Midden_-_Topographic_Setting");
    makeVocab("PictureGallery" , entityTabgroup + "/topAndStratSetting/sedimentType"            , "Midden_-_Sediment_Type");
    makeVocab("PictureGallery" , entityTabgroup + "/topAndStratSetting/stratigraphicUnit"       , "Midden_-_Stratigraphic_Unit");
    makeVocab("PictureGallery" , entityTabgroup + "/topAndStratSetting/erosionVulnerability"    , "Midden_-_Vulnerability_To_Erosion");
    makeVocab("PictureGallery" , entityTabgroup + "/topAndStratSetting/paleotopographicSetting" , "Midden_-_Palaeotopographic_Setting");

    fetchVocabulary("Midden_-_Midden_Type", middenTypeVocabulary);
  }

  /** Populates the in-situ and surface associated materials list. **/
  listAssociatedMaterials() {
    listAssociatedMaterials(entityTabgroup+"/associatedMaterials/associatedMaterialList", id, middenAssoc.archentType, relTypeName);
  }

  onEvent(entityTabgroup                                                 , "show"       , "midden.save();");
  onEvent(entityTabgroup + "/associatedMaterials"                        , "show"       , "midden.listAssociatedMaterials();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedMaterialList" , "click"      , "middenAssoc.load()");
  onEvent(entityTabgroup + "/associatedMaterials/recordMaterial"         , "delayclick" , "middenAssoc.create();");
  onEvent(entityTabgroup + "/basicIdentification/calculateGridSquare"    , "click"      , "calculateGridSquare(midden.id        , midden.entityTabgroup , \""+entityTabgroup+"/basicIdentification/gridSquare\");");
  onEvent(entityTabgroup + "/basicIdentification/middenType"             , "click"      , "midden.displayContinuity();");

  return this;
}
midden = middenFeature();
midden.init();

/*** MIDDEN ASSOCIATED MATERIALS ***/
middenAssociatedMaterials() {
  String tabgroup = "middenAssociatedMaterials";
  String archentType = "Hearth Associated Materials";
  String relTypeName = midden.relTypeName;
  String id = null;
  Boolean loading = false;
  Boolean removeLacust = true;
  Boolean removeTerrestrial = true;
  Boolean removeEggshell = true;
  Boolean removeStone = true;
  Boolean removeOther = true;
  Boolean removeChippedStone = true;
  Boolean removeRetouchedStone = true;
  Boolean removeUnmodifiedStone = true;
  Boolean removeGroundStone = true;
  List assocMaterialVocabulary = new ArrayList();
  List stoneArtefactsVocabulary = new ArrayList();
  List chippedStoneVocabulary = new ArrayList(); 

  /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("CheckBoxGroup", tabgroup+"/control/assocMaterial", "HearthAssoc_-_Associated_material");
    fetchVocabulary("HearthAssoc_-_Associated_material", assocMaterialVocabulary);
    fetchVocabulary("HearthAssoc_-_Associated_stone_artefacts", stoneArtefactsVocabulary);
    fetchVocabulary("HearthAssoc_-_Associated_chipped_stone_artefacts", chippedStoneVocabulary);
  }

  /** Saves the associated materials record. **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(tabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("middenAssociatedMaterials.save()", "Saving the relation between midden " + midden.id + " and " + tabgroup + " " + id);
        String callback = "midden.listAssociatedMaterials();" + "showTab(\"midden/associatedMaterials\");";
        saveEntitiesToRel(relTypeName, midden.id, id, callback);
      }
    }, enable_autosave);
  }

  /** Loads the midden associated materials record. **/
  load() {
    String selectedID = getListItemValue();
    if (!isNull(selectedID) && !selectedID.equals("placeholder")) {
      Log.d("load()", "Preparing to load associated material with ID: " + selectedID);
      id = selectedID;
      loading = true;
      removeAllViewsAndContainers(tabgroup);
      renderControlTab();
    }
  }

  /** Creates a midden associated materials record. **/
  create() {
    if (!isNull(midden.id)) {
      fetchOne("select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = '"+archentType+"' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+midden.id+" " +
        "and relntypeName = '"+relTypeName+"') " +
        "and uuid != "+midden.id+");",  new FetchCallback() {
        onFetch(result) {
          if(isNull(result)) {
            id = null;
            removeAllViewsAndContainers(tabgroup);
            newTabGroup(tabgroup);
            renderControlTab();
          } else {
            showToast("Only one associated material can be recorded");
          }
        }
      });
    }
  }

  /** Retrieves the dynamic associated material selection or null if it does not exist. **/
  List getSelectedAssocMaterial() {
    return getFieldValue(tabgroup+"/control/assocMaterial");
  }

  /** Display the associated material list and attach a callback to render the other tabs when appropriate. **/
  renderControlTab() {
    renderAssocTabs();
    if (loading) {
      Log.d("renderControlTab()", "Preparing to load");
      loadAssocCallback();
    }
  }

  /** Displays the associated material tabs when appropriate. **/
  renderAssocTabs() {
    selectedAssocMaterial = getSelectedAssocMaterial();
    if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty()) {
      for (selectedItem : selectedAssocMaterial) {
        for (type : assocMaterialVocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            Log.d("renderAssocTabs()", "Selected "+tabgroup+" "+type.get(1));
            if (type.get(1).equals("{lacust}")) {
              if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocLacust")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedLacustrineMaterial/assocLacust", "HearthAssoc_-_Associated_lacustrine_material", "{middenAssociatedMaterialsUI_assocLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocLacust", "HearthAssoc_-_Associated_lacustrine_material", "vocab");
              }
              if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocBurntLacust")) {
                makeDynamicVocab("RadioGroup", tabgroup+"/associatedLacustrineMaterial/assocBurntLacust", "HearthAssoc_-_Burnt_lacustrine_material", "{middenAssociatedMaterialsUI_assocBurntLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocBurntLacust", "HearthAssoc_-_Burnt_lacustrine_material", "vocab");
              }
              removeLacust = false;
            } else if(type.get(1).equals("{terrbone}")) {
              if (!hasView(tabgroup+"/associatedTerrestrialBone/assocTerrestrial")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "HearthAssoc_-_Associated_terrestrial_bone", "{middenAssociatedMaterialsUI_assocTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "HearthAssoc_-_Associated_terrestrial_bone", "vocab");
              }
              if (!hasView(tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial")) {
                makeDynamicVocab("RadioGroup", tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial", "HearthAssoc_-_Burnt_terrestrial_bone", "{middenAssociatedMaterialsUI_assocBurntTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial", "HearthAssoc_-_Burnt_terrestrial_bone", "vocab");
              }
              removeTerrestrial = false;
            } else if(type.get(1).equals("{eggshell}")) {
              if (!hasView(tabgroup+"/associatedEggshell/assocEggshell")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedEggshell/assocEggshell", "HearthAssoc_-_Associated_eggshell", "{middenAssociatedMaterialsUI_assocEggshell}", null, tabgroup+"/associatedEggshell/assocEggshell", "HearthAssoc_-_Associated_eggshell", "vocab");
              }
              if (!hasView(tabgroup+"/associatedEggshell/assocBurntEggshell")) {
                makeDynamicVocab("RadioGroup", tabgroup+"/associatedEggshell/assocBurntEggshell", "HearthAssoc_-_Burnt_eggshell", "{middenAssociatedMaterialsUI_assocBurntEggshell}", null, tabgroup+"/associatedEggshell/assocBurntEggshell", "HearthAssoc_-_Burnt_eggshell", "vocab");
              }
              removeEggshell = false;
            } else if(type.get(1).equals("{stoneart}")) {
              if (!hasView( tabgroup+"/associatedStoneArtefacts/assocStone")) {
                String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocStone\", \"click\", \"middenAssoc.updateDynamicAssociatedStone();\");";
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocStone", "HearthAssoc_-_Associated_stone_artefacts", "{middenAssociatedMaterialsUI_assocStone}", null, tabgroup+"/associatedStoneArtefacts/assocStone", "HearthAssoc_-_Associated_stone_artefacts", "vocab");
              }
              removeStone = false;
            } else if(type.get(1).equals("{otherwork}")) {
              if (!hasView(tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "HearthAssoc_-_Associated_other_worked_(or_transported)_material", "{middenAssociatedMaterialsUI_assocOtherwork}", null, tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "HearthAssoc_-_Associated_other_worked_(or_transported)_material", "vocab");
              }
              removeOther = false;
            } else {
              Log.e("renderAssocTabs()", "Error: no matched insitu selected");
            }
          }
        }
      } 
    }
    // show and cancel the appropriate associated material tabs.
    onShowAssociatedMaterials();
  }

  /** Shows or cancels the associated material tabs. **/
  onShowAssociatedMaterials() {
    // if the tab show is triggered after loading, don't execute the rest of this function.
    if (loading) {
      Log.d("onShowAssociatedMaterials()", "Exiting function, loading associated material");
      return;
    }
    // remove unselected tabs
    if (removeLacust) {
      cancelTab(tabgroup+"/associatedLacustrineMaterial", false);
    }
    if (removeTerrestrial) {
      cancelTab(tabgroup+"/associatedTerrestrialBone", false);
    } 
    if (removeEggshell) {
      cancelTab(tabgroup+"/associatedEggshell", false);
    }
    if (removeStone) {
      cancelTab(tabgroup+"/associatedStoneArtefacts", false);
    }
    if (removeOther) {
      cancelTab(tabgroup+"/associatedOtherWorkedMaterial", false);
    }
    // show the selected tabs
    if (!removeLacust) {
      showTab(tabgroup+"/associatedLacustrineMaterial");
      removeLacust = true;
    }   
    if (!removeTerrestrial) {
      showTab(tabgroup+"/associatedTerrestrialBone");
      removeTerrestrial = true;
    }
    if (!removeEggshell) {
      showTab(tabgroup+"/associatedEggshell");
      removeEggshell = true;
    } 
    if (!removeStone) {
      showTab(tabgroup+"/associatedStoneArtefacts");
      removeStone = true;
    } 
    if (!removeOther) {
      showTab(tabgroup+"/associatedOtherWorkedMaterial");
      removeOther = true;
    }
    // switch to the control tab and save the tabgroup
    showTab(tabgroup+"/control");
    middenAssoc.save();
  }

  loadAssocCallback() {
    // render the default views for each associated material tab
    if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocLacust")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedLacustrineMaterial/assocLacust", "HearthAssoc_-_Associated_lacustrine_material", "{middenAssociatedMaterialsUI_assocLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocLacust", "HearthAssoc_-_Associated_lacustrine_material", "vocab");
    }
    if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocBurntLacust")) {
      makeDynamicVocab("RadioGroup", tabgroup+"/associatedLacustrineMaterial/assocBurntLacust", "HearthAssoc_-_Burnt_lacustrine_material", "{middenAssociatedMaterialsUI_assocBurntLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocBurntLacust", "HearthAssoc_-_Burnt_lacustrine_material", "vocab");
    }
    removeLacust = false;
    if (!hasView(tabgroup+"/associatedTerrestrialBone/assocTerrestrial")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "HearthAssoc_-_Associated_terrestrial_bone", "{middenAssociatedMaterialsUI_assocTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "HearthAssoc_-_Associated_terrestrial_bone", "vocab");
    }
    if (!hasView(tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial")) {
      makeDynamicVocab("RadioGroup", tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial", "HearthAssoc_-_Burnt_terrestrial_bone", "{middenAssociatedMaterialsUI_assocBurntTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocBurntTerrestrial", "HearthAssoc_-_Burnt_terrestrial_bone", "vocab");
    }
    removeTerrestrial = false;
    if (!hasView(tabgroup+"/associatedEggshell/assocEggshell")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedEggshell/assocEggshell", "HearthAssoc_-_Associated_eggshell", "{middenAssociatedMaterialsUI_assocEggshell}", null, tabgroup+"/associatedEggshell/assocEggshell", "HearthAssoc_-_Associated_eggshell", "vocab");
    }
    if (!hasView(tabgroup+"/associatedEggshell/assocBurntEggshell")) {
      makeDynamicVocab("RadioGroup", tabgroup+"/associatedEggshell/assocBurntEggshell", "HearthAssoc_-_Burnt_eggshell", "{middenAssociatedMaterialsUI_assocBurntEggshell}", null, tabgroup+"/associatedEggshell/assocBurntEggshell", "HearthAssoc_-_Burnt_eggshell", "vocab");
    }
    removeEggshell = false;
    if (!hasView( tabgroup+"/associatedStoneArtefacts/assocStone")) {
      String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocStone\", \"click\", \"middenAssoc.renderTabgroup();\");";
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocStone", "HearthAssoc_-_Associated_stone_artefacts", "{middenAssociatedMaterialsUI_assocStone}", callback, tabgroup+"/associatedStoneArtefacts/assocStone", "HearthAssoc_-_Associated_stone_artefacts", "vocab");
    }
    removeStone = false;
    if (!hasView(tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "HearthAssoc_-_Associated_other_worked_(or_transported)_material", "{middenAssociatedMaterialsUI_assocOtherwork}", null, tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "HearthAssoc_-_Associated_other_worked_(or_transported)_material", "vocab");
    }
    removeOther = false;
    // render the 'selection-dependent' views for the stone tab
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
      String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocChippedStone\", \"click\", \"middenAssoc.renderTabgroup();\");";
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "{middenAssociatedMaterialsUI_assocChippedStone}", callback, tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "vocab");
    }
    removeChippedStone = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "{middenAssociatedMaterialsUI_assocRetouchedStone}", null, tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "vocab");
    }
    removeRetouchedStone = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "{middenAssociatedMaterialsUI_assocUnmodifiedStone}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "vocab");
    }
    removeUnmodifiedStone = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "{middenAssociatedMaterialsUI_assocGroundStoneType}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "vocab");
    }
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "{middenAssociatedMaterialsUI_assocGroundStoneStatus}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "vocab");
    }
    removeGroundStone = false;
    if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRawMaterial", "HearthAssoc_-_Raw_material_types_present", "{middenAssociatedMaterialsUI_assocRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocRawMaterial", "HearthAssoc_-_Raw_material_types_present", "vocab");
    }    
    // load the saved values into the rendered views
    dialog = showBusy("loading record", "please wait");
    showTabGroup(tabgroup, id, new FetchCallback() {
      onFetch(result) {
        // print("loaded assoc: " + result + " with attributes: " + result.getAttributes());
        removeUnselectedMaterials();
        dialog.dismiss();
      }
    });
  }

  /** Removes the tabs for unselected materials when loading. **/
  removeUnselectedMaterials() {
    // only perform the removal if the associated materials are being loaded.
    if (!loading) {
      return;
    }
    Log.d("removeUnselectedMaterials()", "Removing unseletected materials from loaded associated material.");
    // get the selected material list values 
    selectedAssocMaterial = getSelectedAssocMaterial();
    if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty())
    {
      removeLacust = true;
      removeTerrestrial = true;
      removeEggshell = true;
      removeStone = true;
      removeOther = true;
      // flag the selected values which shouldn't be removed.
      for (selectedItem : selectedAssocMaterial) {
        for (type : assocMaterialVocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            if (type.get(1).equals("{lacust}")) {
              removeLacust = false;
            } else if(type.get(1).equals("{terrbone}")) {
              removeTerrestrial = false;
            } else if(type.get(1).equals("{eggshell}")) {
              removeEggshell = false;
            } else if(type.get(1).equals("{stoneart}")) {
              removeStone = false;
            } else if(type.get(1).equals("{otherwork}")) {
              removeOther = false;
            } else {
              Log.e("removeUnselectedMaterials()", "Error: no matched insitu selected");
            }
          }
        }
      }
      // remove the appropriate selection-dependent views for the tabs that aren't going to be removed.
      if (!removeStone) {
        removeChippedStone = true;
        removeUnmodifiedStone = true;
        removeGroundStone = true;
        assocStones = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocStone");
        for (selectedItem : assocStones) {
          for (type : stoneArtefactsVocabulary) {
            if (selectedItem.getName().equals(type.get(0))) {
              if (type.get(1).equals("{cs}")) {
                removeChippedStone = false;
              } else if (type.get(1).equals("{um}")) {
                removeUnmodifiedStone = false;
              } else if (type.get(1).equals("{ground}")) {
                removeGroundStone = false;
              } else {
                Log.e("removeUnselectedMaterials", "Error: no stone artefact selected");
              }
            }
          }
        }
        removeDynamicAssociatedStone();
        removeRetouchedArtefacts = true;
        if (!removeChippedStone) {
          chippedStone = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
          for (selectedItem : chippedStone) {
            for (type : chippedStoneVocabulary) {
              if (selectedItem.getName().equals(type.get(0))) {
                if (type.get(1).equals("{ru}")) {
                  removeRetouchedStone = false;
                }
              }
            }
          }
        }
        removeRetouchedArtefacts();
      }
      // remove the unselected tabs, switching the load flag mark that the 'loading' process has finished.
      loading = false;
      onShowAssociatedMaterials();
    }
  }

  /** Detect and display the relevent associated stone artefact views. **/
  updateDynamicAssociatedStone() {
    removeChippedStone = true;
    removeUnmodifiedStone = true;
    removeGroundStone = true;
    assocStones = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocStone");
    // compare each selected artefact against the stone artefact vocab to determine which one(s) the user selected
    for (selectedItem : assocStones) {
      for (type : stoneArtefactsVocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          if (type.get(1).equals("{cs}")) {
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
              String callback = "onEvent(\""+tabgroup+"/associatedStoneArtefacts/assocChippedStone\", \"click\", \"middenAssoc.renderTabgroup();\");";
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "{middenAssociatedMaterialsUI_assocChippedStone}", callback, tabgroup+"/associatedStoneArtefacts/assocChippedStone", "HearthAssoc_-_Associated_chipped_stone_artefacts", "vocab");
            }
            // if (!hasView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
            //   makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "{oldBoneUI_assocChippedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial", "OldBone_-_Chipped_Stone_Raw_Material", "vocab");  
            // }
            removeChippedStone = false;
          } else if (type.get(1).equals("{um}")) {
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "{middenAssociatedMaterialsUI_assocUnmodifiedStone}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone", "HearthAssoc_-_Associated_unmodified_stone", "vocab");
            }
            // if (!hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
            //   makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "{oldBoneUI_assocUnmodifiedRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial", "OldBone_-_Unmodified_Stone_Raw_Material", "vocab");  
            // } 
            removeUnmodifiedStone = false;
          } else if (type.get(1).equals("{ground}")) {
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "{middenAssociatedMaterialsUI_assocGroundStoneType}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneType", "HearthAssoc_-_Ground_stone_types_present", "vocab");
            }
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
              makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "{middenAssociatedMaterialsUI_assocGroundStoneStatus}", null, tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus", "HearthAssoc_-_Ground_stone_status", "vocab");
            }
            // if (!hasView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
            //   makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "{oldBoneUI_assocGroundRawMaterial}", null, tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial", "OldBone_-_Ground_Stone_Raw_Material", "vocab");  
            // }
            removeGroundStone = false;
          } else {
            Log.e("updateDynamicAssociatedStone", "Error: no stone artefact selected");
          }
        }
      }    
    }
    // remove the appropriate dynamic views.
    removeDynamicAssociatedStone();
  }

  /** Removes the relevent associated stone artefact views. **/
  removeDynamicAssociatedStone() {
    if (removeChippedStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocChippedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
        if (hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
          removeView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone");
        }
      }
      // if (hasView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial")) {
      //   removeView(tabgroup+"/associatedStoneArtefacts/assocChippedRawMaterial");
      // }
    }
    if (removeUnmodifiedStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedStone");
      }
      // if (hasView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial")) {
      //   removeView(tabgroup+"/associatedStoneArtefacts/assocUnmodifiedRawMaterial");
      // }
    }
    if (removeGroundStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneType");
      }
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocGroundStoneStatus");
      }
      // if (hasView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial")) {
      //   removeView(tabgroup+"/associatedStoneArtefacts/assocGroundRawMaterial");
      // }
    }
    if (hasView(view = tabgroup+"/associatedStoneArtefacts/assocRawMaterial")) {
      removeView(view = tabgroup+"/associatedStoneArtefacts/assocRawMaterial");
    } 
  }

  /** Displays the associated retouched artefacts view for associated stone artefacts **/
  updateDynamicChippedStone() {
    chippedStone = getFieldValue(tabgroup+"/associatedStoneArtefacts/assocChippedStone");
    removeRetouchedArtefacts = true;
    for (selectedItem : chippedStone) {
      for (type : chippedStoneVocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          if (type.get(1).equals("{ru}")) {
            Log.d("updateDynamicChippedStone", "ru selected");
            if (!hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
            makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "{middenAssociatedMaterialsUI_assocRetouchedStone}", null, tabgroup+"/associatedStoneArtefacts/assocRetouchedStone", "HearthAssoc_-_Associated_retouched_artefacts", "vocab");
          }
            removeRetouchedStone = false;
          }
        }
      }
    }
    removeRetouchedArtefacts();
  }

  /** Removes the retouched artefacts view if appropriate. **/
  removeRetouchedArtefacts() {
    if (removeRetouchedStone) {
      if (hasView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone")) {
        removeView(tabgroup+"/associatedStoneArtefacts/assocRetouchedStone");
      }
    }
  }
  
  onEvent(tabgroup, "show", "middenAssoc.onShowAssociatedMaterials(); keepTabGroupChanges(\""+tabgroup+"\"); middenAssoc.save();");
  onEvent(tabgroup+"/control/assocMaterial", "click", "middenAssoc.renderAssocTabs();");

  return this;
}
middenAssoc = middenAssociatedMaterials();
middenAssoc.init();

/*** STONE ARTEFACT FEATURE ***/
stoneFeature() {
  String entityTabgroup = "stoneArtefactClusters";
  String archentType = "Stone Artefact Clusters";
  String desc = archentType + " record";
  String id = null;
  String insituRelTypeName = "Stone And Associated Insitu Materials";
  String surfaceRelTypeName = "Stone And Associated Surface Materials";
  String assocInsituTabgroup = "stoneAssociatedInsituMaterials";
  String assocSurfaceTabgroup = "stoneAssociatedSurfaceMaterials";
  List clusterTypeVocabulary = new ArrayList();
  List insituStoneArtefactsVocabulary = new ArrayList();
  List insituChippedStoneVocabulary = new ArrayList();
  List surfaceStoneArtefactsVocabulary = new ArrayList();
  List surfaceChippedStoneVocabulary = new ArrayList();
  Boolean removeInsituGroundStone = true;
  Boolean removeInsituUnmodifiedStone = true;
  Boolean removeInsituChippedStone = true;
  Boolean removeInsituRetouchedArtefacts = true;
  Boolean removeSurfaceGroundStone = true;
  Boolean removeSurfaceUnmodifiedStone = true;
  Boolean removeSurfaceChippedStone = true;
  Boolean removeSurfaceRetouchedArtefacts = true;

  /** Saves the feature **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(entityTabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("save()", desc + " saved with id: " + id);
        if (newRecord) {
          Log.d("save()", "New " + desc + " created");
        }
      }
      onError(message) {
          showToast(message);
      }  
    }, enable_autosave);
  }

  /** Creates a new feature record. **/
  create() {
    dialog = showBusy("creating a new record", "please wait");
    newTabGroup(entityTabgroup);
    id = null;
    setFieldValue(entityTabgroup + "/basicIdentification/idNumber", "0");
    setFieldValue(entityTabgroup + "/basicIdentification/gridSquare", "0");
    keepTabGroupChanges(entityTabgroup);
    save();
    dialog.dismiss();
  }

  /** Loads a feature record. **/
  load() {
    if (isNull(id)) {
      showToast("No entity selected");
        return;
    }
    dialog = showBusy("loading record", "please wait");
    showTabGroup(entityTabgroup, id, new FetchCallback() {
      onFetch(result) {
        Log.d("load()", "Loaded a " + desc + ", ID: " + id);
        showToast("Loaded a " + desc);
        checkClusterType();
        keepTabGroupChanges(entityTabgroup);
        dialog.dismiss();
      }
    });
  }

  checkClusterType() {
    String selectedItem = getFieldValue(entityTabgroup+"/basicIdentification/clusterType");
    Boolean showInsituTab = false;
    Boolean showSurfaceTab = false;
    Boolean showAssocTab = false;
    // determine what is selected
    for (clusterType : clusterTypeVocabulary) {
      if (!isNull(selectedItem) && selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{insitu}") || clusterType.get(1).equals("{both}") || clusterType.get(1).equals("{insit_oth}") || clusterType.get(1).equals("{both_oth}"))) {
        showInsituTab = true;
      }
      if (!isNull(selectedItem) && selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{surf}") || clusterType.get(1).equals("{both}") || clusterType.get(1).equals("{surfrefit}") || clusterType.get(1).equals("{surf_oth}") || clusterType.get(1).equals("{both_oth}"))) {
        showSurfaceTab = true;
      }
      if (!isNull(selectedItem) && selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{Stone_artefacts_and_other_material}") || clusterType.get(1).equals("{insit_oth}") || clusterType.get(1).equals("{surf_oth}") || clusterType.get(1).equals("{both_oth}"))) {
        showAssocTab = true;
      }
    }
    // show or hide the relevant tabs
    if (showInsituTab) {
      Log.d("stone.checkClusterType()", "Showing insitu artefact tab");
      showTab(entityTabgroup + "/inSituDescription");
    } else {
      Log.d("stone.checkClusterType()", "Cancelling insitu artefacts tab");
      cancelTab(entityTabgroup + "/inSituDescription", false);
    }
    if (showSurfaceTab) {
      Log.d("stone.checkClusterType()", "Showing surface artefact tab");
      showTab(entityTabgroup + "/surfaceDescription");
    } else {
      Log.d("stone.checkClusterType()", "Cancelling surface artefacts tab");
      cancelTab(entityTabgroup + "/surfaceDescription", false);
    }
    if (showAssocTab) {
      Log.d("stone.checkClusterType()", "Showing associated materials tab");
      showTab(entityTabgroup + "/associatedMaterials");
    } else {
      Log.d("stone.checkClusterType()", "Cancelling associated materials tab");
      cancelTab(entityTabgroup + "/associatedMaterials", false);
    }
    // swap back to the first tab in the tabgroup
    if (showInsituTab || showSurfaceTab || showAssocTab) {
      showTab(entityTabgroup + "/basicIdentification");
    }
    // update the dynamic views for the insitu and surface tab
    if (showInsituTab) {
      displayInsituTabViews();
    }
    if (showSurfaceTab) {
      displaySurfaceTabViews();
    }
  }

  /** Displays the dynamic views for the insitu stone artefact description tab. **/
  displayInsituTabViews() {
    // flag dynamic views for removal, which is later set to false only if the appropriate selections are detected
    removeInsituChippedStone = true;
    removeInsituRetouchedArtefacts = true;
    removeInsituUnmodifiedStone = true;
    removeInsituGroundStone = true;
    // render the default views for the tab
    String tabgroup = entityTabgroup;
    String tab = "/inSituDescription";
    if (!hasView(tabgroup+tab+"/inSituInSituStoneArtefacts")) {
      String callback = "onEvent(\""+tabgroup+tab+"/inSituInSituStoneArtefacts\", \"click\", \"stone.displayInsituTabViews();\");";
      makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/inSituInSituStoneArtefacts", "Stone_-_In_Situ_-_Stone_Artefacts", "{stoneArtefactClustersUI_inSituInSituStoneArtefacts}", callback, tabgroup+tab+"/inSituInSituStoneArtefacts", "Stone_-_In_Situ_-_Stone_Artefacts", "vocab");
    }
    if (!hasView(tabgroup+tab+"/inSituSurfaceModification")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/inSituSurfaceModification", "Stone_-_In_Situ_-_Surface_Modification", "{stoneArtefactClustersUI_inSituSurfaceModification}", null, tabgroup+tab+"/inSituSurfaceModification", "Stone_-_In_Situ_-_Surface_Modification", "vocab");
    }
    // Only proceed to create dynamic views if the 'insitu stone artefacts present' view exists
    if (hasView(tabgroup+tab+"/inSituInSituStoneArtefacts")) {
      // check the value of the insitu stone artefacts and display the relevant dynamic views based on the selection
      List assocInsituStone = getFieldValue(tabgroup+tab+"/inSituInSituStoneArtefacts");
      for (selectedItem : assocInsituStone) {
        for (type : insituStoneArtefactsVocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            if (type.get(1).equals("{cs}")) {
              if (!hasView(tabgroup+tab+"/inSituChippedStoneArtfacts")) {
                String callback = "onEvent(\""+tabgroup+tab+"/inSituChippedStoneArtfacts\", \"click\", \"stone.displayInsituTabViews();\");";
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/inSituChippedStoneArtfacts", "Stone_-_In_Situ_-_Chipped_Stone_Artefacts", "{stoneArtefactClustersUI_inSituChippedStoneArtfacts}", callback, tabgroup+tab+"/inSituChippedStoneArtfacts", "Stone_-_In_Situ_-_Chipped_Stone_Artefacts", "vocab");
              }
              if (!hasView(tabgroup+tab+"/inSituChippedRawMaterial")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/inSituChippedRawMaterial", "Stone_-_In_Situ_-_Chipped_Stone_Raw_Material", "{stoneArtefactClusterUI_insituChippedRawMaterial}", null, tabgroup+tab+"/inSituChippedRawMaterial", "Stone_-_In_Situ_-_Chipped_Stone_Raw_Material", "vocab");  
              }
              removeInsituChippedStone = false;
              // Only proceed to create the initu retouched stone if the insitu chipped stone artefacts view is present
              if (hasView(tabgroup+tab+"/inSituChippedStoneArtfacts")) {
                List chippedStone = getFieldValue(tabgroup+tab+"/inSituChippedStoneArtfacts");
                for (selectedItem : chippedStone) {
                  for (type : insituChippedStoneVocabulary) {
                    if (type.get(1).equals("{ru}")) {
                      if (!hasView(tabgroup+tab+"/inSituRetouchedArtefacts")) {
                        makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/inSituRetouchedArtefacts", "Stone_-_In_Situ_-_Retouched_Artefacts", "{stoneArtefactClustersUI_inSituRetouchedArtefacts}", null, tabgroup+tab+"/inSituRetouchedArtefacts", "Stone_-_In_Situ_-_Retouched_Artefacts", "vocab");
                      }
                      removeInsituRetouchedArtefacts = false;
                    }
                  }
                }
              }
            } else if (type.get(1).equals("{um}")) {
              if (!hasView(tabgroup+tab+"/inSituUnmodifiedStoneTypes")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/inSituUnmodifiedStoneTypes", "Stone_-_In_Situ_-_Unmodified_Stone_Types", "{stoneArtefactClustersUI_inSituUnmodifiedStoneTypes}", null, tabgroup+tab+"/inSituUnmodifiedStoneTypes", "Stone_-_In_Situ_-_Unmodified_Stone_Types", "vocab");
              }
              if (!hasView(tabgroup+tab+"/inSituUnmodifiedRawMaterial")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/inSituUnmodifiedRawMaterial", "Stone_-_In_Situ_-_Unmodified_Stone_Raw_Material", "{stoneArtefactClusterUI_insituUnmodifiedRawMaterial}", null, tabgroup+tab+"/inSituUnmodifiedRawMaterial", "Stone_-_In_Situ_-_Unmodified_Stone_Raw_Material", "vocab");  
              } 
              removeInsituUnmodifiedStone = false;
            } else if (type.get(1).equals("{gs}")) {
              if (!hasView(tabgroup+tab+"/inSituGroundStoneTypes")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/inSituGroundStoneTypes", "Stone_-_In_Situ_-_Ground_Stone_Types", "{stoneArtefactClustersUI_inSituGroundStoneTypes}", null, tabgroup+tab+"/inSituGroundStoneTypes", "Stone_-_In_Situ_-_Ground_Stone_Types", "vocab");
              }
              if (!hasView(tabgroup+tab+"/inSituGroundStoneStatus")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/inSituGroundStoneStatus", "Stone_-_In_Situ_-_Ground_Stone_Status", "{stoneArtefactClustersUI_inSituGroundStoneStatus}", null, tabgroup+tab+"/inSituGroundStoneStatus", "Stone_-_In_Situ_-_Ground_Stone_Status", "vocab");
              }
              if (!hasView(tabgroup+tab+"/inSituGroundRawMaterial")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/inSituGroundRawMaterial", "Stone_-_In_Situ_-_Ground_Stone_Raw_Material", "{stoneArtefactClusterUI_insituGroundRawMaterial}", null, tabgroup+tab+"/inSituGroundRawMaterial", "Stone_-_In_Situ_-_Ground_Stone_Raw_Material", "vocab");  
              }
              removeInsituGroundStone = false;
            } else {
              Log.e("stone.displayInsituTabViews()", "Error: no insitu stone artefact selected");
            }
          }
        }
      }
    }
    removeInsituTabViews();
  }

  /** Removes any insitu views that are flagged. **/
  removeInsituTabViews() {
    String tabgroup = entityTabgroup;
    String tab = "/inSituDescription";
    if (removeInsituChippedStone) {
      if (hasView(tabgroup+tab+"/inSituChippedStoneArtfacts")) {
        removeView(tabgroup+tab+"/inSituChippedStoneArtfacts");
      }
      if (hasView(tabgroup+tab+"/inSituChippedRawMaterial")) {
        removeView(tabgroup+tab+"/inSituChippedRawMaterial");
      }
      removeInsituRetouchedArtefacts = true;
    }
    if (removeInsituRetouchedArtefacts) {
      if (hasView(tabgroup+tab+"/inSituRetouchedArtefacts")) {
        removeView(tabgroup+tab+"/inSituRetouchedArtefacts");
      }
    }
    if (removeInsituUnmodifiedStone) {
      if (hasView(tabgroup+tab+"/inSituUnmodifiedStoneTypes")) {
        removeView(tabgroup+tab+"/inSituUnmodifiedStoneTypes");
      }
      if (hasView(tabgroup+tab+"/inSituUnmodifiedRawMaterial")) {
        removeView(tabgroup+tab+"/inSituUnmodifiedRawMaterial");
      }
    }
    if (removeInsituGroundStone) {
      if (hasView(tabgroup+tab+"/inSituGroundStoneTypes")) {
        removeView(tabgroup+tab+"/inSituGroundStoneTypes");
      }
      if (hasView(tabgroup+tab+"/inSituGroundStoneStatus")) {
        removeView(tabgroup+tab+"/inSituGroundStoneStatus");
      }
      if (hasView(tabgroup+tab+"/inSituGroundRawMaterial")) {
        removeView(tabgroup+tab+"/inSituGroundRawMaterial");
      }
    }
  }

  /** Displays the dynamic views for the surface stone artefact description tab. **/
  displaySurfaceTabViews() {
    // flag dynamic views for removal, which is later set to false only if the appropriate selections are detected
    removeSurfaceChippedStone = true;
    removeSurfaceRetouchedArtefacts = true;
    removeSurfaceUnmodifiedStone = true;
    removeSurfaceGroundStone = true;
    // render the default views for the tab
    String tabgroup = entityTabgroup;
    String tab = "/surfaceDescription";
    if (!hasView(tabgroup+tab+"/surfaceStoneArtefacts")) {
      String callback = "onEvent(\""+tabgroup+tab+"/surfaceStoneArtefacts\", \"click\", \"stone.displaySurfaceTabViews();\");";
      makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/surfaceStoneArtefacts", "Stone_-_Surface_-_Stone_Artefacts", "{stoneArtefactClustersUI_surfaceStoneArtefacts}", callback, tabgroup+tab+"/surfaceStoneArtefacts", "Stone_-_Surface_-_Stone_Artefacts", "vocab");
    }
    if (!hasView(tabgroup+tab+"/surfaceSurfaceModification")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/surfaceSurfaceModification", "Stone_-_Surface_-_Surface_Modification", "{stoneArtefactClustersUI_surfaceSurfaceModification}", null, tabgroup+tab+"/surfaceSurfaceModification", "Stone_-_Surface_-_Surface_Modification", "vocab");
    }
    // Only proceed to create dynamic views if the 'surface stone artefacts present' view exists
    if (hasView(tabgroup+tab+"/surfaceStoneArtefacts")) {
      // check the value of the surface stone artefacts and display the relevant dynamic views based on the selection
      List assocSurfaceStone = getFieldValue(tabgroup+tab+"/surfaceStoneArtefacts");
      for (selectedItem : assocSurfaceStone) {
        for (type : surfaceStoneArtefactsVocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            if (type.get(1).equals("{cs}")) {
              if (!hasView(tabgroup+tab+"/surfaceChippedStoneArtfacts")) {
                String callback = "onEvent(\""+tabgroup+tab+"/surfaceChippedStoneArtfacts\", \"click\", \"stone.displaySurfaceTabViews();\");";
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/surfaceChippedStoneArtfacts", "Stone_-_Surface_-_Chipped_Stone_Artefacts", "{stoneArtefactClustersUI_surfaceChippedStoneArtfacts}", callback, tabgroup+tab+"/surfaceChippedStoneArtfacts", "Stone_-_Surface_-_Chipped_Stone_Artefacts", "vocab");
              }
              if (!hasView(tabgroup+tab+"/surfaceChippedRawMaterial")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/surfaceChippedRawMaterial", "Stone_-_Surface_-_Chipped_Stone_Raw_Material", "{stoneArtefactClusterUI_surfaceChippedRawMaterial}", null, tabgroup+tab+"/surfaceChippedRawMaterial", "Stone_-_Surface_-_Chipped_Stone_Raw_Material", "vocab");  
              }
              removeSurfaceChippedStone = false;
              // Only proceed to create the initu retouched stone if the surface chipped stone artefacts view is present
              if (hasView(tabgroup+tab+"/surfaceChippedStoneArtfacts")) {
                List chippedStone = getFieldValue(tabgroup+tab+"/surfaceChippedStoneArtfacts");
                for (selectedItem : chippedStone) {
                  for (type : surfaceChippedStoneVocabulary) {
                    if (type.get(1).equals("{ru}")) {
                      if (!hasView(tabgroup+tab+"/surfaceRetouchedArtefacts")) {
                        makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/surfaceRetouchedArtefacts", "Stone_-_Surface_-_Retouched_Artefacts", "{stoneArtefactClustersUI_surfaceRetouchedArtefacts}", null, tabgroup+tab+"/surfaceRetouchedArtefacts", "Stone_-_Surface_-_Retouched_Artefacts", "vocab");
                      }
                      removeSurfaceRetouchedArtefacts = false;
                    }
                  }
                }
              }
            } else if (type.get(1).equals("{um}")) {
              if (!hasView(tabgroup+tab+"/surfaceUnmodifiedStoneTypes")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/surfaceUnmodifiedStoneTypes", "Stone_-_Surface_-_Unmodified_Stone_Types", "{stoneArtefactClustersUI_surfaceUnmodifiedStoneTypes}", null, tabgroup+tab+"/surfaceUnmodifiedStoneTypes", "Stone_-_Surface_-_Unmodified_Stone_Types", "vocab");
              }
              if (!hasView(tabgroup+tab+"/surfaceUnmodifiedRawMaterial")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/surfaceUnmodifiedRawMaterial", "Stone_-_Surface_-_Unmodified_Stone_Raw_Material", "{stoneArtefactClusterUI_surfaceUnmodifiedRawMaterial}", null, tabgroup+tab+"/surfaceUnmodifiedRawMaterial", "Stone_-_Surface_-_Unmodified_Stone_Raw_Material", "vocab");  
              } 
              removeSurfaceUnmodifiedStone = false;
            } else if (type.get(1).equals("{gs}")) {
              if (!hasView(tabgroup+tab+"/surfaceGroundStoneTypes")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/surfaceGroundStoneTypes", "Stone_-_Surface_-_Ground_Stone_Types", "{stoneArtefactClustersUI_surfaceGroundStoneTypes}", null, tabgroup+tab+"/surfaceGroundStoneTypes", "Stone_-_Surface_-_Ground_Stone_Types", "vocab");
              }
              if (!hasView(tabgroup+tab+"/surfaceGroundStoneStatus")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/surfaceGroundStoneStatus", "Stone_-_Surface_-_Ground_Stone_Status", "{stoneArtefactClustersUI_surfaceGroundStoneStatus}", null, tabgroup+tab+"/surfaceGroundStoneStatus", "Stone_-_Surface_-_Ground_Stone_Status", "vocab");
              }
              if (!hasView(tabgroup+tab+"/surfaceGroundRawMaterial")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+tab+"/surfaceGroundRawMaterial", "Stone_-_Surface_-_Ground_Stone_Raw_Material", "{stoneArtefactClusterUI_surfaceGroundRawMaterial}", null, tabgroup+tab+"/surfaceGroundRawMaterial", "Stone_-_Surface_-_Ground_Stone_Raw_Material", "vocab");  
              }
              removeSurfaceGroundStone = false;
            } else {
              Log.e("stone.displaySurfaceTabViews()", "Error: no surface stone artefact selected");
            }
          }
        }
      }
    }
    removeSurfaceTabViews();
  }

  /** Removes any surface views that are flagged. **/
  removeSurfaceTabViews() {
    String tabgroup = entityTabgroup;
    String tab = "/surfaceDescription";
    if (removeSurfaceChippedStone) {
      if (hasView(tabgroup+tab+"/surfaceChippedStoneArtfacts")) {
        removeView(tabgroup+tab+"/surfaceChippedStoneArtfacts");
      }
      if (hasView(tabgroup+tab+"/surfaceChippedRawMaterial")) {
        removeView(tabgroup+tab+"/surfaceChippedRawMaterial");
      }
      removeSurfaceRetouchedArtefacts = true;
    }
    if (removeSurfaceRetouchedArtefacts) {
      if (hasView(tabgroup+tab+"/surfaceRetouchedArtefacts")) {
        removeView(tabgroup+tab+"/surfaceRetouchedArtefacts");
      }
    }
    if (removeSurfaceUnmodifiedStone) {
      if (hasView(tabgroup+tab+"/surfaceUnmodifiedStoneTypes")) {
        removeView(tabgroup+tab+"/surfaceUnmodifiedStoneTypes");
      }
      if (hasView(tabgroup+tab+"/surfaceUnmodifiedRawMaterial")) {
        removeView(tabgroup+tab+"/surfaceUnmodifiedRawMaterial");
      }
    }
    if (removeSurfaceGroundStone) {
      if (hasView(tabgroup+tab+"/surfaceGroundStoneTypes")) {
        removeView(tabgroup+tab+"/surfaceGroundStoneTypes");
      }
      if (hasView(tabgroup+tab+"/surfaceGroundStoneStatus")) {
        removeView(tabgroup+tab+"/surfaceGroundStoneStatus");
      }
      if (hasView(tabgroup+tab+"/surfaceGroundRawMaterial")) {
        removeView(tabgroup+tab+"/surfaceGroundRawMaterial");
      }
    }
  }

  /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("HierarchicalDropDown" , entityTabgroup + "/basicIdentification/" + "clusterType"             , "Stone_-_Cluster_Type");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/"  + "topographicSetting"      , "Stone_-_Topographic_Setting");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/"  + "sedimentType"            , "Stone_-_Sediment_Type");
    makeVocab("PictureGallery"             , entityTabgroup + "/topAndStratSetting/stratigraphicUnit"       , "Stone_-_Stratigraphic_Unit");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/"  + "erosionVulnerability"    , "Stone_-_Vulnerability_to_Erosion");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/"  + "paleotopographicSetting" , "Stone_-_Palaeotopographic_Setting");
    fetchVocabulary("Stone_-_Cluster_Type", clusterTypeVocabulary);
    fetchVocabulary("Stone_-_In_Situ_-_Stone_Artefacts", insituStoneArtefactsVocabulary);
    fetchVocabulary("Stone_-_In_Situ_-_Chipped_Stone_Artefacts", insituChippedStoneVocabulary);
    fetchVocabulary("Stone_-_Surface_-_Stone_Artefacts", surfaceStoneArtefactsVocabulary);
    fetchVocabulary("Stone_-_Surface_-_Chipped_Stone_Artefacts", surfaceChippedStoneVocabulary);

  }

  /** Populates the in-situ and surface associated materials list. **/
  listAssociatedMaterials() {
    Log.d("stone.listAssociatedMaterials", "Listing associated materials");
    listAssociatedMaterials(entityTabgroup+"/associatedMaterials/associatedMaterialListInSitu", id, stoneAssoc.insituArchentType, insituRelTypeName);
    listAssociatedMaterials(entityTabgroup+"/associatedMaterials/associatedMaterialListSurface", id, stoneAssoc.surfaceArchentType, surfaceRelTypeName);
  }

  onEvent(entityTabgroup                                                        , "show"  , "stone.save(); stone.checkClusterType();");
  onEvent(entityTabgroup + "/basicIdentification/clusterType"                   , "click" , "stone.checkClusterType();");
  onEvent(entityTabgroup + "/basicIdentification/calculateGridSquare"           , "click" , "calculateGridSquare(stone.id, stone.entityTabgroup, \""+entityTabgroup+"/basicIdentification/gridSquare\");");
  onEvent(entityTabgroup + "/associatedMaterials"                               , "show"  , "stone.listAssociatedMaterials();"); 
  onEvent(entityTabgroup + "/associatedMaterials/recordMaterialInSitu"          , "click" , "stoneAssoc.isInsituMaterial=true; stoneAssoc.create();");
  onEvent(entityTabgroup + "/associatedMaterials/recordMaterialSurface"         , "click" , "stoneAssoc.isInsituMaterial=false; stoneAssoc.create();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedMaterialListInSitu"   , "click" , "stoneAssoc.isInsituMaterial=true; stoneAssoc.load();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedMaterialListSurface" , "click" , "stoneAssoc.isInsituMaterial=false; stoneAssoc.load();");


  return this;
}
stone = stoneFeature();
stone.init();

/*** STONE ASSOCIATED MATERIALS ***/
stoneAssociatedMaterials() {
  String insituTabgroup = "stoneAssociatedInsituMaterials";
  String insituArchentType = "Stone Associated Insitu";
  String insituRelTypeName = "Stone And Associated Insitu Materials";
  String surfaceTabgroup = "stoneAssociatedSurfaceMaterials";
  String surfaceArchentType = "Stone Associated Surface";
  String surfaceRelTypeName = "Stone And Associated Surface Materials";
  String id = null;
  Boolean loading = false;
  Boolean isInsituMaterial = true;
  List insituMaterialVocabulary = new ArrayList();
  List surfaceMaterialVocabulary = new ArrayList();
  Boolean removeHearth = true;
  Boolean removeLacust = true;
  Boolean removeTerrbo = true;
  Boolean removeEggshell = true;
  Boolean removeOther = true;

  /** Saves the stone associated materials record. **/
  save() {
    String tabgroup = insituTabgroup;
    String relTypeName = insituRelTypeName;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
      relTypeName = surfaceRelTypeName;
    }
    Boolean enable_autosave = true;
    saveTabGroup(tabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("stoneAssoc.save()", "Saving the relation between stone " + stone.id + " and " + tabgroup + " " + id);
        String callback = "stone.listAssociatedMaterials();" + "showTab(\"stoneArtefactClusters/associatedMaterials\");";
        saveEntitiesToRel(relTypeName, stone.id, id, callback);
      }
    }, enable_autosave);
  }

  /** Loads the stone associated materials record. **/
  load() {
    String tabgroup = insituTabgroup;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
    }
    String selectedID = getListItemValue();
    if (!isNull(selectedID) && !selectedID.equals("placeholder")) {
      Log.d("load()", "Preparing to load associated material with ID: " + selectedID);
      id = selectedID;
      loading = true;
      removeAllViewsAndContainers(tabgroup);
      renderControlTab();
    }
  }

  /** Creates a stone associated materials record. **/
  create() {
    if (!isNull(stone.id)) {
      String tabgroup = insituTabgroup;
      String archentType = insituArchentType;
      String relTypeName = insituRelTypeName;
      if (!isInsituMaterial) {
        tabgroup = surfaceTabgroup;
        archentType = surfaceArchentType;
        relTypeName = surfaceRelTypeName;
      }
      fetchOne("select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = '"+archentType+"' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+stone.id+" " +
        "and relntypeName = '"+relTypeName+"') " +
        "and uuid != "+stone.id+");",  new FetchCallback() {
        onFetch(result) {
          if(isNull(result)) {
            id = null;
            removeAllViewsAndContainers(tabgroup);
            newTabGroup(tabgroup);
            renderControlTab();
          } else {
            String type = "insitu";
            if (!isInsituMaterial) {
              type = "surface";
            }
            showToast("Only one associated "+type+" material can be recorded");
          }
        }
      });
    }
  }

  /** Retrieves the dynamic associated material selection or null if it does not exist. **/
  List getSelectedAssocMaterial() {
    String dynamicView = insituTabgroup+"/nearbyMaterial/assocInsituMaterial";;
    if (!isInsituMaterial) {
      dynamicView = surfaceTabgroup+"/nearbyMaterial/assocSurfaceMaterial";
    }
    if (hasView(dynamicView)) {
      return getFieldValue(dynamicView);
    } else {
      Log.e("getSelectedAssocMaterial()", "No dynamic view "+dynamicView+" exists");
      return null;
    }
  }

  /** Display the associated material list and attach a callback to render the other tabs when appropriate. **/
  renderControlTab() {
    String tabgroup = insituTabgroup;
    String dynamicView = insituTabgroup+"/nearbyMaterial/assocInsituMaterial";
    String vocab = "Stone_-_In_Situ";
    String label = "{stoneAssociatedMaterialsUI_assocMaterialInSitu}";
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
      dynamicView = surfaceTabgroup+"/nearbyMaterial/assocSurfaceMaterial";
      vocab = "Stone_-_Surface";
      label = "{stoneAssociatedMaterialsUI_assocSurface}";
    }
    if (!hasView(dynamicView)) {
      String callback = "onEvent(\""+dynamicView+"\", \"click\", \"stoneAssoc.renderAssocTabs();\"); stoneAssoc.renderAssocTabs();";
      Log.d("renderControlTab()", "Making the dynamic view "+dynamicView+", as it doesn't exist");
      makeDynamicVocab("CheckBoxGroup", dynamicView, vocab, label, callback, null, vocab, "vocab");
      if (loading) {
        Log.d("renderControlTab()", "Preparing to load");
        loadAssocCallback();
      }
    } else {Log.d("renderControlTab()", "Not making dynamic view "+dynamicView+", as it already exists");}
  }

  /** Displays the associated material tabs when appropriate. **/
  renderAssocTabs() {
    selectedAssocMaterial = getSelectedAssocMaterial();
    if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty()) {
      String tabgroup = insituTabgroup;
      List vocabulary = insituMaterialVocabulary;
      if (!isInsituMaterial) {
        tabgroup = surfaceTabgroup;
        vocabulary = surfaceMaterialVocabulary;
      }
      for (selectedItem : selectedAssocMaterial) {
        for (type : vocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            Log.d("renderAssocTabs()", "Selected "+tabgroup+" "+type.get(1));
            if (type.get(1).equals("{hs}")) {
              if (!hasView(tabgroup+"/associatedHearthstones/assocHearth")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedHearthstones/assocHearth", "Stone_-_Hearth", "{stoneAssociatedMaterialsUI_assocHearth}", null, tabgroup+"/associatedHearthstones/assocHearth", "Stone_-_Hearth", "vocab");
              }
              removeHearth = false;
            } else if (type.get(1).equals("{lacust}")) {
              if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocLacust")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedLacustrineMaterial/assocLacust", "Stone_-_Lacustrine", "{stoneAssociatedMaterialsUI_assocLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocLacust", "Stone_-_Lacustrine", "vocab");
              }
              removeLacust = false;
            } else if (type.get(1).equals("{terrbo}")) {
              if (!hasView(tabgroup+"/associatedTerrestrialBone/assocTerrestrial")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "Stone_-_Terrestrial", "{stoneAssociatedMaterialsUI_assocTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "Stone_-_Terrestrial", "vocab");
              }
              removeTerrbo = false;
            } else if (type.get(1).equals("{eggshell}")) {
              if (!hasView(tabgroup+"/associatedEggshell/assocEggshell")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedEggshell/assocEggshell", "Stone_-_Eggshell", "{stoneAssociatedMaterialsUI_assocEggshell}", null, tabgroup+"/associatedEggshell/assocEggshell", "Stone_-_Eggshell", "vocab");
              }
              removeEggshell = false;
            } else if (type.get(1).equals("{otherwork}")) {
              if (!hasView(tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork")) {
                makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "Stone_-_Other_Worked_or_Transported_Material", "{stoneAssociatedMaterialsUI_assocOtherwork}", null, tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "Stone_-_Other_Worked_or_Transported_Material", "vocab");
              }
              removeOther = false;
            } else {
              Log.e("renderAssocTabs()", "Error: no matched insitu selected");
            }
          }
        }
      } 
    }
    // show and cancel the appropriate associated material tabs.
    onShowAssociatedMaterials();
  }

  /** Shows or cancels the associated material tabs. **/
  onShowAssociatedMaterials() {
    // if the tab show is triggered after loading, don't execute the rest of this function.
    if (loading) {
      Log.d("onShowAssociatedMaterials()", "Exiting function, loading associated material");
      return;
    }
    String tabgroup = insituTabgroup;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
    }
    // remove unselected tabs
    if (removeHearth) {
      cancelTab(tabgroup+"/associatedHearthstones", false);
    }
    if (removeLacust) {
      cancelTab(tabgroup+"/associatedLacustrineMaterial", false);
    } 
    if (removeTerrbo) {
      cancelTab(tabgroup+"/associatedTerrestrialBone", false);
    }
    if (removeEggshell) {
      cancelTab(tabgroup+"/associatedEggshell", false);
    }
    if (removeOther) {
      cancelTab(tabgroup+"/associatedOtherWorkedMaterial", false);
    }
    // show the selected tabs
    if (!removeHearth) {
      showTab(tabgroup+"/associatedHearthstones");
      removeHearth = true;
    }   
    if (!removeLacust) {
      showTab(tabgroup+"/associatedLacustrineMaterial");
      removeLacust = true;
    }
    if (!removeTerrbo) {
      showTab(tabgroup+"/associatedTerrestrialBone");
      removeTerrbo = true;
    } 
    if (!removeEggshell) {
      showTab(tabgroup+"/associatedEggshell");
      removeEggshell = true;
    } 
    if (!removeOther) {
      showTab(tabgroup+"/associatedOtherWorkedMaterial");
      removeOther = true;
    }
    // switch to the control tab and save the tabgroup
    showTab(tabgroup+"/nearbyMaterial");
    stoneAssoc.save();
  }


  loadAssocCallback() {
    String tabgroup = insituTabgroup;
    if (!isInsituMaterial) {
      tabgroup = surfaceTabgroup;
    }
    // render the default views for each associated material tab
    if (!hasView(tabgroup+"/associatedHearthstones/assocHearth")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedHearthstones/assocHearth", "Stone_-_Hearth", "{stoneAssociatedMaterialsUI_assocHearth}", null, tabgroup+"/associatedHearthstones/assocHearth", "Stone_-_Hearth", "vocab");
    }
    removeHearth = false;
    if (!hasView(tabgroup+"/associatedLacustrineMaterial/assocLacust")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedLacustrineMaterial/assocLacust", "Stone_-_Lacustrine", "{stoneAssociatedMaterialsUI_assocLacust}", null, tabgroup+"/associatedLacustrineMaterial/assocLacust", "Stone_-_Lacustrine", "vocab");
    }
    removeLacust = false;
    if (!hasView(tabgroup+"/associatedTerrestrialBone/assocTerrestrial")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "Stone_-_Terrestrial", "{stoneAssociatedMaterialsUI_assocTerrestrial}", null, tabgroup+"/associatedTerrestrialBone/assocTerrestrial", "Stone_-_Terrestrial", "vocab");
    }
    removeTerrbo = false;
    if (!hasView(tabgroup+"/associatedEggshell/assocEggshell")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedEggshell/assocEggshell", "Stone_-_Eggshell", "{stoneAssociatedMaterialsUI_assocEggshell}", null, tabgroup+"/associatedEggshell/assocEggshell", "Stone_-_Eggshell", "vocab");
    }
    removeEggshell = false;
    if (!hasView(tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork")) {
      makeDynamicVocab("CheckBoxGroup", tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "Stone_-_Other_Worked_or_Transported_Material", "{stoneAssociatedMaterialsUI_assocOtherwork}", null, tabgroup+"/associatedOtherWorkedMaterial/assocOtherwork", "Stone_-_Other_Worked_or_Transported_Material", "vocab");
    }
    removeOther = false;

    // load the saved values into the rendered views
    dialog = showBusy("loading record", "please wait");
    showTabGroup(tabgroup, id, new FetchCallback() {
      onFetch(result) {
        // print("loaded assoc: " + result + " with attributes: " + result.getAttributes());
        removeUnselectedMaterials();
        dialog.dismiss();
      }
    });
  }

  /** Removes the tabs for unselected materials when loading. **/
  removeUnselectedMaterials() {
    // only perform the removal if the associated materials are being loaded.
    if (!loading) {
      return;
    }
    Log.d("removeUnselectedMaterials()", "Removing unseletected materials from loaded associated material.");
    // get the selected material list values 
    selectedAssocMaterial = getSelectedAssocMaterial();
    if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty())
    {
      String tabgroup = insituTabgroup;
      List vocabulary = insituMaterialVocabulary;
      if (!isInsituMaterial) {
        tabgroup = surfaceTabgroup;
        vocabulary = surfaceMaterialVocabulary;
      }
      removeHearth = true;
      removeLacust = true;
      removeTerrbo = true;
      removeEggshell = true;
      removeOther = true;
      // flag the selected values which shouldn't be removed.
      for (selectedItem : selectedAssocMaterial) {
        for (type : vocabulary) {
          if (selectedItem.getName().equals(type.get(0))) {
            if (type.get(1).equals("{hs}")) {
              removeHearth = false;
            } else if(type.get(1).equals("{lacust}")) {
              removeLacust = false;
            } else if(type.get(1).equals("{terrbo}")) {
              removeTerrbo = false;
            } else if(type.get(1).equals("{eggshell}")) {
              removeEggshell = false;
            } else if(type.get(1).equals("{otherwork}")) {
              removeOther = false;
            } else {
              Log.e("removeUnselectedMaterials()", "Error: no matched insitu selected");
            }
          }
        }
      }
      // remove the unselected tabs, switching the load flag mark that the 'loading' process has finished.
      loading = false;
      onShowAssociatedMaterials();
    }
  }

  /** Initialises the tabgroup vocabularies. **/
  init() {
    fetchVocabulary("Stone_-_In_Situ", insituMaterialVocabulary);
    fetchVocabulary("Stone_-_Surface", surfaceMaterialVocabulary);
  }

  onEvent(insituTabgroup, "show", "stoneAssoc.onShowAssociatedMaterials(); keepTabGroupChanges(\""+insituTabgroup+"\"); stoneAssoc.save();");
  onEvent(surfaceTabgroup, "show", "stoneAssoc.onShowAssociatedMaterials(); keepTabGroupChanges(\""+surfaceTabgroup+"\"); stoneAssoc.save();");

  return this;
}
stoneAssoc = stoneAssociatedMaterials();
stoneAssoc.init();

/*** ISOLATED FEATURE ***/
isolatedFeature() {
  String entityTabgroup = "isolatedOccurrences";
  String archentType = "Isolated";
  String desc = archentType + " record";
  String id = null;
  String relTypeName = ""; // NEED TO REPLACE THIS WITH THE ACTUAL RELATIONSHIP NAME!!!
  List occurrenceTypeVocabulary = new ArrayList();

  /** Saves the feature **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(entityTabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("save()", desc + " saved with id: " + id);
        if (newRecord) {
          Log.d("save()", "New " + desc + " created");
        }
      }
      onError(message) {
          showToast(message);
      }  
    }, enable_autosave);
  }

  /** Creates a new feature record. **/
  create() {
    dialog = showBusy("creating a new record", "please wait");
    newTabGroup(entityTabgroup);
    id = null;
    setFieldValue(entityTabgroup + "/basicIdentification/idNumber", "0");
    setFieldValue(entityTabgroup + "/basicIdentification/gridSquare", "0");
    keepTabGroupChanges(entityTabgroup);
    save();
    dialog.dismiss();
  }

  /** Loads a feature record. **/
  load() {
    if (isNull(id)) {
      showToast("No entity selected");
        return;
    }
    dialog = showBusy("loading record", "please wait");
    showTabGroup(entityTabgroup, id, new FetchCallback() {
      onFetch(result) {
        Log.d("load()", "Loaded a " + desc + ", ID: " + id);
        showToast("Loaded a " + desc);
        keepTabGroupChanges(entityTabgroup);
        dialog.dismiss();
      }
    });
  }

   /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("DropDown"             , entityTabgroup + "/basicIdentification/inSituOrSurface"        , "Isolated_-_In_Situ_or_Surface");
    makeVocab("HierarchicalDropDown" , entityTabgroup + "/basicIdentification/occurrenceType"         , "Isolated_-_Occurrence_Type");
    makeVocab("DropDown"             , entityTabgroup + "/basicIdentification/stoneRawMaterialType"   , "Isolated_-_Stone_Raw_Material_Type");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/topographicSetting"      , "Isolated_-_Topographic_Setting");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/sedimentType"            , "Isolated_-_Sediment_Type");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/erosionVulnerability"    , "Isolated_-_Vulnerability_to_Erosion");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/paleotopographicSetting" , "Isolated_-_Palaeotopographic_Setting");
    fetchVocabulary("Isolated_-_Occurrence_Type", occurrenceTypeVocabulary);
  }

  /** Populates the in-situ and surface associated materials list. **/
  listAssociatedMaterials() {
    if(!isNull(id)) {
      String assocListQuery = "select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = '" + archentType + "Associated Materials' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+ id + " " +
        "and relntypeName = '" + relTypeName + "') " +
        "and uuid != "+ id +");";
      fetchAll(assocListQuery, new FetchCallback() {
        onFetch(result) {
          populateList(entityTabgroup + "/associatedMaterials/associatedMaterialList", result);
        }
      });
      Log.d("listAssociatedMaterials()", "Updated cursor list: associatedMaterialList");
    } else {
      result = new ArrayList();
      result.add(new NameValuePair("{noRecordsFound}", ""));
      populateList(entityTabgroup + "/associatedMaterials/associatedMaterialList", result);
    } 
  }

  /** Displays the insitu proportion view. **/
  displayOrganicOrStone() {
    //modificationtoStoneMaterial
    String selectedItem = getFieldValue(entityTabgroup + "/basicIdentification/occurrenceType");
    if (isNull(selectedItem)) {
      return;
    }
    if (occurrenceTypeVocabulary == null) {
      return;
    }
    String dynamicViewOrganic = entityTabgroup + "/basicIdentification/modificationtoOrganicMaterial";
    String dynamicViewStone   = entityTabgroup + "/basicIdentification/modificationtoStoneMaterial";

    /* Figure out the selected occurrence type (not the occurrence type's vocabid) */
    String selectedItemName = "";
    for (occurrenceType : occurrenceTypeVocabulary) {
      if (selectedItem.equals(occurrenceType.get(0))) {
        selectedItemName = occurrenceType.get(1);
        break;
      }
    }

    /* Figure out if an organic material is selected by comparing it to `selectedItemName` */
    ArrayList organicMaterials = new ArrayList();
    ArrayList stoneMaterials   = new ArrayList();

    organicMaterials.add("{bettong}");
    organicMaterials.add("{bivalve}");
    organicMaterials.add("{carnivore}");
    organicMaterials.add("{eggemu}");
    organicMaterials.add("{egggenyo}");
    organicMaterials.add("{eggindet}");
    organicMaterials.add("{eggother}");
    organicMaterials.add("{emu}");
    organicMaterials.add("{exoskel}");
    organicMaterials.add("{fishbone}");
    organicMaterials.add("{glith}");
    organicMaterials.add("{indetbone}");
    organicMaterials.add("{macropod}");
    organicMaterials.add("{otherbird}");
    organicMaterials.add("{reptile}");
    organicMaterials.add("{rodent}");
    organicMaterials.add("{smallmars}");
    organicMaterials.add("{wombat}");

    stoneMaterials.add("{backed}");
    stoneMaterials.add("{bifac}");
    stoneMaterials.add("{bonetool}");
    stoneMaterials.add("{core}");
    stoneMaterials.add("{debris}");
    stoneMaterials.add("{eggmod}");
    stoneMaterials.add("{facetochre}");
    stoneMaterials.add("{groundst}");
    stoneMaterials.add("{hammer}");
    stoneMaterials.add("{hscarb}");
    stoneMaterials.add("{hsclay}");
    stoneMaterials.add("{hsother}");
    stoneMaterials.add("{hsterm}");
    stoneMaterials.add("{indet}");
    stoneMaterials.add("{mport}");
    stoneMaterials.add("{notch}");
    stoneMaterials.add("{ochre}");
    stoneMaterials.add("{otehrru}");
    stoneMaterials.add("{qtzxtal}");
    stoneMaterials.add("{scraper}");
    stoneMaterials.add("{shellmod}");
    stoneMaterials.add("{unifpt}");

    Boolean isSelectedOrganicMaterial = organicMaterials.contains(selectedItemName);
    Boolean isSelectedStoneMaterial   = stoneMaterials.contains(selectedItemName);

    /* Update the UI based on the selected item */
    if (isSelectedOrganicMaterial) {
      if (hasView(dynamicViewStone)) {     // First, remove the stone view if it exists
        removeView(dynamicViewStone);
      }
      if (!hasView(dynamicViewOrganic)) {  // Then, add in the organic view if it doesn't exist yet
        String vocab = "Isolated_-_Modification_to_Organic_Material";
        String callback = "makeVocab(\"CheckBoxGroup\", \""+dynamicViewOrganic+"\", \""+vocab+"\");";
        makeDynamicVocab("CheckBoxGroup", dynamicViewOrganic, vocab, "{isolatedOccurrencesUI_modificationtoOrganicMaterial}", callback, dynamicViewOrganic, vocab, "vocab"); 
      }
    } else if (isSelectedStoneMaterial) {
      if (hasView(dynamicViewOrganic)) {     // First, remove the *organic* view if it exists
        removeView(dynamicViewOrganic);
      }
      if (!hasView(dynamicViewStone)) {       // Then, add in the *stone* view if it doesn't exist yet
        String vocab = "Isolated_-_Modification_to_Stone_Material";
        String callback = "makeVocab(\"CheckBoxGroup\", \""+dynamicViewStone+"\", \""+vocab+"\");";
        makeDynamicVocab("CheckBoxGroup", dynamicViewStone, vocab, "{isolatedOccurrencesUI_modificationtoStoneMaterial}", callback, dynamicViewStone, vocab, "vocab"); 
      }
    }
  }

  onEvent(entityTabgroup, "show", "isolated.save();");
  onEvent(entityTabgroup + "/basicIdentification/occurrenceType", "click", "isolated.displayOrganicOrStone();");
  onEvent(entityTabgroup + "/basicIdentification/calculateGridSquare", "click", "calculateGridSquare(isolated.id, isolated.entityTabgroup, \""+entityTabgroup+"/basicIdentification/gridSquare\");");

  return this;
}
isolated = isolatedFeature();
isolated.init();

/******************************************************************************/
/*                                   PHOTOS                                   */
/******************************************************************************/
// ArrayList tabGroups = new ArrayList();
// tabGroups.add(hearth.entityTabgroup);
// tabGroups.add(isolated.entityTabgroup);
// tabGroups.add(midden.entityTabgroup);
// tabGroups.add(oldbone.entityTabgroup);
// tabGroups.add(stone.entityTabgroup);
// for (tg : tabGroups) {
//   onEvent(tg + "/topAndStratSetting/takePhoto", "click", "attachPictureTo(\"" + tg + "/topAndStratSetting/photos\");");
// }

onEvent("hearth/topAndStratSetting/takePhoto"                 , "click", "attachPictureTo(\"hearth/topAndStratSetting/photos\");");
onEvent("stoneArtefactClusters/topAndStratSetting/takePhoto"  , "click", "attachPictureTo(\"stoneArtefactClusters/topAndStratSetting/photos\");");
onEvent("isolatedOccurrences/topAndStratSetting/takePhoto"    , "click", "attachPictureTo(\"isolatedOccurrences/topAndStratSetting/photos\");");
onEvent("midden/topAndStratSetting/takePhoto"                 , "click", "attachPictureTo(\"midden/topAndStratSetting/photos\");");
onEvent("oldBone/topAndStratSetting/takePhoto"                , "click", "attachPictureTo(\"oldBone/topAndStratSetting/photos\");");


